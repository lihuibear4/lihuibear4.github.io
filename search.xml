<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023-2024-1</title>
    <url>/2023/08/26/2023-2024-1/</url>
    <content><![CDATA[<blockquote>
<p><font face=楷体 size=5>“如果你不知道要去哪里，任何风向都不是顺风。” - 刘易斯・卡罗尔</font></p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font size=5>家中摆烂许久，时间在我周围悄悄流逝，提醒着我需要行动。我意识到，对于下一个学期，我必须制定一个明确的规划来实现自己的目标和追求。这些被忽视的日子已经足够，我不能再让机会溜走。我决定要将自己重新激活，迎接新的挑战和机遇。</font></p>
<h1 id="需要学习的科目"><a href="#需要学习的科目" class="headerlink" title="需要学习的科目"></a>需要学习的科目</h1><h2 id="专业课"><a href="#专业课" class="headerlink" title="专业课"></a>专业课</h2><p>➡️java程序设计基础</p>
<p>➡️Linux实用技术</p>
<h2 id="晚修"><a href="#晚修" class="headerlink" title="晚修"></a>晚修</h2><p>➡️网页设计</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>➡️大英</p>
<p>➡️概率论</p>
<p>➡️离散</p>
<p>➡️模电</p>
<p>➡️马原</p>
<p>➡️形式与政策</p>
<p>……</p>
<h1 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h1><p>😀暑假在项目组期间已经学完了javase，javaweb也基本学完，计划在下学期学完javaweb的同时在课堂上对之前的学习进行巩固</p>
<p>😄学习更多的linux知识</p>
<blockquote>
<p>本学习的linux主要讲的是在linux环境下编写C语言,下学期会学习单片机,计划提前进行单片机的相关学习</p>
</blockquote>
<p>💯背单词，过四级</p>
<blockquote>
<p>在全球化背景下，英语成为国际交流和商务沟通的要工具，招聘中英语要求普遍。持英语四级证书提升就业竞争力。英语是获取国际前沿知识的途径，科研成果、技术和学术讨论多以英文发布。通过四级学习，轻松获取信息，扩展知识。</p>
</blockquote>
<p>🐎练算法,打比赛</p>
<blockquote>
<p>算法比赛对大学生有许多积极的作用，不仅能够帮助他们在计算机科学领域获得更深入的理解，还能够培养解决问题、团队合作和创新思维等多方面的能力</p>
<p>算法比赛成绩是展示个人技术能力的重要途径，对<strong>求职</strong>和<strong>考研</strong>等都具有积极影响</p>
</blockquote>
<p>🧩补数据结构</p>
<blockquote>
<p>数据结构是一门考研课,需要认真对待,上学期没有认真学习,这学期要补回来</p>
</blockquote>
]]></content>
      <categories>
        <category>慧说</category>
        <category>个人规划</category>
      </categories>
      <tags>
        <tag>规划</tag>
      </tags>
  </entry>
  <entry>
    <title>2023牛客暑期多校训练营</title>
    <url>/2023/07/23/2023%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/</url>
    <content><![CDATA[<h1 id="第一场-范式杯"><a href="#第一场-范式杯" class="headerlink" title="第一场 范式杯"></a>第一场 范式杯</h1><h2 id="D-Chocolate"><a href="#D-Chocolate" class="headerlink" title="D Chocolate"></a>D Chocolate</h2><p>题意: 有一个 n * m 的网格，每格放了块巧克力。Walk Alone(懵哥)和 Kelin 轮流吃巧克力Kein 先吃。每轮个人能选择一个左下角为(1,1)的子矩形，把里面的巧克力吃光，且至少要吃一个。吃到最后一个巧克力的人输。问懵哥和 Kelin 谁赢。T 组测试数据，1&lt;T&lt;10^5^，1&lt;n,m &lt;10^9^。<br>解法: 当n&#x3D;m&#x3D;1显然哥赢。当n&gt;1或 m &gt;1设 Kein 第一步吃(1,1) 并且懵哥赢了，那么 Kelin 可以抢先走懵哥的必胜态且不改变局面 (因为(1,1) 被任意子矩形包含) ，因此 Kelin 必胜。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span>  n, m;</span><br><span class="line">    </span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(n == <span class="number">1</span> &amp;&amp; m == <span class="number">1</span>) cout&lt;&lt;<span class="string">&quot;Walk Alone&quot;</span>&lt;&lt;endl;   </span><br><span class="line">   <span class="keyword">else</span> cout&lt;&lt; <span class="string">&quot;Kelin&quot;</span>&lt;&lt;endl;</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>题目</category>
        <category>2023牛客暑期多校</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>牛客竞赛</tag>
      </tags>
  </entry>
  <entry>
    <title>AI研究计划</title>
    <url>/2023/08/16/AI%E7%A0%94%E7%A9%B6%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h1 id="AI图片-漫画处理"><a href="#AI图片-漫画处理" class="headerlink" title="AI图片&#x2F;漫画处理"></a>AI图片&#x2F;漫画处理</h1><h2 id="FaceChain"><a href="#FaceChain" class="headerlink" title="FaceChain"></a>FaceChain</h2><p>一个可以用来打造个人数字形象的深度学习模型工具只需要3张照片就能训练模型，生成个人写真。能够在本地部署运行。</p>
<blockquote>
<p>项目地址: <a class="link"   href="https://github.com/modelscope/facechain" >https://github.com/modelscope/facechain <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>windows版: <a class="link"   href="https://github.com/kigner/facechain" >https://github.com/kigner/facechain <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h2 id="image-ai"><a href="#image-ai" class="headerlink" title="image-ai"></a>image-ai</h2><p>一键抠图,一键切换图片背景,旧照片修复,AI人像多风格漫画,多场景文字识别,AI视屏卡通化</p>
<blockquote>
<p>项目地址: <a class="link"   href="https://github.com/sakoojiang/image-ai" >https://github.com/sakoojiang/image-ai <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>模型封装: <a class="link"   href="https://www.modelscope.cn/" >https://www.modelscope.cn/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h2 id="Comicfy-ai"><a href="#Comicfy-ai" class="headerlink" title="Comicfy.ai"></a>Comicfy.ai</h2><p>使用 WomboAI 的图像生成人工智能构建，可在任何故事或文本上生成漫画。</p>
<blockquote>
<p>项目地址: <a class="link"   href="https://github.com/ayush4345/Comicify.ai" >https://github.com/ayush4345/Comicify.ai <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h2 id="midjourney-proxy"><a href="#midjourney-proxy" class="headerlink" title="midjourney-proxy"></a>midjourney-proxy</h2><p>AI漫画自动生成</p>
<blockquote>
<p>项目地址: <a class="link"   href="https://github.com/novicezk/midjourney-proxy" >https://github.com/novicezk/midjourney-proxy <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h1 id="自动代理机器人"><a href="#自动代理机器人" class="headerlink" title="自动代理机器人"></a>自动代理机器人</h1><h2 id="BabyAGI"><a href="#BabyAGI" class="headerlink" title="BabyAGI"></a>BabyAGI</h2><p>本质上是一个与任务列表交互的语言模型，目的是根据预定义的目标自动生成任务、确定任务的优先级和执行任务。</p>
<blockquote>
<p>项目地址: <a class="link"   href="https://github.com/yoheinakajima/babyagi" >https://github.com/yoheinakajima/babyagi <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h2 id="Auto-GPT"><a href="#Auto-GPT" class="headerlink" title="Auto-GPT"></a>Auto-GPT</h2><p>Auto-GPT 是一个实验性开源应用程序，展示了 <strong>GPT-4</strong> 语言模型的功能。该计划由 GPT-4 驱动，将 LLM“想法”链接在一起，以自主实现您设定的任何目标。作为完全自主运行的 GPT-4 的首批示例之一，Auto-GPT 突破了人工智能的可能性界限。</p>
<blockquote>
<p>项目地址: <a class="link"   href="https://github.com/Significant-Gravitas/Auto-GPT" >https://github.com/Significant-Gravitas/Auto-GPT <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h2 id="AgentGPT"><a href="#AgentGPT" class="headerlink" title="AgentGPT"></a>AgentGPT</h2><p>AgentGPT 将 Auto-GPT&#x2F;BabyAGI 的想法带到了网络上</p>
<p>可帮助用户创建自主的AI代理。无需编程专业知识，AgentGPT可用于创建各种应用程序的代理，例如聊天机器人和流程自动化。此外，AgentGPT还能使用组织的数据进行训练，以生成准确答案，回答客户问题。AgentGPT不仅适用于自动化编码任务和技术操作，还适用于针对特定业务的定制化应用。</p>
<blockquote>
<p>项目地址: <a class="link"   href="https://github.com/reworkd/AgentGPT" >https://github.com/reworkd/AgentGPT <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>计算机前沿</category>
        <category>AI</category>
        <category>学习与研究</category>
      </categories>
      <tags>
        <tag>计划</tag>
      </tags>
  </entry>
  <entry>
    <title>2023项目组招新</title>
    <url>/2023/06/26/2023%E9%A1%B9%E7%9B%AE%E7%BB%84%E6%8B%9B%E6%96%B0/</url>
    <content><![CDATA[<h1 id="一、选择题（6×5-30分）"><a href="#一、选择题（6×5-30分）" class="headerlink" title="一、选择题（6×5&#x3D;30分）"></a>一、选择题（6×5&#x3D;30分）</h1><p><strong>1、下列程序段的时间复杂度是（ <u>B</u>）</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i *= <span class="number">2</span>) </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) </span><br><span class="line">        sum++;</span><br></pre></td></tr></table></figure></div>

<p>A. O*(log⁡*n)</p>
<p>B. O*(*n)</p>
<p>C. O*(<em>n</em>log⁡<em>n</em>)</p>
<p>D. O*(*n²)</p>
<p>根据给定的代码片段，我们可以分析其时间复杂度。</p>
<p>外层循环的迭代次数由 <code>i *= 2</code> 控制，<code>i</code> 的初始值为 1，每次循环将 <code>i</code> 乘以 2，直到 <code>i</code> 不小于 <code>n</code> 时退出循环。因此，外层循环的迭代次数为 <code>log₂(n)</code>。</p>
<p>内层循环的迭代次数由外层循环的当前 <code>i</code> 控制，每次循环从 0 迭代到 <code>i-1</code>，共 <code>i</code> 次迭代。</p>
<p>因此，总的迭代次数可以表示为：</p>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">1 + 2 + 4 + 8 + ... + n/4 + n/2 + n</span><br></pre></td></tr></table></figure></div>

<p>这是一个等比数列求和，根据等比数列求和公式，可知总的迭代次数为 <code>2n - 1</code>。</p>
<p>因此，根据迭代次数分析，给定代码片段的时间复杂度为 <code>O(n)</code>。</p>
<p><strong>2、以下叙述中正确的是（ <u>A</u>）</strong></p>
<p>A、函数名代表该函数入口地址</p>
<p>B、所有函数不能接受函数名作为实参传入</p>
<p>C、函数体中的语句不能对自己的调用</p>
<p>D、如果函数带有参数,就不能调用自己</p>
<p><strong>3、在 C 语言中，以下哪个选项是正确的文件打开模式（<u>B</u> ）</strong></p>
<p>A. r+b</p>
<p>B. w+b</p>
<p>C. a+b</p>
<p>D. r+w+b</p>
<p>解析：w+b 是 C 语言中用于读写二进制文件的模式。其他选项分别表示读取文本文件(r)、写入文本文件(w)和追加文本文件(a)</p>
<p><strong>4、在 Java 语言中，以下哪个选项是正确的错误处理方式（ <u>A</u>）</strong></p>
<p>A. try-catch-finally</p>
<p>B. throw-catch-finally</p>
<p>C. catch-throw-finally</p>
<p>D. finally-catch-throw</p>
<p><strong>5、C语言中，不合法的字符常量是（ <u>B</u>）</strong></p>
<p>A. ‘\t’</p>
<p>B.“a”</p>
<p>C. ‘a’</p>
<p>D.‘\x32’</p>
<p><strong>6、C语言的编译过程（ <u>B</u>）</strong></p>
<p>a.预处理 b.汇编 c.编译 d. 链接</p>
<p>A. abcd</p>
<p>B. acbd</p>
<p>C. adbc</p>
<p>D. abc</p>
<h1 id="二、填空题（6×5-30分）"><a href="#二、填空题（6×5-30分）" class="headerlink" title="二、填空题（6×5&#x3D;30分）"></a>二、填空题（6×5&#x3D;30分）</h1><p>1、下面代码的<code>f()</code>执行了（ <u>10</u>）次</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">while</span>(--n) f();</span><br></pre></td></tr></table></figure></div>

<p>2、已知字母a的ASCII码为十进制数97,且设ch为字符型变量,则表达式 <code>ch = &#39;a&#39; + 8 - 3;</code> ，<code>ch</code>的值为（ <u>‘f’</u>）(用字符来表示)</p>
<p>3、<code>char str[]=“1234”</code>, <code>*p=str</code>,则 <code>*(p+1)</code>是（<u>2</u> ）</p>
<p>4、下面代码输出是（<u>6</u>）</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span> + <span class="number">2</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a);</span><br></pre></td></tr></table></figure></div>

<p>5、以下代码段的输出结果是（<u>12</u> ）</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> y = x++ + ++x;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, y);</span><br></pre></td></tr></table></figure></div>

<p>6、以下代码段的输出结果是（<u>a</u> ）</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> ch1=<span class="string">&#x27;A&#x27;</span>,ch2=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,(ch1,ch2));</span><br></pre></td></tr></table></figure></div>

<p>在给定的代码中，使用了逗号操作符<code>(ch1, ch2)</code>作为printf函数的参数。</p>
<p>逗号操作符在C语言中的作用是对多个表达式进行求值，并返回最后一个表达式的值。在这种情况下，<code>(ch1, ch2)</code>首先对ch1求值，然后对ch2求值，最终返回ch2的值。</p>
<h1 id="三、算法设计-反转链表（20分）"><a href="#三、算法设计-反转链表（20分）" class="headerlink" title="三、算法设计-反转链表（20分）"></a>三、算法设计-反转链表（20分）</h1><p>csdn:</p>
<p><a class="link"   href="https://blog.csdn.net/nanfeibuyi/article/details/90116419?ops_request_misc=%7B%22request_id%22:%22168777884716800188565755%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168777884716800188565755&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-90116419-null-null.142" >https://blog.csdn.net/nanfeibuyi/article/details/90116419?ops_request_misc=%7B%22request%5Fid%22%3A%22168777884716800188565755%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=168777884716800188565755&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-90116419-null-null.142 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//链表节点定义 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">s_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">s_node</span>* <span class="title">pNext</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"> </span><br><span class="line">Node* <span class="title function_">create_list_head</span><span class="params">()</span>;</span><br><span class="line">Node* <span class="title function_">create_new_node</span><span class="params">(<span class="type">int</span> node_data)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">add_node_head</span><span class="params">(Node* head, Node* new_node)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">display_list</span><span class="params">(Node* head)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">free_list</span><span class="params">(Node* head)</span>;</span><br><span class="line">Node* <span class="title function_">revert_list</span><span class="params">(Node* head)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//创建链表 </span></span><br><span class="line">	Node* head = create_list_head();</span><br><span class="line">	<span class="keyword">if</span>(<span class="literal">NULL</span> == head)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;create_list_head failed!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//填充数据（添加节点） </span></span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line">		add_node_head(head, create_new_node(i));</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//打印原来链表数据 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;befor &quot;</span>); </span><br><span class="line">	display_list(head);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//反转链表</span></span><br><span class="line">	head = revert_list(head); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;after &quot;</span>); </span><br><span class="line">	display_list(head);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//释放链表空间 </span></span><br><span class="line">	free_list(head);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//创建链表 </span></span><br><span class="line">Node* <span class="title function_">create_list_head</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	Node* head = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	<span class="keyword">if</span>(<span class="literal">NULL</span> != head)</span><br><span class="line">	&#123;</span><br><span class="line">		head-&gt;data= <span class="number">-1</span>;</span><br><span class="line">		head-&gt;pNext= <span class="literal">NULL</span>;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//创建新节点 </span></span><br><span class="line">Node* <span class="title function_">create_new_node</span><span class="params">(<span class="type">int</span> node_data)</span></span><br><span class="line">&#123;</span><br><span class="line">	Node* new_node = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	<span class="keyword">if</span>(<span class="literal">NULL</span> != new_node)</span><br><span class="line">	&#123;</span><br><span class="line">		new_node-&gt;data= node_data;</span><br><span class="line">		new_node-&gt;pNext= <span class="literal">NULL</span>;	</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">return</span> new_node;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//头插法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add_node_head</span><span class="params">(Node* head, Node* new_node)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="literal">NULL</span> == head || <span class="literal">NULL</span> == new_node)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> 	new_node-&gt;pNext = head-&gt;pNext;</span><br><span class="line">	head-&gt;pNext = new_node;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//打印链表数据 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">display_list</span><span class="params">(Node* head)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="literal">NULL</span> == head)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	Node* tmp = head;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;list data:&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="literal">NULL</span> !=(tmp=tmp-&gt;pNext))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, tmp-&gt;data);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//释放链表 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">free_list</span><span class="params">(Node* head)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="literal">NULL</span> == head) </span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	Node* p = head;</span><br><span class="line">	<span class="keyword">while</span>(p = p-&gt;pNext)</span><br><span class="line">	&#123;</span><br><span class="line">		head-&gt;pNext = p-&gt;pNext;</span><br><span class="line">		<span class="comment">//printf(&quot;free:%d\n&quot;, p-&gt;data);</span></span><br><span class="line">		<span class="built_in">free</span>(p);</span><br><span class="line">		p = head;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(head);</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//头插方式1-反转链表 </span></span><br><span class="line">Node* <span class="title function_">revert_list</span><span class="params">(Node* head)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="literal">NULL</span> == head)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">	Node* p = head-&gt;pNext;</span><br><span class="line">	head-&gt;pNext= <span class="literal">NULL</span>;</span><br><span class="line">	Node* tmp = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">while</span>(p)</span><br><span class="line">	&#123;</span><br><span class="line">		tmp = p-&gt;pNext;</span><br><span class="line">		add_node_head(head, p); </span><br><span class="line">		p = tmp;	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>题目</category>
        <category>项目组</category>
      </categories>
      <tags>
        <tag>项目组</tag>
      </tags>
  </entry>
  <entry>
    <title>Auto-PPT本地部署</title>
    <url>/2023/08/15/Auto-PPT%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="项目来源"><a href="#项目来源" class="headerlink" title="项目来源"></a>项目来源</h1><p>本项目来着github开源项目 <a class="link"   href="https://github.com/limaoyi1/Auto-PPT" > Auto-PPT  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<blockquote>
<p>感谢大佬的热心提供以及后续问题的解决</p>
</blockquote>
<h1 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h1><p>一般来说按照大佬的readme文档就可以了，下面将分享我的部署经历</p>
<ol>
<li><p>创建虚拟环境<br> <code>python -m venv venv</code></p>
</li>
<li><p>激活虚拟环境<br> <code>venv\Scripts\activate</code></p>
<blockquote>
<p>此处和大佬的readme文档不同</p>
</blockquote>
</li>
<li><p>安装要求的python组件<br>  <code>pip install -r requirements.txt</code></p>
</li>
<li><p>参数配置修改</p>
<blockquote>
<ol>
<li>在 config.ini 添加你的api key</li>
<li>修改.&#x2F;readconfig&#x2F;mycofig.py 的base 绝对路径 使其为config.ini的文件夹路径</li>
</ol>
</blockquote>
</li>
<li><p>启动程序<br>  <code>python application.py</code></p>
</li>
<li><p>发现部分包还未添加，如<code>pptx</code>,<code>markdown</code>,<code>openai</code>等</p>
<blockquote>
<p>缺什么加什么就行，pip install xxx</p>
</blockquote>
</li>
<li><p>下载Redis，开启</p>
<blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Auto-PPT%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/image-20230815194850596.png"
                      alt="redis"
                ></p>
</blockquote>
</li>
<li><p>重新运行即可</p>
</li>
</ol>
]]></content>
      <categories>
        <category>计算机前沿</category>
        <category>AI</category>
        <category>本地部署</category>
      </categories>
      <tags>
        <tag>Auto-PPT</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing周赛_第114场</title>
    <url>/2023/07/30/AcWing%E5%91%A8%E8%B5%9B-%E7%AC%AC114%E5%9C%BA/</url>
    <content><![CDATA[<p><a class="link"   href="https://www.acwing.com/activity/content/3383/" >第114场周赛 - AcWing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="2的整数次幂"><a href="#2的整数次幂" class="headerlink" title="2的整数次幂"></a>2的整数次幂</h1><p>给定一个整数 n，请你判断 n 是否是 2 的整数次幂。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含整数 T，表示共有 T 组测试数据。</p>
<p>每组数据占一行，包含一个整数 n。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>每组数据输出一行结果，如果 n 是 2的整数次幂，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p>
<h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><p>所有测试点满足 1≤T≤10，2≤n≤10^9^.</p>
<h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure></div>

<h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure></div>

<h2 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">flag</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">flag</span>(n))&#123;</span><br><span class="line">           cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;endl;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="截断数组"><a href="#截断数组" class="headerlink" title="截断数组"></a>截断数组</h1><p>给定一个长度为 n 的正整数数组 a1,a2,…,an1,2,…, 和一个正整数 p。</p>
<p>现在，要将该数组从中间截断，得到两个<strong>非空</strong>子数组。</p>
<p>我们规定，一个数组的价值等于数组内所有元素之和模 p 的结果。</p>
<p>我们希望，将给定数组截断后，得到的两个<strong>非空</strong>子数组的价值之和尽可能大。</p>
<p>请你输出这两个<strong>非空</strong>子数组的价值之和的最大可能值。</p>
<h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含两个整数 n 和 p。</p>
<p>第二行包含 n 个整数 a1,a2,…,an1,2,…,。</p>
<h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示价值之和的最大可能值。</p>
<h2 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h2><p>前 3个测试点满足 2≤n≤10.<br>所有测试点满足 2≤n≤10^5^，2≤p≤10000，1≤a<del>i</del>≤10^6^.</p>
<h2 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">4 10</span><br><span class="line">3 4 7 2</span><br></pre></td></tr></table></figure></div>

<h2 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">16</span><br></pre></td></tr></table></figure></div>

<h2 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">10 12</span><br><span class="line">16 3 24 13 9 8 7 5 12 12</span><br></pre></td></tr></table></figure></div>

<h2 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure></div>

<h2 id="我的代码-1"><a href="#我的代码-1" class="headerlink" title="我的代码"></a>我的代码</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxx</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> p, vector&lt;<span class="type">int</span>&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">aa</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;=n; i++) &#123;</span><br><span class="line">        aa[i] = (aa[i - <span class="number">1</span>] + a[i - <span class="number">1</span>]) % p;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> maxSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum1 = aa[i];</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum2 = (aa[n] - aa[i] + p) % p;</span><br><span class="line">        maxSum = <span class="built_in">max</span>(maxSum, sum1 + sum2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,p;  </span><br><span class="line">    cin&gt;&gt;n&gt;&gt;p; </span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sum = <span class="built_in">maxx</span>(n,p,a);</span><br><span class="line">    cout &lt;&lt; sum&lt;&lt;endl;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="双色球"><a href="#双色球" class="headerlink" title="双色球"></a>双色球</h1><p>约翰和贝茜玩抽球游戏。</p>
<p>一个盒子中有 n 个白球和 m 个黑球。</p>
<p>双方轮流行动，由约翰先行。</p>
<p>每当轮到一方行动时，其从盒中随机抽出一个球，盒子中的每个球被抽出的概率相同。</p>
<p>率先抽出白球的一方获胜。</p>
<p>此外，由于贝茜的手比较笨拙，所以每当她抽出一个球后，盒子都会剧烈摇晃，随后就会有恰好一个球掉出盒子（如果盒中有球的话），盒子中的每个球掉出的概率相同。</p>
<p>掉出的球无论是什么颜色，都予以作废。</p>
<p>当盒子中没有球时，如果仍未分出胜负，则判定为贝茜获胜。</p>
<p>请你计算，约翰获胜的概率。</p>
<h2 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行，两个整数 n,m,。</p>
<h2 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个实数，表示约翰获胜的概率。</p>
<p>输出结果与正确答案的绝对误差不超过 10^−9^，则视为正确。</p>
<h2 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h2><p>前 44个测试点满足 0≤n,m≤1000.<br>所有测试点满足 0≤n,m≤10000;</p>
<h2 id="输入样例1：-1"><a href="#输入样例1：-1" class="headerlink" title="输入样例1："></a>输入样例1：</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">1 3</span><br></pre></td></tr></table></figure></div>

<h2 id="输出样例1：-1"><a href="#输出样例1：-1" class="headerlink" title="输出样例1："></a>输出样例1：</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">0.500000000</span><br></pre></td></tr></table></figure></div>

<h2 id="输入样例2：-1"><a href="#输入样例2：-1" class="headerlink" title="输入样例2："></a>输入样例2：</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">5 5</span><br></pre></td></tr></table></figure></div>

<h2 id="输出样例2：-1"><a href="#输出样例2：-1" class="headerlink" title="输出样例2："></a>输出样例2：</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">0.658730159</span><br></pre></td></tr></table></figure></div>

<h2 id="我的代码-2"><a href="#我的代码-2" class="headerlink" title="我的代码"></a>我的代码</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">double</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;=m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> p1 = <span class="number">0</span>, p2 = <span class="number">0</span>, p3 = <span class="number">0</span>;</span><br><span class="line">            p1 = i * <span class="number">1.0</span> /(i+j);</span><br><span class="line">            <span class="type">double</span> p4 = j *<span class="number">1.0</span> /(i+j)*(j<span class="number">-1</span>)/(i+j<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=<span class="number">2</span>)</span><br><span class="line">                p2 = p4 * i /(i+j<span class="number">-2</span>) * f[i<span class="number">-1</span>][j<span class="number">-2</span>];</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=<span class="number">3</span>)</span><br><span class="line">                p3 = p4 * (j<span class="number">-2</span>)/(i+j<span class="number">-2</span>) * f[i][j<span class="number">-3</span>];</span><br><span class="line">                f[i][j] = p1 + p2 + p3;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.10lf\n&quot;</span>,f[n][m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>题目</category>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>周赛</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeGeeX的调研</title>
    <url>/2023/08/10/CodeGeeX%E7%9A%84%E8%B0%83%E7%A0%94/</url>
    <content><![CDATA[<h1 id="CodeGeeX的调研"><a href="#CodeGeeX的调研" class="headerlink" title="CodeGeeX的调研"></a>CodeGeeX的调研</h1><h2 id="官方链接"><a href="#官方链接" class="headerlink" title="官方链接"></a>官方链接</h2><p><a class="link"   href="https://codegeex.cn/zh-CN/" >CodeGeeX <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>CodeGeeX是一款基于大模型的全能的智能编程助手。它可以实现代码的生成与补全、自动添加注释、代码翻译以及智能问答等功能，能够帮助开发者显著提高工作效率。CodeGeeX支持主流的编程语言，并适配多种主流IDE。</p>
<ol>
<li>CodeGeeX2-6B 更好支持中英文输入，支持最大 8192 序列长度</li>
<li></li>
</ol>
<h2 id="CodeGeeX支持哪些编程语言？"><a href="#CodeGeeX支持哪些编程语言？" class="headerlink" title="CodeGeeX支持哪些编程语言？"></a>CodeGeeX支持哪些编程语言？</h2><p>CodeGeeX支持Python、Java、C++、JavaScript、Go等数十种常见编程语言。</p>
<h2 id="CodeGeeX支持哪些IDE？"><a href="#CodeGeeX支持哪些IDE？" class="headerlink" title="CodeGeeX支持哪些IDE？"></a>CodeGeeX支持哪些IDE？</h2><p>CodeGeeX支持Visual Studio Code及IntelliJ IDEA、PyCharm、GoLand等JetBrains IDE。</p>
<h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>目前第二代也作为插件，可在JetBrains IDE，Vs Code下载</p>
<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>计划找到开源的replite-code测试</p>
<hr>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li>没有说如何训练的</li>
<li>没有公布如何微调，暂时不能提供微调</li>
</ol>
]]></content>
      <categories>
        <category>计算机前沿</category>
        <category>AI</category>
        <category>学习与研究</category>
      </categories>
      <tags>
        <tag>代码生成</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML&amp;&amp;CSS</title>
    <url>/2023/08/11/HTML&amp;&amp;CSS/</url>
    <content><![CDATA[<h1 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h1><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念：是最基础的网页开发语言</span><br><span class="line"><span class="bullet">	*</span> Hyper Text Markup Language 超文本标记语言</span><br><span class="line"><span class="bullet">		*</span> 超文本：</span><br><span class="line"><span class="bullet">			*</span> 超文本是用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本。</span><br><span class="line"><span class="bullet">		*</span> 标记语言：</span><br><span class="line"><span class="bullet">			*</span> 由标签构成的语言。&lt;标签名称&gt; 如html, xml</span><br><span class="line"><span class="bullet">			*</span> 标记语言不是编程语言</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 快速入门：</span><br><span class="line"><span class="bullet">	*</span> 语法：</span><br><span class="line"><span class="bullet">		1.</span> html文档后缀名 .html 或者 .htm</span><br><span class="line"><span class="bullet">		2.</span> 标签分为</span><br><span class="line"><span class="bullet">			1.</span> 围堵标签：有开始标签和结束标签。如 <span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span> <span class="language-xml">&lt;/HTML&amp;&amp;CSS&gt;</span></span><br><span class="line"><span class="bullet">			2.</span> 自闭和标签：开始标签和结束标签在一起。 如 <span class="language-xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="bullet">		3.</span> 标签可以嵌套：</span><br><span class="line"><span class="code">			需要正确嵌套，不能你中有我，我中有你</span></span><br><span class="line"><span class="code">			错误: &lt;a&gt;&lt;b&gt;&lt;/a&gt;&lt;/b&gt;</span></span><br><span class="line"><span class="code">			正确: &lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="code">			</span></span><br><span class="line"><span class="code">		4. 在开始标签中可以定义属性。属性是由键值对组成，值需要用引号(单双都可)引起来</span></span><br><span class="line"><span class="code">		5. html的标签不区分大小写，建议使用小写。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> 标签学习：</span><br><span class="line"><span class="bullet">	1.</span> 文件标签：构成html最基本的标签</span><br><span class="line"><span class="bullet">		*</span> html:html文档的根标签</span><br><span class="line"><span class="bullet">		*</span> head:头标签。用于指定html文档的一些属性。引入外部的资源</span><br><span class="line"><span class="bullet">		*</span> title:标题标签 </span><br><span class="line"><span class="bullet">		*</span> body：体标签</span><br><span class="line"><span class="bullet">		*</span> &lt;!DOCTYPE html&gt;:html5中定义改文档是html文档</span><br><span class="line"><span class="bullet">	2.</span> 文本标签：和文本有关的标签</span><br><span class="line"><span class="bullet">		*</span> 注释：&lt;!-- --&gt;</span><br><span class="line"><span class="bullet">		*</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span> to <span class="language-xml"><span class="tag">&lt;<span class="name">h6</span>&gt;</span></span>：标题标签</span><br><span class="line"><span class="bullet">			*</span> h1~h6字体大小主键递减</span><br><span class="line"><span class="bullet">		*</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>：段落标签</span><br><span class="line"><span class="bullet">		*</span> <span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span>：换行标签</span><br><span class="line"><span class="bullet">		*</span> <span class="language-xml"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span>：展示一条水平线</span><br><span class="line"><span class="bullet">			*</span> 属性：</span><br><span class="line"><span class="bullet">				*</span> color：颜色</span><br><span class="line"><span class="bullet">				*</span> width：宽度</span><br><span class="line"><span class="bullet">				*</span> size：高度</span><br><span class="line"><span class="bullet">				*</span> align：对齐方式</span><br><span class="line"><span class="bullet">					*</span> center：居中</span><br><span class="line"><span class="bullet">					*</span> left：左对齐</span><br><span class="line"><span class="bullet">					*</span> right：右对齐</span><br><span class="line"><span class="bullet">		*</span> <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>：字体加粗</span><br><span class="line"><span class="bullet">		*</span> <span class="language-xml"><span class="tag">&lt;<span class="name">i</span>&gt;</span></span>：字体斜体</span><br><span class="line"><span class="bullet">		*</span> <span class="language-xml"><span class="tag">&lt;<span class="name">font</span>&gt;</span></span>：字体标签</span><br><span class="line"><span class="bullet">			*</span> 属性：</span><br><span class="line"><span class="bullet">				*</span> color：颜色</span><br><span class="line"><span class="bullet">				*</span> size：大小</span><br><span class="line"><span class="bullet">				*</span> face：字体</span><br><span class="line"><span class="bullet">		*</span> <span class="language-xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span>：文本居中</span><br><span class="line"><span class="bullet">		*</span> 属性定义：</span><br><span class="line"><span class="bullet">			*</span> color：</span><br><span class="line"><span class="bullet">				1.</span> 英文单词：red,green,blue</span><br><span class="line"><span class="bullet">				2.</span> rgb(值1, 值2, 值3):值的范围：0~255	如 rgb(0,0,25 5)</span><br><span class="line"><span class="bullet">				3.</span> #值1值2值3：值的范围：00~FF。 如: #FF00FF</span><br><span class="line"><span class="bullet">			*</span> width:</span><br><span class="line"><span class="bullet">				1.</span> 数值：width=&#x27;20&#x27;，数值的单位，默认是 px(像素)</span><br><span class="line"><span class="bullet">				2.</span> 数值% ：占比相对于父元素的比例</span><br><span class="line"></span><br><span class="line"><span class="bullet">		*</span> 案例</span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="code">	3. 图片标签</span></span><br><span class="line"><span class="code">		* img：展示图片</span></span><br><span class="line"><span class="code">			* 属性：</span></span><br><span class="line"><span class="code">				* src：指定图片位置</span></span><br><span class="line"><span class="code">			* 相对路径：</span></span><br><span class="line"><span class="code">				* 以.开头的路径</span></span><br><span class="line"><span class="code">					* ./: 代表当前目录	./image/1.jpg</span></span><br><span class="line"><span class="code">					* ../: 代表上一级目录</span></span><br><span class="line"><span class="code">	4. 列表标签：</span></span><br><span class="line"><span class="code">		* 有序列表：</span></span><br><span class="line"><span class="code">			* ol</span></span><br><span class="line"><span class="code">			* li</span></span><br><span class="line"><span class="code">		* 无序标签：</span></span><br><span class="line"><span class="code">			* ul</span></span><br><span class="line"><span class="code">			* li </span></span><br><span class="line"><span class="code">	5. 链接标签</span></span><br><span class="line"><span class="code">		* a：定义一个超链接</span></span><br><span class="line"><span class="code">			* 属性：</span></span><br><span class="line"><span class="code">				* href：指定访问资源的URL(统一资源定位符)</span></span><br><span class="line"><span class="code">				* target：指定打开资源的方 式</span></span><br><span class="line"><span class="code">					* _self：默认值，在当前页面打开</span></span><br><span class="line"><span class="code">					* _blank：在空白页面打开</span></span><br><span class="line"><span class="code">	6. div和span：</span></span><br><span class="line"><span class="code">		* div：  </span></span><br><span class="line"><span class="code">		* span：文本信息在一行展示，行内标签，内联标签。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">	7.</span> 语义化标签：html5中为了提高程序的可读性，提供了一些标签</span><br><span class="line"><span class="bullet">		1.</span> <span class="language-xml"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span>: 页眉</span><br><span class="line"><span class="bullet">		2.</span> <span class="language-xml"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span>: 页脚</span><br><span class="line"><span class="code">	*6,7需要结合css一起使用</span></span><br><span class="line"><span class="code">	8. 表格标签</span></span><br><span class="line"><span class="code">		* table：定义表格</span></span><br><span class="line"><span class="code">			* width：宽度</span></span><br><span class="line"><span class="code"> 			* cellpadding：定义内容和单元格的距离</span></span><br><span class="line"><span class="code">			* cellspacing：定义单元格之间的距离。如果指定为0，则单元格的线会合为一条。</span></span><br><span class="line"><span class="code">			* bgcolor：背景色</span></span><br><span class="line"><span class="code">			* align：对齐方式</span></span><br><span class="line"><span class="code">		* tr：定义行</span></span><br><span class="line"><span class="code">			* bgcolor：背景色</span></span><br><span class="line"><span class="code">			* align：对齐方式</span></span><br><span class="line"><span class="code">		* td：定义单元格</span></span><br><span class="line"><span class="code">			* colspan：合并行</span></span><br><span class="line"><span class="code">			* rowspan：合并列 </span></span><br><span class="line"><span class="code">		* th：定义表头单元格</span></span><br><span class="line"><span class="code">		* &lt;caption&gt;：表格标题</span></span><br><span class="line"><span class="code">		* &lt;thead&gt;：表示表格的头部分</span></span><br><span class="line"><span class="code">		* &lt;tbody&gt;：表示表格的体部分</span></span><br><span class="line"><span class="code">		* &lt;tfoot&gt;：表示表格的脚部分</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure></div>

<h3 id="特殊字符表"><a href="#特殊字符表" class="headerlink" title="特殊字符表"></a>特殊字符表</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/HTML&&CSS/image-20230726115448051.png"
                      alt="image-20230726115448051"
                ></p>
<h3 id="HTML标签：表单标签"><a href="#HTML标签：表单标签" class="headerlink" title="HTML标签：表单标签"></a>HTML标签：表单标签</h3><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 表单：</span><br><span class="line"><span class="bullet">	*</span> 概念：用于采集用户输入的数据的。用于和服务器进行交互。</span><br><span class="line"><span class="bullet">	*</span> form: 用于定义表单的。可以定义一个范围，范围代表用户采集数据的范围</span><br><span class="line"><span class="bullet">		*</span> 属性：</span><br><span class="line"><span class="bullet">			*</span> action：指定提交数据的URL</span><br><span class="line"><span class="bullet">            *</span> method：指定提交方式</span><br><span class="line"><span class="bullet">                *</span> 分类：一共七种，两种比较常用</span><br><span class="line"><span class="bullet">                    *</span> GET：</span><br><span class="line"><span class="bullet">                    	1.</span> 请求参数会在地址栏中显示，会封装到请求行中(HTTP协议后讲解)</span><br><span class="line"><span class="bullet">                    	2.</span> 请求参数的大小是有限制的</span><br><span class="line"><span class="bullet">                    	3.</span> 不太安全</span><br><span class="line"><span class="bullet">                    *</span> POST：</span><br><span class="line"><span class="bullet">                    	1.</span> 请求参数不会在地址栏中显示，会封装在请求体中(HTTP协议后讲解)</span><br><span class="line"><span class="bullet">                    	2.</span> 请求参数的大小没有限制</span><br><span class="line"><span class="bullet">                    	3.</span> 较为安全</span><br><span class="line"> 你</span><br><span class="line"><span class="bullet">        *</span> 表单项中的数据要想被提交，必须指定其name属性</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 表单项标签：</span><br><span class="line"><span class="bullet">	*</span> input：可以通过type属性值，改变元素展示的样式</span><br><span class="line"><span class="bullet">		*</span> type属性：</span><br><span class="line"><span class="bullet">			*</span> text：文本输入框，默认值</span><br><span class="line"><span class="bullet">				*</span> placeholder：指定输入框的提示信息，当输入框的内容发生变化，会自动清楚提示信息</span><br><span class="line"><span class="bullet">			*</span> password：密码输入框</span><br><span class="line"><span class="bullet">			*</span> radio：单选框</span><br><span class="line"><span class="bullet">				*</span> 注意：in</span><br><span class="line"><span class="bullet">					1.</span> 要想让多个单选框实现单选的效果，则多个单选框的name属性值必须一样</span><br><span class="line"><span class="bullet">					2.</span> 一般会给每一个单选框提供value属性，指定其被选中后提交的值</span><br><span class="line"><span class="bullet">					3.</span> checked属性，可以指定默认值，默认被选中</span><br><span class="line"><span class="bullet">			*</span> checkbox：复选框</span><br><span class="line"><span class="bullet">				*</span> 注意：</span><br><span class="line"><span class="bullet">					1.</span> 一般会给每一个单选框提供value属性，指定其被选中后提交的值</span><br><span class="line"><span class="bullet">					2.</span> checked属性，可以指定默认值，默认被选中</span><br><span class="line"><span class="bullet">			*</span> file：文件选择框</span><br><span class="line"><span class="bullet">			*</span> hidden：隐藏域，用于提交一些信息</span><br><span class="line"><span class="bullet">			*</span> color:取色器</span><br><span class="line"><span class="bullet">			*</span> data:年月日</span><br><span class="line"><span class="bullet">			*</span> datatime-local: 年月日 时分 </span><br><span class="line"><span class="bullet">            *</span> email:定义用于 e-mail 地址的字段。 请在电子邮件地址中包括“@”。 </span><br><span class="line"><span class="bullet">			*</span> 按钮：</span><br><span class="line"><span class="bullet">				*</span> submit： 提交按钮，用于提交表单</span><br><span class="line"><span class="bullet">				*</span> button：普通按钮</span><br><span class="line"><span class="bullet">				*</span> image：图片提交按钮</span><br><span class="line"><span class="bullet">				*</span> numbear:年龄</span><br><span class="line"><span class="bullet">		*</span> label：指定输入项的文字描述信息</span><br><span class="line"><span class="bullet">			*</span> 注意</span><br><span class="line"><span class="bullet">				*</span> label的for属性一般会和input的id属性值对应。如果对应了，则点击label区域，会让input输入框获取焦点  </span><br><span class="line"><span class="bullet">	*</span> select：下拉列表</span><br><span class="line"><span class="bullet">		*</span> 子元素option，指定列表项</span><br><span class="line"><span class="code">		 </span></span><br><span class="line"><span class="code">	* textarea：文本域</span></span><br><span class="line"><span class="code">		* cols：指定列数</span></span><br><span class="line"><span class="code">		* rows：指定行数</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure></div>

<h1 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h1><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念：Cascading Style Sheets 层叠样式表 </span><br><span class="line"><span class="bullet">	*</span> 层叠：多个样式可以作用在同一个html的元素上，同时生效</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 好处：</span><br><span class="line"><span class="bullet">	1.</span> 功能强大</span><br><span class="line"><span class="bullet">	2.</span> 将内容展示和样式控制分类</span><br><span class="line"><span class="bullet">		*</span> 降低耦合度，解耦</span><br><span class="line"><span class="bullet">		*</span> 让分工合作更容易</span><br><span class="line"><span class="bullet">		*</span> 提高开发效率</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> CSS的使用：CSS和HTML结合方式</span><br><span class="line"><span class="bullet">	1.</span> 内联样式</span><br><span class="line"><span class="bullet">		*</span> 在标签内使用style属性指定css代码</span><br><span class="line"><span class="bullet">		*</span> 如	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="bullet">	2.</span> 内部样式</span><br><span class="line"><span class="bullet">		*</span> 在head标签内部定义style标签，style的标签内容就是css代码</span><br><span class="line"><span class="bullet">		*</span> 如	</span><br><span class="line"><span class="code">		&lt;head&gt;</span></span><br><span class="line"><span class="code">			&lt;style&gt;</span></span><br><span class="line"><span class="code">				div&#123;</span></span><br><span class="line"><span class="code">					color:blue;</span></span><br><span class="line"><span class="code">				&#125; </span></span><br><span class="line"><span class="code">			&lt;/style&gt;</span></span><br><span class="line"><span class="code">		&lt;/head&gt;</span></span><br><span class="line"><span class="code">		&lt;body&gt;</span></span><br><span class="line"><span class="code">			&lt;div&gt;</span></span><br><span class="line"><span class="code">			你好</span></span><br><span class="line"><span class="code">			&lt;/div&gt;</span></span><br><span class="line"><span class="code">        &lt;/body&gt;</span></span><br><span class="line"><span class="code">	3. 外部样式</span></span><br><span class="line"><span class="code">		1. 定义css资源文件</span></span><br><span class="line"><span class="code">		2. 在head标签内定义link标签，引入外部资源文件</span></span><br><span class="line"><span class="code">		&lt;head&gt;</span></span><br><span class="line"><span class="code">			&lt;style&gt;</span></span><br><span class="line"><span class="code">			&lt;link rel=&quot;stylesheet&quot; href=&quot;css/a.css&quot;&gt; </span></span><br><span class="line"><span class="code">			&lt;/style&gt;</span></span><br><span class="line"><span class="code">		&lt;/head&gt;</span></span><br><span class="line"><span class="code">		&lt;body&gt;</span></span><br><span class="line"><span class="code">			&lt;div&gt;</span></span><br><span class="line"><span class="code">			你好</span></span><br><span class="line"><span class="code">			&lt;/div&gt;</span></span><br><span class="line"><span class="code">        &lt;/body&gt;		</span></span><br><span class="line"><span class="code">	* 注意：</span></span><br><span class="line"><span class="code">		* 1、2、3种方式，作用范围越来越大</span></span><br><span class="line"><span class="code">		* 1方式不常用，后期常用2、3</span></span><br><span class="line"><span class="code">		* 第3种格式可以写为：</span></span><br><span class="line"><span class="code">			&lt;style&gt;</span></span><br><span class="line"><span class="code">				@import &quot;css/a.css&quot;;</span></span><br><span class="line"><span class="code">			&lt;/style&gt;</span></span><br><span class="line"><span class="code">			</span></span><br><span class="line"><span class="code">4. css语法：</span></span><br><span class="line"><span class="code">	* 格式：</span></span><br><span class="line"><span class="code">		选择器 &#123;</span></span><br><span class="line"><span class="code">			属性名1:属性值1;</span></span><br><span class="line"><span class="code">			属性名2:属性值2;</span></span><br><span class="line"><span class="code">			...</span></span><br><span class="line"><span class="code">		&#125;</span></span><br><span class="line"><span class="code">	* 选择器：筛选具有相似特征的元素</span></span><br><span class="line"><span class="code">	* 注意：</span></span><br><span class="line"><span class="code">		* 每一对属性需要用分号隔开，最后一对属性可以不加</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">5.</span> 选择器：</span><br><span class="line"><span class="bullet">	*</span> 分类：</span><br><span class="line"><span class="bullet">		1.</span> 基础选择器</span><br><span class="line"><span class="bullet">			1.</span> id选择器：选择具体的id属性值的元素，建议在一个html界面中id值<span class="strong">**唯一**</span></span><br><span class="line"><span class="bullet">				*</span> 语法：#id属性值&#123;&#125;</span><br><span class="line"><span class="bullet">			2.</span> 元素选择器：选择具有相同标签的元素</span><br><span class="line"><span class="bullet">				*</span> 语法：标签名称&#123;&#125; </span><br><span class="line"><span class="bullet">				*</span> 注意：id选择器优先级高于元素选择器</span><br><span class="line"><span class="bullet">			3.</span> 类选择器：选择具有相同的class属性的元素</span><br><span class="line"><span class="bullet">				*</span> 语法：.class属性值&#123;&#125;</span><br><span class="line"><span class="bullet">				*</span> 注意：类选择器优先级高于元素选择器</span><br><span class="line"><span class="code">				id&gt;类&gt;元素</span></span><br><span class="line"><span class="code">		2. 扩展选择器：</span></span><br><span class="line"><span class="code">			1. 选择所有元素</span></span><br><span class="line"><span class="code">				* 语法： * &#123;&#125;</span></span><br><span class="line"><span class="code">			2. 并集选择器</span></span><br><span class="line"><span class="code">				* 语法：选择器1,选择器2 &#123;&#125;</span></span><br><span class="line"><span class="code">			3. 子选择器：筛选选择器1元素下的选择器2</span></span><br><span class="line"><span class="code">				* 语法：选择器1 选择器2 &#123;&#125;</span></span><br><span class="line"><span class="code">			4. 父选择器：筛选选择器2父元素选择器1</span></span><br><span class="line"><span class="code">				* 语法：选择器1 &gt; 选择器2 &#123;&#125;</span></span><br><span class="line"><span class="code">			5. 属性选择器：选择元素名称，属性名=属性值的元素</span></span><br><span class="line"><span class="code">				* 语法：元素名称[属性名=&quot;属性值&quot;] &#123;&#125; </span></span><br><span class="line"><span class="code">				一般用来选择input类型的  </span></span><br><span class="line"><span class="code">			6. 伪类选择器：选择一些元素具有的状态</span></span><br><span class="line"><span class="code">				* 语法：元素:状态 &#123;&#125;</span></span><br><span class="line"><span class="code">				* 如：&lt;a&gt;</span></span><br><span class="line"><span class="code">					* 状态：</span></span><br><span class="line"><span class="code">						* link：初始化的状态</span></span><br><span class="line"><span class="code">						* visited：被访问过的状态</span></span><br><span class="line"><span class="code">						* active：正在访问状态</span></span><br><span class="line"><span class="code">						* hover：鼠标悬浮状态</span></span><br><span class="line"><span class="code">						</span></span><br><span class="line"><span class="code">			</span></span><br><span class="line"><span class="code">6. 属性</span></span><br><span class="line"><span class="code">	1. 字体、文本</span></span><br><span class="line"><span class="code">		* font-size：字体大  小</span></span><br><span class="line"><span class="code">		* color：文本颜色</span></span><br><span class="line"><span class="code">		* text-alion：对齐方式</span></span><br><span class="line"><span class="code">		* line-height：行高</span></span><br><span class="line"><span class="code">	2. 背景</span></span><br><span class="line"><span class="code">		* background：复合属性</span></span><br><span class="line"><span class="code">	3. 边框</span></span><br><span class="line"><span class="code">		* border：设置边框，复合属性</span></span><br><span class="line"><span class="code">	4. 尺寸</span></span><br><span class="line"><span class="code">		* width：宽度</span></span><br><span class="line"><span class="code">		* height：高度</span></span><br><span class="line"><span class="code">	5. 盒子模型：控制布局,相对概念</span></span><br><span class="line"><span class="code">		* margin：外边距</span></span><br><span class="line"><span class="code">		* padding：内边距 </span></span><br><span class="line"><span class="code">			* 默认情况下内边距会影响整个盒子的大小</span></span><br><span class="line"><span class="code">			* box-sizing: border-box; 设置盒子的属性，让width和height就是最终盒子的大小</span></span><br><span class="line"><span class="code">		* float：浮动</span></span><br><span class="line"><span class="code">			* left</span></span><br><span class="line"><span class="code">			* right</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/HTML&&CSS/image-20230727002143386.png"
                      alt="image-20230727002143386"
                ></p>
<h1 id="JavaScript部分"><a href="#JavaScript部分" class="headerlink" title="JavaScript部分"></a>JavaScript部分</h1><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 概念：一门客户端脚本语言</span><br><span class="line"><span class="bullet">	*</span> 运行在客户端浏览器中。每一个浏览器都有JavaScript的解析引擎</span><br><span class="line"><span class="bullet">	*</span> 脚本语言：不需要编译，直接就可以被浏览器解析执行了</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 功能：</span><br><span class="line"><span class="bullet">	*</span> 可以来增强用户和HTML页面的交互过程，可以来控制HTML元素，让页面有一些动态的效果，增强用户的体验。</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> JavaScript发展史：</span><br><span class="line"><span class="bullet">	1.</span> 1992年，Nombase公司，开发出第一门客户端脚本语言，专门用于表单的校验。命名为：C--，后来更名为：ScriptEase</span><br><span class="line"><span class="bullet">	2.</span> 1995年，Netscape(网景)公司，开发了一门客户端脚本语言：LiveScript。请来SUN公司的专家，修改LiveScript，命名为JavaScript</span><br><span class="line"><span class="bullet">	3.</span> 1996年，微软抄袭JavaScript开发出JScript语言</span><br><span class="line"><span class="bullet">	4.</span> 1997年，ECMA(欧洲计算机制造商协会)，ECMAScript，就是所有客户端脚本语言的标准。</span><br><span class="line"></span><br><span class="line"><span class="bullet">	*</span> JavaScript = ECMAScript + JavaScript自己特有的东西(BOM + DOM)</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> ECMAScript：客户端脚本语言的标准</span><br><span class="line"><span class="bullet">	1.</span> 基本语法：</span><br><span class="line"><span class="bullet">		1.</span> 与HTML结合方式</span><br><span class="line"><span class="bullet">			1.</span> 内部JS：</span><br><span class="line"><span class="bullet">				*</span> 定义&lt; script&gt;，标签体内容就是js代码</span><br><span class="line"><span class="code">				&lt;script&gt;</span></span><br><span class="line"><span class="code">				var a = 1;</span></span><br><span class="line"><span class="code">				alert(a);</span></span><br><span class="line"><span class="code">				&lt;/script&gt;</span></span><br><span class="line"><span class="code">				document.write(a) //可以直接输出在页面上</span></span><br><span class="line"><span class="code">			2. 外部JS：</span></span><br><span class="line"><span class="code">				* 定义&lt; script&gt;，通过src属性引入外部的js文件吧</span></span><br><span class="line"><span class="code">			* 注意：</span></span><br><span class="line"><span class="code">				1. &lt; script&gt;可以定义在html页面的任何地方，但是定义的位置会影响执行的顺序。</span></span><br><span class="line"><span class="code">				2. &lt; script&gt;可以定义多个。</span></span><br><span class="line"><span class="code">		2. 注释</span></span><br><span class="line"><span class="code">			1. 单行注释：// 注释内容  </span></span><br><span class="line"><span class="code">			2. 多行注释：/* 注释内容 */</span></span><br><span class="line"><span class="code">		3. 数据类型：</span></span><br><span class="line"><span class="code">			1. 原始数据类型(基本数据类型)：</span></span><br><span class="line"><span class="code">				1. number：数字。 整数/小数/NaN(not a number ( 一个不是数字的数字类型)</span></span><br><span class="line"><span class="code">				2. string：字符串。 字符串 &#x27;abc&#x27; &quot;a&quot;</span></span><br><span class="line"><span class="code">				3. boolean：true和false</span></span><br><span class="line"><span class="code">				4. null：一个对象为空的占位符</span></span><br><span class="line"><span class="code">				5. undefined：未定义。如果一个变量没有给初始化值，则会被默认为undefined</span></span><br><span class="line"><span class="code">			2. 引用数据类型：对象</span></span><br><span class="line"><span class="code">		4. 变量</span></span><br><span class="line"><span class="code">			* 变量：一小块存储数据的内存空间</span></span><br><span class="line"><span class="code">			* Java语言是强类型语言，而JavaScript是弱类型语言</span></span><br><span class="line"><span class="code">				* 强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据。</span></span><br><span class="line"><span class="code">				* 弱类型：在开辟变量存储空间时，不定义空间将来存储的数据的数据类型。可以存储任意类型的数据。</span></span><br><span class="line"><span class="code">			* 语法：</span></span><br><span class="line"><span class="code">				* var 变量名 = 初始化值;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">			*</span> typeof运算符：获取变量的类型</span><br><span class="line"><span class="bullet">				*</span> 注：null运算符后得到的时object,被认为占位符</span><br><span class="line"><span class="bullet">		5.</span> 运算符</span><br><span class="line"><span class="bullet">			1.</span> 一元运算符：只有一个运算数的运算符</span><br><span class="line"><span class="code">				++ -- </span></span><br><span class="line"><span class="code">				+(正号) -(负号 )</span></span><br><span class="line"><span class="code">				* 注意</span></span><br><span class="line"><span class="code">				在JS中，如果运算数不是运算符所要求的类型，那么js引警会自动的将运算数进行类型转换</span></span><br><span class="line"><span class="code">				# 其他类型转number:#         </span></span><br><span class="line"><span class="code">				1.string转number: 按照字面值转换。如果字面值不是数字，则转为NaN(不是数字的数字)</span></span><br><span class="line"><span class="code">				2. boolean转number: true转为1，false转为0</span></span><br><span class="line"><span class="code">				3.NaN</span></span><br><span class="line"><span class="code">				4.NaN</span></span><br><span class="line"><span class="code">			2. 算数运算符</span></span><br><span class="line"><span class="code">				+ - * / % </span></span><br><span class="line"><span class="code">			3. 赋值运算符</span></span><br><span class="line"><span class="code">				= += -= ...</span></span><br><span class="line"><span class="code">			4. 比较运算符</span></span><br><span class="line"><span class="code">				&gt; &lt; &gt;= &lt;= == ===(全等于)</span></span><br><span class="line"><span class="code">				* 比较方式</span></span><br><span class="line"><span class="code">					1. 类型相同，直接比较</span></span><br><span class="line"><span class="code">						* 字符串，按照字典顺序比较，按位逐一比较，直到得出大小为止。</span></span><br><span class="line"><span class="code">					2. 类型不同，先进行类型转换，再比较</span></span><br><span class="line"><span class="code">						* ===，全等于，在比较前先判断类型，如果类型不一样，则直接返回false</span></span><br><span class="line"><span class="code">			5. 逻辑运算符</span></span><br><span class="line"><span class="code">				&amp;&amp; || !</span></span><br><span class="line"><span class="code">				* 其他类型转boolean</span></span><br><span class="line"><span class="code">					1. number：0或NaN为假，其他为真</span></span><br><span class="line"><span class="code">					2. string：除了空字符串(&quot;&quot;)，其他都是true</span></span><br><span class="line"><span class="code">					3. null&amp;undefined：false</span></span><br><span class="line"><span class="code">					4. 对象：所有对象都为true</span></span><br><span class="line"><span class="code">				* # 可用if(obj)判断#</span></span><br><span class="line"><span class="code">					1. obj为空字符串</span></span><br><span class="line"><span class="code">					2. obj为null或者undefined</span></span><br><span class="line"><span class="code">			6. 三元运算符</span></span><br><span class="line"><span class="code">				? :</span></span><br><span class="line"><span class="code">		6. 流程控制语句：</span></span><br><span class="line"><span class="code">			1. if...else...</span></span><br><span class="line"><span class="code">			2. swtich</span></span><br><span class="line"><span class="code">				* 在java种，switch语句可以接受的数据类型： byte int short char enum(1.5) String(1.7)</span></span><br><span class="line"><span class="code">				* # 在JS种，swtich语句可以接受任意的原始数据类型#</span></span><br><span class="line"><span class="code">			3. while</span></span><br><span class="line"><span class="code">			4. do...while</span></span><br><span class="line"><span class="code">			5. for</span></span><br><span class="line"><span class="code">		7. JS特殊语法：</span></span><br><span class="line"><span class="code">			1. 语句以;结尾，如果一行只有一条语句，则可以省略</span></span><br><span class="line"><span class="code">			2. 变量的定义使用var关键字，也可以不使用</span></span><br><span class="line"><span class="code">				* 用，定义的变量是局部变量</span></span><br><span class="line"><span class="code">				* 不用，定义的变量是全局变量</span></span><br><span class="line"><span class="code">	2. 基本对象：</span></span><br><span class="line"><span class="code">		* Function：函数对象</span></span><br><span class="line"><span class="code">			1. 创建</span></span><br><span class="line"><span class="code">				1. var 方法名 = new Function(形式参数列表, 方法体);</span></span><br><span class="line"><span class="code">				2. function 方法名(形式参数列表) &#123;方法体&#125;</span></span><br><span class="line"><span class="code">				3. var 方法名 = function(形式参数列表) &#123;方法体&#125;</span></span><br><span class="line"><span class="code">			2. 方法</span></span><br><span class="line"><span class="code">			3. 属性</span></span><br><span class="line"><span class="code">				length:代表形参的个数</span></span><br><span class="line"><span class="code">			4. 特点</span></span><br><span class="line"><span class="code">				1. 方法定义是，形参的类型不用写，返回值类型也不写</span></span><br><span class="line"><span class="code">				2. # 方法是一个对象，如果定义名称相同的方法，会覆盖#</span></span><br><span class="line"><span class="code">				3. 在JS中，方法的调用只与方法的名称有关，和参数列表无关</span></span><br><span class="line"><span class="code">				4. 在方法声明中有一个隐藏的内置对象(数组)，arguments，封装所有的实际参数</span></span><br><span class="line"><span class="code">			5. 调用</span></span><br><span class="line"><span class="code">				方法名称(实际参数列表);</span></span><br><span class="line"><span class="code">				</span></span><br><span class="line"><span class="code">		* Array：数组对象</span></span><br><span class="line"><span class="code">			1. 创建：</span></span><br><span class="line"><span class="code">				1. var arr = new Array(元素列表);</span></span><br><span class="line"><span class="code">				2. var arr = new Array(默认长度);//只输入一个数字</span></span><br><span class="line"><span class="code">				3. var arr = [元素列表];</span></span><br><span class="line"><span class="code">			2. 方法</span></span><br><span class="line"><span class="code">				join(参数)：将数组中的元素按照指定的分隔符拼接为字符串</span></span><br><span class="line"><span class="code">				push(参数)：往数组最后添加一个元素</span></span><br><span class="line"><span class="code">			3. 属性</span></span><br><span class="line"><span class="code">				length：数组长度</span></span><br><span class="line"><span class="code">			4. 特点</span></span><br><span class="line"><span class="code">				1. JS中，数组元素的类型可变的。</span></span><br><span class="line"><span class="code">				2. JS中，数组的长度是可变的。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">		*</span> Boolean</span><br><span class="line"><span class="bullet">		*</span> Date：日期对象</span><br><span class="line"><span class="bullet">			1.</span> 创建</span><br><span class="line"><span class="code">				var date  = new Date();</span></span><br><span class="line"><span class="code">			2. 方法</span></span><br><span class="line"><span class="code">				toLocaleString()：返回当前Date对象对应的实际本地字符串格式,返回本地时间，与当前操作系统相符 </span></span><br><span class="line"><span class="code">				getTime():获取毫秒值，返回当前日期对象描述的时间和1970年1月1日零点的毫秒值差</span></span><br><span class="line"><span class="code">				//一般作为时间戳</span></span><br><span class="line"><span class="code">		* Math：数学对象</span></span><br><span class="line"><span class="code">			1. 创建：</span></span><br><span class="line"><span class="code">				* 特点：Math对象不用创建直接使用。	Math.方法名();</span></span><br><span class="line"><span class="code">			2. 方法：</span></span><br><span class="line"><span class="code">				random()：返回0~1之间的随机数。包含0不包含1 --&gt;伪随机数</span></span><br><span class="line"><span class="code">				cell(x)：向上取整</span></span><br><span class="line"><span class="code">				floor(x)：向下取整</span></span><br><span class="line"><span class="code">				round(x)：四舍五入</span></span><br><span class="line"><span class="code">			3. 属性</span></span><br><span class="line"><span class="code">				PI 圆周率</span></span><br><span class="line"><span class="code">		* NUmber</span></span><br><span class="line"><span class="code">		* String</span></span><br><span class="line"><span class="code">		</span></span><br></pre></td></tr></table></figure></div>

<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> RegExp：正则表达式对象</span><br><span class="line"><span class="bullet">		  1.</span> 正则表达式：定义字符串的组成规则。</span><br><span class="line"><span class="bullet">				1.</span> 单个字符:[]</span><br><span class="line"><span class="code">					如：[a] [ab](a或者b) [a- zA-Z0-9 _ ]</span></span><br><span class="line"><span class="code">					* 特殊符合代表特殊含义的单个字符*</span></span><br><span class="line"><span class="code">						\d:单个数字字符[0-9]</span></span><br><span class="line"><span class="code">						\w:单个单词字符[a-zA-Z0-9_]  </span></span><br><span class="line"><span class="code">				2. 量词符号：</span></span><br><span class="line"><span class="code">					?:表示出现0次或1次</span></span><br><span class="line"><span class="code">					*:表示出现0次或多次</span></span><br><span class="line"><span class="code">					+:出现一次或多次</span></span><br><span class="line"><span class="code">					&#123;m,n&#125;:表示数量 m&lt;=数量&lt;=n</span></span><br><span class="line"><span class="code">						* m如果缺少或省略：&#123;,n&#125;:最多n次</span></span><br><span class="line"><span class="code">						* n如果缺少或省略：&#123;m,&#125;:最少m次</span></span><br><span class="line"><span class="code">				3. 开始结束符号</span></span><br><span class="line"><span class="code">					* ^：开始</span></span><br><span class="line"><span class="code">					* $：结束</span></span><br><span class="line"><span class="code">			2. 正则对象：</span></span><br><span class="line"><span class="code">				1. 创建：</span></span><br><span class="line"><span class="code">					1. var reg = new RegExp(&quot;正则表达式&quot;); 注意反斜线的转义\\</span></span><br><span class="line"><span class="code">					2. var reg = /正则表达式/;</span></span><br><span class="line"><span class="code">				2. 方法</span></span><br><span class="line"><span class="code">					1. test(参数)：验证指定的字符串是否符合正则表达式</span></span><br><span class="line"><span class="code">		* Global</span></span><br><span class="line"><span class="code">			1. 特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。	方法名();</span></span><br><span class="line"><span class="code">			2. 方法：  </span></span><br><span class="line"><span class="code">				encodeURI():url编码</span></span><br><span class="line"><span class="code">				decodeURI():url解码</span></span><br><span class="line"><span class="code">				</span></span><br><span class="line"><span class="code">				encodeURIComponent():url编码，编码的字符更多</span></span><br><span class="line"><span class="code">				decodeURIComponent():url解码</span></span><br><span class="line"><span class="code">				</span></span><br><span class="line"><span class="code">				parseInt():将字符串转为数字</span></span><br><span class="line"><span class="code">					* 逐一判断每一个字符是否是数字，直到不是数字为止，将前面数字的部分转为number</span></span><br><span class="line"><span class="code">					* 没有数字转 为NaN</span></span><br><span class="line"><span class="code">				isNaN():判断一个值是否为NaN</span></span><br><span class="line"><span class="code">					* 参与的==比较都为false 包括其自身参与的比较</span></span><br><span class="line"><span class="code">				eval():将JS字符串转换为脚本运行</span></span><br><span class="line"><span class="code">			3. URL编码</span></span><br><span class="line"><span class="code">				* GBK编码：一个汉字两个字节</span></span><br><span class="line"><span class="code">				* UTF-8编码：一个汉字三个字节</span></span><br></pre></td></tr></table></figure></div>

<h2 id="DOM演示"><a href="#DOM演示" class="headerlink" title="DOM演示"></a>DOM演示</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 功能：控制HTML文档的内容</span><br><span class="line"><span class="bullet">*</span> 代码：获取页面标签(元素)对象	Element</span><br><span class="line"><span class="bullet">	*</span> document.getElementById(&quot;id值&quot;);	通过元素id获取元素对象</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 操作Element对象：</span><br><span class="line"><span class="bullet">	1.</span> 修改属性值：</span><br><span class="line"><span class="bullet">		1.</span> 明确获取的对象是哪一个</span><br><span class="line"><span class="bullet">		2.</span> 查看API文档，找其中有哪些属性可以设置</span><br><span class="line"><span class="bullet">	2.</span> 修改标签体内容：</span><br><span class="line"><span class="bullet">		*</span> 属性：innerHTML b  </span><br></pre></td></tr></table></figure></div>

<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 功能：某些组件被执行了某些操作后，触发某些代码的执行。</span><br><span class="line"><span class="bullet">*</span> 如何绑定事件</span><br><span class="line"><span class="bullet">	1.</span> 直接在HTML标签上，指定事件的属性，属性值就是JS代码</span><br><span class="line"><span class="bullet">		1.</span> 事件：onclick---  单击事件</span><br><span class="line"></span><br><span class="line"><span class="bullet">	2.</span> 通过JS获取元素对象，指定事件属性，设置一个函数</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/HTML&&CSS/image-20230728114657511.png"
                      alt="image-20230728114657511"
                ></p>
<h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念：Browser Object Model 浏览器对象模型</span><br><span class="line"><span class="bullet">	*</span> 将浏览器的各个部分封装成对象。</span><br><span class="line"><span class="bullet">2.</span> 组成</span><br><span class="line"><span class="bullet">	*</span> Window：窗口对象</span><br><span class="line"><span class="bullet">	*</span> Navigator：浏览器对象</span><br><span class="line"><span class="bullet">	*</span> Screen：显示器屏幕对象</span><br><span class="line"><span class="bullet">	*</span> History：历史记录对象</span><br><span class="line"><span class="bullet">	*</span> Location：地址栏对象</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> Window：窗口对象</span><br><span class="line"><span class="bullet">	1.</span> 创建</span><br><span class="line"><span class="bullet">	2.</span> 方法</span><br><span class="line"><span class="bullet">		1.</span> 与弹出框有关的方法</span><br><span class="line"><span class="code">			alert()	弹出警告框</span></span><br><span class="line"><span class="code">			confirm()	弹出对话框(确认或者取消)</span></span><br><span class="line"><span class="code">				* 如果点击确定 返回true</span></span><br><span class="line"><span class="code">				* 点击取消 返回false</span></span><br><span class="line"><span class="code">			prompt()	弹出可输入的对话框</span></span><br><span class="line"><span class="code">				* 返回值，获取用画输入的内容</span></span><br><span class="line"><span class="code">		2. 与打开关闭有关的方法</span></span><br><span class="line"><span class="code">			close() 关闭浏览器窗口</span></span><br><span class="line"><span class="code">				* 谁调用关谁</span></span><br><span class="line"><span class="code">			open() 打开一个浏览器窗口</span></span><br><span class="line"><span class="code">				* 返回新的Window对象</span></span><br><span class="line"><span class="code">                &lt;body&gt;</span></span><br><span class="line"><span class="code">                &lt;input id=&quot;open1&quot; type=&quot;button&quot; value=&quot;打开新窗口&quot;&gt;</span></span><br><span class="line"><span class="code">                &lt;input id=&quot;close1&quot; type=&quot;button&quot; value=&quot;关闭新窗口&quot;&gt;</span></span><br><span class="line"><span class="code">                &lt;script&gt;</span></span><br><span class="line"><span class="code">                    var lihuibear;</span></span><br><span class="line"><span class="code">                    var open1 = document.getElementById(&quot;open1&quot;);</span></span><br><span class="line"><span class="code">                    open1.onclick = function () &#123;</span></span><br><span class="line"><span class="code">                        lihuibear = open(&quot;http://myblog.lihuibear.asia&quot;);</span></span><br><span class="line"><span class="code">                    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">                    var close = document.getElementById(&quot;close1&quot;);</span></span><br><span class="line"><span class="code">                    close.onclick = function () &#123;</span></span><br><span class="line"><span class="code">                        lihuibear.close();</span></span><br><span class="line"><span class="code">                    &#125;</span></span><br><span class="line"><span class="code">                &lt;/script&gt;</span></span><br><span class="line"><span class="code">                &lt;/body&gt;	</span></span><br><span class="line"><span class="code">				</span></span><br><span class="line"><span class="code">		3. 与定时器有关的方法</span></span><br><span class="line"><span class="code">			setTimeout()	在指定的毫秒数后调用函数或计算表达式。</span></span><br><span class="line"><span class="code">				* 参数：</span></span><br><span class="line"><span class="code">					1. js代码或者方法对象</span></span><br><span class="line"><span class="code">					2. 毫秒值</span></span><br><span class="line"><span class="code">				* 返回值：唯一标识，用于取消定时器</span></span><br><span class="line"><span class="code">			clearTimeout()	取消由setTimeout()方法设置的timeout。</span></span><br><span class="line"><span class="code">			</span></span><br><span class="line"><span class="code">			setInterval()	按照指定的周期（以毫秒计）来调用函数或计算表达式。</span></span><br><span class="line"><span class="code">			clearInterval()	取消由setInterval()设置的timeout。</span></span><br><span class="line"><span class="code">	3. 属性</span></span><br><span class="line"><span class="code">		1. 获取其他BOM对象</span></span><br><span class="line"><span class="code">			history</span></span><br><span class="line"><span class="code">			location</span></span><br><span class="line"><span class="code">			Navigator</span></span><br><span class="line"><span class="code">			Screen</span></span><br><span class="line"><span class="code">		2. 获取DOM对象</span></span><br><span class="line"><span class="code">			document</span></span><br><span class="line"><span class="code">	4. 特点</span></span><br><span class="line"><span class="code">		* Window对象不需要创建可以直接使用 window来使用 window.方法名();</span></span><br><span class="line"><span class="code">		* window引用可以省略。	方法名();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4.</span> Location：地址栏对象</span><br><span class="line"><span class="bullet">	1.</span> 创建(获取)：</span><br><span class="line"><span class="bullet">		1.</span> window.location</span><br><span class="line"><span class="bullet">		2.</span> location</span><br><span class="line"><span class="bullet">	2.</span> 方法</span><br><span class="line"><span class="bullet">		*</span> reload() 重新加载当前文档 刷新</span><br><span class="line"><span class="bullet">	3.</span> 属性</span><br><span class="line"><span class="bullet">		*</span> href 设置或返回完整的URL</span><br><span class="line"><span class="code">         &lt;head&gt;</span></span><br><span class="line"><span class="code">            &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="code">            &lt;title&gt;自动跳转&lt;/title&gt;</span></span><br><span class="line"><span class="code">            &lt;style&gt;</span></span><br><span class="line"><span class="code">                p &#123;</span></span><br><span class="line"><span class="code">                    text-align: center;</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">                span &#123;</span></span><br><span class="line"><span class="code">                    color: red;</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            &lt;/style&gt;</span></span><br><span class="line"><span class="code">        &lt;/head&gt;</span></span><br><span class="line"><span class="code">        &lt;body&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;p&gt;&lt;span id=&quot;time&quot;&gt;5&lt;/span&gt;秒后，自动跳转到首页&lt;/p&gt;</span></span><br><span class="line"><span class="code">        &lt;script&gt;</span></span><br><span class="line"><span class="code">            var second = 5;</span></span><br><span class="line"><span class="code">            var time = document.getElementById(&quot;time&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            function showtime() &#123;</span></span><br><span class="line"><span class="code">                second--;</span></span><br><span class="line"><span class="code">                if (second &lt;= 0) &#123;</span></span><br><span class="line"><span class="code">                    location.href = &quot;https://www.baidu.com&quot;</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code">                time.innerHTML = second + &quot;&quot;;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            setInterval(showtime, 1000);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;/script&gt;</span></span><br><span class="line"><span class="code">        &lt;/body&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">5.</span> History：历史记录对象</span><br><span class="line"><span class="bullet">	1.</span> 创建(获取):</span><br><span class="line"><span class="bullet">		1.</span> window.history</span><br><span class="line"><span class="bullet">		2.</span> history</span><br><span class="line"></span><br><span class="line"><span class="bullet">	2.</span> 方法：</span><br><span class="line"><span class="bullet">		*</span> back()	加载history列表中的前一个 URL。</span><br><span class="line"><span class="bullet">		*</span> forward()	加载history列表中的下一个 URL。</span><br><span class="line"><span class="bullet">		*</span> go(参数)	加载history列表中的某个具体页面。</span><br><span class="line"><span class="bullet">			*</span> 参数</span><br><span class="line"><span class="bullet">				*</span> 正数：前进几个历史记录</span><br><span class="line"><span class="bullet">				*</span> 负数：后退几个历史记录</span><br><span class="line"></span><br><span class="line"><span class="bullet">	3.</span> 属性</span><br><span class="line"><span class="bullet">		*</span> length	返回浏览器历史列表中的 URL 数量。</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/HTML&&CSS/image-20230728221840214.png"
                      alt="image-20230728221840214"
                ></p>
<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 概念：Document Object Model 文档对象模型</span><br><span class="line"><span class="bullet">	*</span> 将标记语言文档的各个部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作</span><br><span class="line"><span class="bullet">*</span> W3C DOM 标准被分为3个不同的部分：</span><br><span class="line"><span class="bullet">	*</span> # 核心DOM - 针对任何结构化文档的标准模型</span><br><span class="line"><span class="bullet">		*</span> Document：文档对象</span><br><span class="line"><span class="bullet">		*</span> Element：元素对象</span><br><span class="line"><span class="bullet">		*</span> Attribute：属性对象</span><br><span class="line"><span class="bullet">		*</span> Text：文本对象</span><br><span class="line"><span class="bullet">		*</span> Comment：注释对象</span><br><span class="line"><span class="bullet">		*</span> Node：节点对象，其他5个的父对象</span><br><span class="line"><span class="bullet">	*</span> # XML DOM - 针对XML文档的标准模型</span><br><span class="line"><span class="bullet">	*</span> # HTML DOM - 针对HTML文档的标准模型 </span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 核心DOM模型：</span><br><span class="line"><span class="bullet">	*</span> Document：文档对象</span><br><span class="line"><span class="bullet">		1.</span> 创建(获取)，在html dom模型中可以使用window对象来获取</span><br><span class="line"><span class="bullet">			1.</span> window.document</span><br><span class="line"><span class="bullet">			2.</span> document</span><br><span class="line"><span class="bullet">		2.</span> 方法</span><br><span class="line"><span class="bullet">			1.</span> 获取Element对象：</span><br><span class="line"><span class="bullet">				1.</span> getElementById()：根据id属性值获取元素对象，id属性值一般唯一</span><br><span class="line"><span class="bullet">				2.</span> getElementByTagName()：根据元素名称获取元素对象们，返回值是一个数组</span><br><span class="line"><span class="bullet">				3.</span> getElementByClassName()：根据Class属性值获取元素对象们，返回值是一个数组</span><br><span class="line"><span class="bullet">				4.</span> getElementByName()：根据name属性值获取元素对象们，返回值是一个数组</span><br><span class="line"><span class="bullet">			2.</span> 创建其他DOM对象</span><br><span class="line"><span class="code">				createAttribute(name)</span></span><br><span class="line"><span class="code">				createComment()</span></span><br><span class="line"><span class="code">				createElement()</span></span><br><span class="line"><span class="code">				createTextNode()</span></span><br><span class="line"><span class="code">	* Element：元素对象</span></span><br><span class="line"><span class="code">		1. 创建(获取)，通过document来获取和创建</span></span><br><span class="line"><span class="code">		2. 方法：</span></span><br><span class="line"><span class="code">			1. removeAttribute()：删除属性</span></span><br><span class="line"><span class="code">			2. setAttribute()：设置属性</span></span><br><span class="line"><span class="code">	* Node：节点对象，其他5个的父对象</span></span><br><span class="line"><span class="code">		* 特点：所有dom对象都可以被认为是一个节点</span></span><br><span class="line"><span class="code">		* 方法：</span></span><br><span class="line"><span class="code">			* CRUD dom树</span></span><br><span class="line"><span class="code">				* appendChild()：向节点的子节点列表的结尾添加新的子节点。</span></span><br><span class="line"><span class="code">				* removeChild()：删除（并返回）当前节点的指定子节点。</span></span><br><span class="line"><span class="code">				* replaceChild()：用新节点替换一个子节点。</span></span><br><span class="line"><span class="code">		* 属性</span></span><br><span class="line"><span class="code">			* parentNode：返回节点的父节点。</span></span><br><span class="line"><span class="code">			</span></span><br><span class="line"><span class="code">* HTML DOM</span></span><br><span class="line"><span class="code">	1. 标签体的设置和获取：innerHTML</span></span><br><span class="line"><span class="code">	2. 使用html元素对象和属性</span></span><br><span class="line"><span class="code">	3. 控制样式</span></span><br><span class="line"><span class="code">		1. 使用元素的style属性来设置 </span></span><br><span class="line"><span class="code">			如： div.style.fontSize = &quot;20px&quot;;</span></span><br><span class="line"><span class="code">		2. 提前定义好类选择器的样式，通过元素的className属性来设置其class属性值</span></span><br><span class="line"><span class="code">			 div2.className = &quot;d1&quot;;</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure></div>

<h3 id="小例1"><a href="#小例1" class="headerlink" title="小例1"></a>小例1</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;dom_node_remove&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        div &#123;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">        &#125;</span><br><span class="line">        #div1 &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">        #div2 &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">        #div3 &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;div2&quot;&gt;</span><br><span class="line">        我是子节点1</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    我是主干</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!--超链接解决可以被点击，执行功能1，但是不执行功能2 不重新到该页面方法--&gt;</span><br><span class="line">&lt;!--javascrip:void(0)--&gt;</span><br><span class="line">&lt;!--&lt;a href=&quot;javascrip:void(0)&quot; id=&quot;del1&quot;&gt;删除子节点&lt;/a&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;删除子节点&quot; id=&quot;del1&quot;&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;添加子节点&quot; id=&quot;add1&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var element1 = document.getElementById(&quot;del1&quot;);</span><br><span class="line">    element1.onclick = function () &#123;</span><br><span class="line">        var div11 = document.getElementById(&quot;div1&quot;);</span><br><span class="line">        var div22 = document.getElementById(&quot;div2&quot;);</span><br><span class="line">        div11.removeChild(div22);</span><br><span class="line">    &#125;</span><br><span class="line">    var element2 = document.getElementById(&quot;add1&quot;);</span><br><span class="line">    element2.onclick = function () &#123;</span><br><span class="line">        var div11 = document.getElementById(&quot;div1&quot;)</span><br><span class="line">        var div33 = document.createElement(&quot;div&quot;);</span><br><span class="line">        div33.setAttribute(&quot;id&quot;, &quot;div3&quot;);</span><br><span class="line">        div11.appendChild(div33);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/HTML&amp;&amp;CSS&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="小例2：动态学生信息表"><a href="#小例2：动态学生信息表" class="headerlink" title="小例2：动态学生信息表"></a>小例2：动态学生信息表</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>动态学生信息表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入编号&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入性别&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn_add&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学生信息表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>令狐冲<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;delTr(this);&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>爱咋咋<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;delTr(this);&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>傻网页<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;delTr(this);&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*添加*/</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn_add&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> id = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> name = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> gender = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;gender&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> td_id = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text_id = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(id);</span></span><br><span class="line"><span class="language-javascript">        td_id.<span class="title function_">appendChild</span>(text_id);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> td_name = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text_name = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(name);</span></span><br><span class="line"><span class="language-javascript">        td_name.<span class="title function_">appendChild</span>(text_name);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> td_gender = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text_gender = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(gender);</span></span><br><span class="line"><span class="language-javascript">        td_gender.<span class="title function_">appendChild</span>(text_gender);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> td_a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ele_a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        ele_a.<span class="title function_">setAttribute</span>(<span class="string">&quot;href&quot;</span>, <span class="string">&quot;javascript:void(0);&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        ele_a.<span class="title function_">setAttribute</span>(<span class="string">&quot;onclick&quot;</span>, <span class="string">&quot;delTr(this);&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text_a = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;删除&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        ele_a.<span class="title function_">appendChild</span>(text_a);</span></span><br><span class="line"><span class="language-javascript">        td_a.<span class="title function_">appendChild</span>(ele_a);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> tr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;tr&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        tr.<span class="title function_">appendChild</span>(td_id);</span></span><br><span class="line"><span class="language-javascript">        tr.<span class="title function_">appendChild</span>(td_name);</span></span><br><span class="line"><span class="language-javascript">        tr.<span class="title function_">appendChild</span>(td_gender);</span></span><br><span class="line"><span class="language-javascript">        tr.<span class="title function_">appendChild</span>(td_a);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> table = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;table&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        table.<span class="title function_">appendChild</span>(tr);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*删除*/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">delTr</span>(<span class="params">obj</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> table = obj.<span class="property">parentNode</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> tr = obj.<span class="property">parentNode</span>.<span class="property">parentNode</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        table.<span class="title function_">removeChild</span>(tr);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;/HTML&amp;&amp;CSS&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="小例3-动态表格优化-innerHTML"><a href="#小例3-动态表格优化-innerHTML" class="headerlink" title="小例3:动态表格优化(innerHTML)"></a>小例3:动态表格优化(innerHTML)</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>动态表格优化<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入编号&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入性别&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn_add&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学生信息表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn_add&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> id = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> name = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> gender = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;gender&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> table = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;table&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        table.<span class="property">innerHTML</span> += <span class="string">&quot; &lt;tr&gt;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;        &lt;td&gt;&quot;</span> + id + <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;        &lt;td&gt;&quot;</span> + name + <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;        &lt;td&gt;&quot;</span> + gender + <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;        &lt;td&gt;&lt;a href=\&quot;javascript:void(0);\&quot; onclick=\&quot;delTr(this);\&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;    &lt;/tr&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">delTr</span>(<span class="params">obj</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> table = obj.<span class="property">parentNode</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> tr = obj.<span class="property">parentNode</span>.<span class="property">parentNode</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        table.<span class="title function_">removeChild</span>(tr);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;/HTML&amp;&amp;CSS&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 概念:某些组件被执行了某些操作后，触发某些代码的执行。</span><br><span class="line"><span class="bullet">	*</span> 事件: 某些操作。如 : 单击，双击，键盘按下了，鼠标移动了</span><br><span class="line"><span class="bullet">	*</span> 事件源:组件。如 : 按钮 文本输入框...</span><br><span class="line"><span class="bullet">    *</span> 监听器:代码。不</span><br><span class="line"><span class="bullet">    *</span> 注册监听: 将事件，事件源，监听器结合在一起。 当事件源上发生了某个事件，则触发执行某个监听器代码。 </span><br><span class="line"><span class="bullet">*</span> 常见的事件:</span><br><span class="line"><span class="code">	1.点击事件 :</span></span><br><span class="line"><span class="code">		onclick:单击事件</span></span><br><span class="line"><span class="code">		ondblclick:双击事件</span></span><br><span class="line"><span class="code">	2.焦点事件</span></span><br><span class="line"><span class="code">		onblur:失去焦点</span></span><br><span class="line"><span class="code">			* 一般用于表单校验</span></span><br><span class="line"><span class="code">        onfocus:元素获得焦点 </span></span><br><span class="line"><span class="code">    3.加载事件</span></span><br><span class="line"><span class="code">    	onload:一张页面或一幅图像完成加载。</span></span><br><span class="line"><span class="code">    		一般用于&lt;body&gt;</span></span><br><span class="line"><span class="code">			* window.onload  = function()&#123;</span></span><br><span class="line"><span class="code">			</span></span><br><span class="line"><span class="code">			&#125;</span></span><br><span class="line"><span class="code">    4.鼠标事件</span></span><br><span class="line"><span class="code">    	onmousedown 鼠标按钮被按下。</span></span><br><span class="line"><span class="code">			*定义方法时，定义一个形参，接受event对象</span></span><br><span class="line"><span class="code">			*event对象的button属性可以获取鼠标按钮键</span></span><br><span class="line"><span class="code">		onmouseup 	鼠标按键被松开。</span></span><br><span class="line"><span class="code">		onmousemove 鼠标被移动。</span></span><br><span class="line"><span class="code">		onmouseover 鼠标移到某元素之上</span></span><br><span class="line"><span class="code">		onmouseout  鼠标从某元素移开。</span></span><br><span class="line"><span class="code">	5.键盘事件</span></span><br><span class="line"><span class="code">		onkeydown	某个键盘按键被按下  </span></span><br><span class="line"><span class="code">		onkeyup 	某个键盘按键被松开。</span></span><br><span class="line"><span class="code">		onkeypress  某个键盘按键被按下并松开</span></span><br><span class="line"><span class="code">	6.选择改变</span></span><br><span class="line"><span class="code">    	onchange	域的内容被改变</span></span><br><span class="line"><span class="code">    	onselect 	文本被选中</span></span><br><span class="line"><span class="code">    7.表单事件</span></span><br><span class="line"><span class="code">    	onsubmit	确认按钮被点击</span></span><br><span class="line"><span class="code">    		*可以阻止表单的提交</span></span><br><span class="line"><span class="code">    			* onsubmit方法返回false;</span></span><br><span class="line"><span class="code">    			* return checkForm();</span></span><br><span class="line"><span class="code">    	onreset		重置按钮被点击</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/HTML&&CSS/image-20230801221619083.png"
                      alt="绑定鼠标单击事件"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/HTML&&CSS/image-20230801221934130.png"
                      alt="键盘点击使用"
                ></p>
</li>
</ul>
<h1 id="Boostrap"><a href="#Boostrap" class="headerlink" title="Boostrap"></a>Boostrap</h1><ol>
<li><p>概念：一个前端开发的框架。Bootstrap是美国Twitter公司的设计师Mark Otto和Jacob Thornton合作基于HTML、CSS、JavaScript 开发的简洁、直观、强悍的前端开发框架，使得 Web 开发更加快捷。</p>
<ul>
<li>框架：一个半成品软件，开发人员可以在框架基础上，再进行开发，简化编码</li>
<li>好处<ol>
<li>定义了很多css样式和js插件。我们开发人员可以直接使用这些样式和插件得到丰富的页面效果。</li>
<li>响应式布局。<ul>
<li>同一套页面可以兼容不同分辨率的设备。</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><p>快速入门</p>
<ol>
<li>下载Bootstrap</li>
<li>在项目中将这三个文件夹复制</li>
<li>创建html页面，引入必要的资源文件</li>
</ol>
</li>
</ol>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">//基础模板</span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap_基础模板<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;bs/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bs/dist/jquery-3.2.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bs/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;/HTML&amp;&amp;CSS&gt;</span><br></pre></td></tr></table></figure></div>

<h1 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h1><ol>
<li><p>同一套页面可以兼容不同分辨率的设备。</p>
</li>
<li><p>实现：依赖于栅格系统——将一行平均分成12个格子，可以去指定元素占几个格子</p>
</li>
<li><p>步骤：</p>
</li>
</ol>
<ul>
<li>定义容器，相当于之前的table<ul>
<li>容器分类：<ol>
<li>container：两边留白</li>
<li>container-fluid：每一种设备都是100%宽度</li>
</ol>
</li>
</ul>
</li>
<li>定义行，相当于之前的tr		样式：row</li>
<li>定义元素。指定该元素在不同的设备上所占的格子数目。	样式：col-设备代号-格子数目<ul>
<li>设备代号:<ol>
<li>xs：超小屏幕 手机 (&lt;768px)：col-xs-12</li>
<li>sm：小屏幕 平板 (≥768px)</li>
<li>md：中等屏幕 桌面显示器 (≥992px)</li>
<li>lg：大屏幕 大桌面显示器 (≥1200px)</li>
</ol>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>注意：</p>
<ol>
<li><p>一行中如果格子数目超过12，则超出部分自动换行</p>
</li>
<li><p>栅格类属性可以<strong>向上兼容</strong>，栅格类适用于与<strong>屏幕宽度大于或等于分界点大小</strong>的设备 </p>
</li>
<li><p>如果真实设备宽度小于了设置栅格类属性的设备代码的最小值，会一个元素占满一整行</p>
</li>
</ol>
</li>
</ul>
<h1 id="css样式和js插件"><a href="#css样式和js插件" class="headerlink" title="css样式和js插件"></a>css样式和js插件</h1><p>黑马程序员javaweb p196-199</p>
<ol>
<li>全局CSS样式:<ul>
<li>按钮：class&#x3D;”btn btn-default”<ul>
<li>btn-default（默认样式）</li>
<li>btn-primary（首选项）</li>
<li>btn-success（成功）</li>
<li>btn-info（一般信息）</li>
<li>btn-warning （警告）</li>
<li>btn-danger（危险）</li>
<li>btn-link（链接）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/HTML&&CSS/image-20230801161723685.png"
                      alt="按钮样式"
                ></li>
</ul>
</li>
<li>图片<ul>
<li>class&#x3D;”img-responsive”: 图片任意尺寸占100%</li>
<li>形状：<ul>
<li>class&#x3D;”img-rounded”：方形</li>
<li>class&#x3D;”img-cricle”：圆形</li>
<li>class&#x3D;”img-thumbnail”：相框</li>
</ul>
</li>
</ul>
</li>
<li>表格<ul>
<li>class&#x3D;”table” 表格</li>
<li>class&#x3D;”table-bordered” 边框</li>
<li>class&#x3D;”table-hover” 悬浮效果</li>
</ul>
</li>
<li>表单<ul>
<li>给表单项添加：class&#x3D;”form-control”</li>
</ul>
</li>
</ul>
</li>
<li>组件：<ul>
<li>导航条</li>
<li>分页条</li>
</ul>
</li>
<li>插件：<ul>
<li>轮播图</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
        <category>前端</category>
        <category>HTML&amp;&amp;CSS</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP与HTTPS</title>
    <url>/2023/08/13/HTTP%E4%B8%8EHTTPS/</url>
    <content><![CDATA[<h2 id="HTTP-为什么不安全"><a href="#HTTP-为什么不安全" class="headerlink" title="HTTP 为什么不安全"></a>HTTP 为什么不安全</h2><p>HTTP 是明文传输协议，通信过程和数据传输都没有进行加密，也没有验证通信双方的身份。因此通信过程很容易遭到劫持、窃听、篡改等。</p>
<p>使用 HTTP 协议传输信息时，就好比邮寄信件，邮件会经过很多快递员，但是每个快递员都可以拆开邮件并读取内容（因为 HTTP 是明文传输的），所以邮件的内容可以被轻易窃取。除此之外，快递员还可以伪造、篡改邮件，使得用户最终收到的邮件是假的。</p>
<h2 id="HTTPS-如何保证安全"><a href="#HTTPS-如何保证安全" class="headerlink" title="HTTPS 如何保证安全"></a>HTTPS 如何保证安全</h2><p>HTTPS &#x3D; HTTP + SSL&#x2F;TLS，如今 SSL 已废弃，这里我们只讨论 HTTP + TLS。</p>
<p>为了解决 HTTP 协议的问题，HTTPS 引入了<strong>数据加密</strong>和<strong>身份验证机制</strong>。在开始传输数据之前，通过安全可靠的 TLS 协议进行加密，从而保证后续加密传输数据的安全性。</p>
<h2 id="TLS-协议"><a href="#TLS-协议" class="headerlink" title="TLS 协议"></a>TLS 协议</h2><p><strong>传输层安全性协议</strong>（Transport Layer Security，<strong>TLS</strong>）及其前身<strong>安全套接层</strong>（Secure Sockets Layer，<strong>SSL</strong>）是一种安全协议，目的是为了保证<strong>网络通信安全</strong>和<strong>数据完整性</strong>。</p>
<p>受 TLS 协议保护的通信过程，具有以下一种或几种属性：</p>
<ul>
<li><p>连接是安全的</p>
<blockquote>
<p>因为传输的数据进行了加密（使用对称加密算法）。并且对称加密的密钥是为每一个连接唯一生成的（基于 TLS 握手阶段协商的<a class="link"   href="https://en.wikipedia.org/wiki/Transport_Layer_Security#Key_exchange_or_key_agreement" >加密算法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>和<a class="link"   href="https://en.wikipedia.org/wiki/Shared_secret" >共享密钥 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>）。</p>
<p>其中，<strong>共享密钥</strong>的协商是安全可靠的。如果有攻击者修改了通信，那么该修改一定会被检测出来并被阻止。并且即使攻击者处于整个连接的中间（窃听 TLS 握手），也无法利用窃听到的密钥。</p>
</blockquote>
</li>
<li><p>连接是可靠的</p>
<blockquote>
<p>发送的每条消息都会通过<a class="link"   href="https://en.wikipedia.org/wiki/Message_authentication_code" >消息验证码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>（Message authentication code, MAC），来进行消息完整性检查。</p>
</blockquote>
</li>
<li><p>可以使用公钥对通信双方进行身份验证</p>
<blockquote>
<p>该项一般只需要验证一方的身份（通常是服务端）。对于一些非常保密的应用，还是需要验证双方的身份。例如，金融机构往往只允许认证后的用户连入自己的网络。</p>
</blockquote>
</li>
</ul>
<p>TLS 协议包括两层：<a class="link"   href="https://en.wikipedia.org/wiki/Transport_Layer_Security#TLS_record" >TLS 记录 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>和 <a class="link"   href="https://en.wikipedia.org/wiki/Transport_Layer_Security#TLS_handshake" >TLS 握手协议 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。本文主要讲述 TLS 握手协议。</p>
<p>由于诸多原因（主要是安全方面），SSL 协议的所有版本（SSL 1.0、SSL 2.0、SSL 3.0）都已弃用。并且 TLS 1.0、TLS 1.1 也将在 2020 年弃用，因此目前主流的通信加密协议版本是 TLS 1.2 和 TLS 1.3。</p>
<h2 id="TLS-握手"><a href="#TLS-握手" class="headerlink" title="TLS 握手"></a>TLS 握手</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/HTTP%E4%B8%8EHTTPS/tls-four-handshake.png"
                      alt="img"
                ></p>
<p>一张图解 TLS 握手（下面会详细介绍）：</p>
<blockquote>
<p>带证书的双向身份验证的 TLS 握手。</p>
</blockquote>
<p>详细过程如下：</p>
<ul>
<li><p>第一次握手</p>
<ul>
<li><p>客户端发送 ClientHello 消息，其中包含<strong>支持的最高 TLS 协议版本</strong>、<strong>随机数</strong>（稍后用于生成“会话密钥”）、<strong>加密算法列表</strong>（如 RSA 公钥加密）和<strong>压缩算法列表</strong></p>
<blockquote>
<p>如果客户端正在尝试恢复握手，则它可以发送会话 ID。</p>
<p>如果客户端可以使用应用协议协商，则它可能包括受支持的应用程序协议列表，例如 HTTP 2.0</p>
</blockquote>
</li>
<li><p>服务端回应 ServerHello 消息，其中包含<strong>要使用的 TLS 协议版本</strong>、<strong>随机数</strong>（稍后用于生成“会话密钥”）、<strong>要使用的加密算法</strong>和<strong>要使用的压缩算法</strong></p>
<blockquote>
<p>为了确认恢复握手，则服务端可以发送会话 ID。</p>
<p>要使用的协议版本应该是客户端和服务端都支持的最高版本。例如，客户端支持 TLS 1.1，服务端支持 TLS 1.2，则应该选择 TLS 1.1 版本。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>第二次握手</p>
<ul>
<li><p>服务端发送其证书（可选，取决于使用的加密算法）</p>
<blockquote>
<p>目前主流的 RSA 算法就是基于证书的。使用证书也是更推荐的做法，因为相比于无证书的机制，使用证书更安全</p>
</blockquote>
</li>
<li><p>服务端发送 ServerKeyExchange 消息（可选，取决于使用的加密算法。DHE 和 DH_anon 算法会发送该消息）</p>
</li>
<li><p>服务端发送 CertificateRequest 消息，请求获取客户端证书，以便进行相互认证（可选，如果是单向身份认证，通常是服务端认证，则不需要这一步）</p>
</li>
<li><p>服务端发送 ServerHelloDone 消息，表示<strong>服务端握手协商完成</strong>（注意，是协商完成，而不是整个 TLS 握手完成）。</p>
</li>
<li><p>客户端校验服务端证书（如果证书不合法，客户端会<strong>向用户发出警告信息</strong>并<strong>断开 TLS 握手</strong>）</p>
</li>
</ul>
</li>
<li><p>第三次握手</p>
<ul>
<li><p>客户端发送其证书，供服务端使用和校验（可选，如果是单向身份认证，通常是服务端认证，则不需要这一步）</p>
</li>
<li><p>客户端发送 ClientKeyExchange 消息（可选，同样取决于使用的加密算法。DHE 和 DH_anon 算法会用到），其中可能包含 Pre-Master-Secret、公钥。</p>
<blockquote>
<p>Pre-Master-Secret (PMS，预主密钥) 是一个随机数，在发送之前，会使用服务端证书中的公钥对其进行加密。</p>
</blockquote>
</li>
<li><p>客户端发送一个 CertificateVerify 消息（可选，如果是单向身份认证，通常是服务端认证，则不需要这一步），其中包含使用客户端<strong>私钥</strong>对之前握手信息的签名。服务端可以使用客户端公钥来验证此签名，以确定客户端是否拥有此证书</p>
</li>
<li><p>到此为止，客户端和服务端都具有了三个随机数（两个随机数 + PMS），然后它们分别使用之前协商的<strong>对称加密算法</strong>和<strong>三个随机数</strong>来生成 Master-Secret，用于加密之后传输的数据</p>
<blockquote>
<p>Master-Secret（MS，主密钥，也称为“会话密钥”）</p>
</blockquote>
</li>
</ul>
</li>
<li><p>第四次挥手</p>
<ul>
<li>客户端发送 ChangeCipherSpec 记录，用于告诉服务端“之后的所有数据都将进行身份验证（如果服务端证书中存在加密参数，则会进行加密）”。具体如下：<ul>
<li>客户端发送经过身份验证和加密的 Finished 消息，其包含之前所有握手信息的 Hash 和 MAC</li>
<li>服务端尝试解密 Finished 消息，获取并验证 Hash 和 MAC。如果解密或验证失败，则认为握手失败，断开 TLS 链接。</li>
</ul>
</li>
<li>服务端回应 ChangeCipherSpec 记录，同样用于告诉客户端“之后的所有数据都将进行身份验证（如果服务端证书中存在加密参数，则会进行加密）”。具体如下：<ul>
<li>服务端发送经过身份验证和加密的 Finished 消息，其包含之前所有握手信息的 Hash 和 MAC</li>
<li>客户端执行与服务端上一步相同的解密和验证过程</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>上面对 TLS 四次握手进行了全面的介绍，但比较晦涩难懂，下面我们将其简化并总结一下：</p>
<blockquote>
<p>由于不用证书的 TLS 握手不够安全，也很少使用，因此这里只讨论需要证书的。</p>
</blockquote>
<ul>
<li><p>第一次握手</p>
<ul>
<li>客户端发送 TLS 握手请求，其中包含<strong>支持的最高 TLS 协议版本</strong>、<strong>随机数</strong>、<strong>加密算法列表</strong>、<strong>压缩算法列表</strong></li>
<li>服务端回应请求，回应的内容包含<strong>要使用的 TLS 协议版本</strong>、<strong>随机数</strong>、<strong>要使用的加密算法</strong>、<strong>要使用的压缩算法</strong></li>
</ul>
</li>
<li><p>第二次握手</p>
<ul>
<li>服务端发送其证书，请求获取客户端证书，然后发送 ServerHelloDone 消息</li>
<li>客户端验证服务端证书，如果不合法，则断开 TLS 握手连接</li>
</ul>
</li>
<li><p>第三次握手</p>
<p>客户端发送以下信息：</p>
<ul>
<li>客户端证书</li>
<li>一个随机数（PMS）。该随机数使用服务端的公钥加密</li>
<li>使用客户端<strong>私钥</strong>对先前握手信息的签名</li>
</ul>
<p>此时，客户端和服务端都有了三个随机数，然后双方各自使用协商的对称加密算法和三个随机数，来生成对话密钥（MS），用于加密之后传输的数据。</p>
</li>
<li><p>第四次挥手</p>
<p>客户端发送如下信息：</p>
<ul>
<li>编码改变通知（用于告诉服务端加密传输接下来的数据）</li>
<li>握手结束通知（该通知包含之前所有握手信息的 Hash 和 MAC，供服务端校验）</li>
</ul>
<p>服务端发送如下信息：</p>
<ul>
<li>编码改变通知（用于告诉客户端加密传输接下来的数据）</li>
<li>握手结束通知（该通知包含之前所有握手信息的 Hash 和 MAC，供客户端校验）</li>
</ul>
</li>
</ul>
<h2 id="证书校验"><a href="#证书校验" class="headerlink" title="证书校验"></a>证书校验</h2><p>TLS 协议中重要的一环是如何校验证书的真实性。虽然有些 TLS 握手不需要证书（例如，使用 Diffie-Hellman（DH） 算法的 TLS 握手），但是这些情况都被证实不安全，而且很少使用。</p>
<p>要证明证书的真实性，通常依赖于<strong>一组</strong>受信任的第三方<strong>证书颁发机构</strong>（Certificate authorities, <strong>CA</strong>）。验证 TLS 证书有效性的方法如下：</p>
<ol>
<li><p>检查证书是否是浏览器中<strong>受信任的根证书机构</strong>颁发</p>
<p>证书都是上级 CA 签发的，上级的 CA 可能还有上级，直到找到根证书。</p>
</li>
<li><p>检查证书中的<strong>证书吊销列表</strong>（CRL），看证书是否已经被吊销</p>
<p>证书被吊销后，会被记录在证书吊销列表中，CA 会定期发布 CRL。应用程序可以根据 CRL 来检查证书是否被吊销。</p>
</li>
<li><p>通过<strong>在线证书状态协议</strong>（OCSP）检查证书是否有效</p>
<p>CA 会提供实时的查询接口，用来查询证书的有效性。在线实时查询会使得 TLS 握手时间延长，因为浏览器需要等待查询结束才能继续 TLS 握手。至于使用<strong>在线查询</strong>还是证书中的<strong>吊销列表</strong>，由浏览器决定。</p>
</li>
<li><p>检查证书是否过期</p>
</li>
<li><p>检查域名和证书中的域名是否一致</p>
</li>
<li><p>查询网站是否被列入了欺诈网站黑名单</p>
<p>这一步 IE7 会进行，IE7 会到<strong>欺诈网站数据库</strong>，查询网站是否被列入了欺诈黑名单。</p>
</li>
</ol>
<p>经过了以上步骤，浏览器中才会显示安全锁的标志。任意一个步骤出问题，浏览器都无法建立安全链接，并最终提示“您的链接不是私密链接”。</p>
<h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>对称加密，又叫私钥加密，指<strong>加密和解密使用相同密钥的加密算法</strong>。其特点是，加密密钥和解密秘钥可以相互推算出来。并且在大多数对称加密算法中，加密密钥和解密秘钥是相同的。因此，密钥的保密性对通信的安全性至关重要。</p>
<p>优点：计算量小、加密速度快，效率高。<br>缺点：双方使用同样的密钥，安全性得不到保证。</p>
<p>从以上特点可以看出，如果 TLS 握手阶段使用对称加密，那么只要攻击者窃听到密钥，就可以获取所有通信数据，这使得加密毫无意义。因此，需要用到非对称加密来保证 TLS 握手的安全。</p>
<h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>上文介绍了 TLS 四次握手，我们知道在数据传输之前，需要<strong>通过协商来交换密钥、加密算法等</strong>。密钥协商阶段常用的非对称加密算法是 RSA（用于生成<strong>公钥</strong>和<strong>私钥</strong>）。其中，公钥会被包含在证书中，私钥则由客户端或服务端自己来保管。</p>
<p>RSA 算法安全性很高，实现也简单，但缺点是需要比较大的质数（目前业界常用的是 2048 位）来保证安全强度，并且运算极其消耗 CPU 资源。</p>
<p>一次完全的 TLS 握手中，在密钥交换阶段，非对称加密的计算量占整个握手过程的 90% 以上，而对称加密的计算量只相当于非对称加密的 0.1% 左右。所以，如果后续的数据传输也使用非对称加密，则会极其消耗 CPU 性能，服务器根本无法承受。</p>
<p>此外，非对称加密有一个限制：<strong>加密的内容长度不能超过公钥的长度</strong>。例如，常用的公钥长度为 2048 位，意味着加密内容不能超过 256 个字节。</p>
<p>因此，非对称加密目前只适用于<strong>密钥协商</strong>或 <strong>CA 签名</strong>，不适用于传输数据的加解密，这也就是为什么不全程使用非对称加密的原因。</p>
<h2 id="握手恢复"><a href="#握手恢复" class="headerlink" title="握手恢复"></a>握手恢复</h2><p>TLS 握手阶段使用了非对称加密（例如 RSA 算法），其计算消耗非常大，因此 TLS 握手机制中提供了会话恢复的功能，从而提高了握手中断后再次握手的性能。</p>
<p>有两种方法可以恢复会话：一种是 Session ID，另一种是 Session tickets。</p>
<h3 id="Session-ID"><a href="#Session-ID" class="headerlink" title="Session ID"></a>Session ID</h3><p>Session ID 的思想很简单：每次会话都有一个 Session ID。如果 TLS 握手中断，下次重连的时候，只要客户端给出 Session ID，并且服务端有对应的记录，那么双方就可以使用之前的“会话密钥”，而不必重新计算生成。</p>
<p>具体过程如下：在一次会话中，服务器发送 Session ID 作为 ServerHello 消息的一部分。客户端将此 Session ID 与服务端的 IP、TCP 端口相关联，以便下次重连时简化握手。服务端则会将此 Session ID 与之前协商的密钥相关联，特别是“会话密钥（Master-Secret）”。</p>
<h3 id="Session-tickets"><a href="#Session-tickets" class="headerlink" title="Session tickets"></a>Session tickets</h3><p>Session ID 机制有一些弊端，例如：1、只能保留在一台服务器上。负载匀衡中，多台服务器之间往往没有同步 Session 信息，如果客户端的两次请求没有被同一台服务器处理，就无法通过 Session ID 恢复握手。2、服务端不好控制 Session ID 对应信息的失效时间。时间太短起不到作用，太长又占用服务器大量资源。</p>
<p>Session tickets 的出现就是为了 Session ID 机制的一些弊端。</p>
<p>使用 Session tickets 时，服务器将<strong>会话状态</strong>存储在其中，然后将 Session tickets 加密后存储到客户端。客户端在恢复会话时，将 Session tickets 发送给服务端，服务器验证通过后，就可以使用其中的会话状态来恢复 TLS 握手。</p>
<h2 id="TLS-安全性"><a href="#TLS-安全性" class="headerlink" title="TLS 安全性"></a>TLS 安全性</h2><p>从 TLS 的原理可知，其设计是严谨、可靠的，但是问题出现在不严谨的使用中。</p>
<h3 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h3><p>中间人攻击（Man-in-the-middle, MITM）是指 A 和 B 通信时，有第三者 C 处于信道中间，可以完全劫持、窃听、篡改这些信息。</p>
<p>上文中也一直强调，不使用证书的 TLS 握手是不安全的。例如，使用密钥交换算法 <a class="link"   href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman" >DH <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，该算法就没有证书的概念，这样攻击者就可以轻易窃听、篡改数据，从而冒充他人。</p>
<h3 id="TLS-剥离攻击"><a href="#TLS-剥离攻击" class="headerlink" title="TLS 剥离攻击"></a>TLS 剥离攻击</h3><p>TLS 剥离攻击是指将 HTTPS 连接降级到 HTTP 连接，从而截获用户传输的内容。也属于中间人攻击的一种。</p>
<p>用户在访问网站时，一般只会在地址栏输入域名，例如 <code>github.com</code>。这样操作的结果是，浏览器用默认的 HTTP 协议发送请求，服务器会返回 302 状态码，然后客户端进行重定向，这时候才使用 HTTPS 协议去访问网站。</p>
<p>攻击者正是利用 HTTP 重定向到 HTTPS 的过程，进行 TLS 剥离攻击。如下图所示：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/HTTP%E4%B8%8EHTTPS/tls-strip-attack.png"
                      alt="img"
                ></p>
<p>在请求第一次走 HTTP 协议时，攻击者劫持 80 端口，然后模拟 HTTPS 请求到服务器上获取数据，最后仍通过 80 端口返回给用户，整个过程用户完全察觉不到。</p>
<p>有两种情况下可能存在 TLS 剥离攻击：</p>
<ul>
<li><p>用户没有通过 <code>https://</code> 的方式输入网址，浏览器会走 HTTP 协议</p>
</li>
<li><p>在 HTTPS 页面中，包含 HTTP 链接</p>
<blockquote>
<p>这就是为什么建议 HTTPS 页面中，所有的链接都要使用 HTTPS 协议。哪怕其中有一个链接使用了 HTTP 协议，那么整个 HTTPS 页面都可能是不安全的。</p>
</blockquote>
</li>
</ul>
<h3 id="伪造证书攻击"><a href="#伪造证书攻击" class="headerlink" title="伪造证书攻击"></a>伪造证书攻击</h3><p>上文介绍 TLS 握手时，提到了如果攻击者使用了伪造的证书，那么一定会被检验出来。但是，如果客户端信任攻击者的伪造证书会怎样？结果不言而喻，攻击者可以随意窃取用户的数据。</p>
<p>假设用户访问 <code>https://github.com</code>，但是用户的 DNS 服务器被攻击了，使得 IP 并没有指向 Github 的服务器，而是指向了攻击者的服务器。此时，如果攻击者的服务器上有合法的证书，那么客户端就会信任攻击者，从而和攻击者进行通信。</p>
<p>这种攻击的前提条件是：</p>
<p>​	1、<strong>用户的 DNS 服务器被攻击</strong>。</p>
<p>​	2、<strong>攻击者的服务器上有合法的证书</strong>。其中，第二点对于用户来说无法控制，需要证书机构不滥发证书。</p>
<p>在实际中，这种攻击确实发生过，例如：2016 年 Mozilla 发现沃通 CA 存在严重的信任问题，例如偷签 <code>github.com</code> 的证书，故意倒填证书日期绕过浏览器对 SHA-1 证书的限制等，将停止信任 WoSign 和 StartCom 签发的新证书。</p>
<h2 id="安全措施"><a href="#安全措施" class="headerlink" title="安全措施"></a>安全措施</h2><h3 id="HSTS-策略"><a href="#HSTS-策略" class="headerlink" title="HSTS 策略"></a>HSTS 策略</h3><p>为了应对 TLS 剥离攻击，引入了 HSTS 技术。HSTS（HTTP Strict Transport Security）的作用是强制客户端使用 HTTPS 进行通信。</p>
<p>该策略的原理很简单：在服务端的响应头中添加 <code>Strict-Transport-Security</code> 字段，该字段中设置了 <code>max-age</code>，下次客户端使用 HTTP 访问时，只要 <code>max-age</code> 未过期，就直接内部返回 307 状态码（不经过服务器），然后重定向到 HTTPS。</p>
<p>使用示例：</p>
<div class="highlight-container" data-rel="Llvm"><figure class="iseeu highlight llvm"><table><tr><td class="code"><pre><span class="line">Strict-Transport-Security: <span class="keyword">max</span>-age<span class="operator">=</span><span class="number">31536000</span><span class="comment">; includeSubDomains</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><code>includeSubDomains</code> 表示对子域名也生效。</p>
</blockquote>
<p>这意味着两点：</p>
<ul>
<li>在接下来的 31536000 秒（即一年）中，客户端发起 HTTP 请求时，会自动强制跳转到 HTTPS</li>
<li>在接下来的一年中，如果服务器发送的 TLS 证书无效，用户不能忽略浏览器的警告继续访问网站</li>
</ul>
<p>使用 HSTS 的一些弊端：</p>
<ul>
<li><p>用户第一次访问某网站，还没有种下 <code>Strict-Transport-Security</code> 响应头，HSTS 策略无法生效</p>
<blockquote>
<p>解决这个弊端有两种方法：</p>
<ol>
<li>浏览器预置 HSTS 域名列表</li>
<li>将 HSTS 信息加入到域名系统记录中（这需要确保 DNS 安全）</li>
</ol>
</blockquote>
</li>
<li><p>直接使用 IP 访问，HSTS 策略无法生效</p>
</li>
<li><p>可以改通过修改系统时间绕过 <code>max-age</code></p>
<blockquote>
<p>攻击者可以通过伪造 NTP（Network Time Protocol，网络时间协议） 信息，设置错误时间来绕过 HSTS。解决方法是认证 NTP 信息，或者禁止 NTP 大幅度增减时间。</p>
</blockquote>
</li>
<li><p>如果证书错误，浏览器一般会提醒存在安全风险，但仍然提供继续访问的链接。使用 HSTS 策略后，浏览器就不再提供继续访问的链接了，所以一旦证书配置错误，就会引起很大的故障</p>
</li>
<li><p>如果服务器的 HTTPS 没有配置好就开启了 <code>Strict-Transport-Security</code> 响应头，那么在服务器的 HTTPS 配置好之前，用户无法连接到服务器，除非等到 <code>max-age</code> 过期或使用 IP 访问</p>
</li>
</ul>
<p>使用 HSTS 的额外收益：节省一次 302&#x2F;301 重定向请求。</p>
]]></content>
      <categories>
        <category>技巧</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>TLS</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA启动或者直接启动Tomcat控制台中文乱码解决</title>
    <url>/2023/08/03/IDEA%E5%90%AF%E5%8A%A8%E6%88%96%E8%80%85%E7%9B%B4%E6%8E%A5%E5%90%AF%E5%8A%A8Tomcat%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h1 id="中文乱码原因"><a href="#中文乱码原因" class="headerlink" title="中文乱码原因"></a>中文乱码原因</h1><p>由于安装的windows系统本地语言选择的是中文，也就是GBK编码；而IDEA或者Tomcat日志使用的是UTF-8编码，这就导致了中文显示乱码。</p>
<h1 id="启动Tomcat中文乱码解决"><a href="#启动Tomcat中文乱码解决" class="headerlink" title="启动Tomcat中文乱码解决"></a>启动Tomcat中文乱码解决</h1><ul>
<li>找到Tomcat日志配置文件 <code>conf\logging.properties</code></li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/IDEA%E5%90%AF%E5%8A%A8%E6%88%96%E8%80%85%E7%9B%B4%E6%8E%A5%E5%90%AF%E5%8A%A8Tomcat%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/image-20230803222157190.png"
                      alt="如图"
                ></li>
</ul>
<h1 id="IDEA其他配置一律UTF-8编码配置"><a href="#IDEA其他配置一律UTF-8编码配置" class="headerlink" title="IDEA其他配置一律UTF-8编码配置"></a>IDEA其他配置一律UTF-8编码配置</h1><p>File-&gt;Settings 搜索 File Encodings ,编码统一UTF-8</p>
<p><em>改为GBK编码是解决控制台显示中文乱码问题，其他UTF-8编码是为了与编辑器、浏览器等保持一致通用</em></p>
]]></content>
      <categories>
        <category>技巧</category>
        <category>后端</category>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVASE基础00</title>
    <url>/2023/06/29/JAVASE%E5%9F%BA%E7%A1%8000/</url>
    <content><![CDATA[<h2 id="JRE与JDK"><a href="#JRE与JDK" class="headerlink" title="JRE与JDK"></a>JRE与JDK</h2><h3 id="初步了解"><a href="#初步了解" class="headerlink" title="初步了解"></a>初步了解</h3><h4 id="1-JRE-Java-Runtime-Environment"><a href="#1-JRE-Java-Runtime-Environment" class="headerlink" title="1.JRE(Java Runtime Environment)"></a>1.JRE(Java Runtime Environment)</h4><p>是Java程序的运行时环境，包含JVM 和运行时所需要的核心类库。我们想要运行一个已有的Java程序，那么只需安装JRE即可</p>
<h4 id="2-JDK-Java-Development-Kit"><a href="#2-JDK-Java-Development-Kit" class="headerlink" title="2.JDK (Java Development Kit)"></a>2.JDK (Java Development Kit)</h4><p>是Java程序开发工具包，包含JRE和开发人员使用的工具其中的开发工具: 编译工具 (avac.exe)和运行具 (ava.exe)0我们想要开发一个全新的Java程序，那么必须安装JDK</p>
<p><a class="link"   href="https://tvvffi13ib.feishu.cn/file/boxcnSDkMSKurH2HPTkXHbH2ZKa" >https://tvvffi13ib.feishu.cn/file/boxcnSDkMSKurH2HPTkXHbH2ZKa <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="常用dos命令"><a href="#常用dos命令" class="headerlink" title="常用dos命令"></a>常用dos命令</h2><table>
<thead>
<tr>
<th>盘符名称</th>
<th>盘符切换</th>
</tr>
</thead>
<tbody><tr>
<td>dir</td>
<td>查看当前路径下的内容</td>
</tr>
<tr>
<td>cd目录</td>
<td>进入单级目录</td>
</tr>
<tr>
<td>cd..</td>
<td>回退到上一级目录</td>
</tr>
<tr>
<td>cd 目录1\目录\ …</td>
<td>进入多级目录</td>
</tr>
<tr>
<td>cd\</td>
<td>回退到盘符目录</td>
</tr>
<tr>
<td>cls</td>
<td>清屏</td>
</tr>
<tr>
<td>exit</td>
<td>退出命令提示符窗口</td>
</tr>
</tbody></table>
<h2 id="无聊的记事本编码-我选择IntelliJ-IDEA"><a href="#无聊的记事本编码-我选择IntelliJ-IDEA" class="headerlink" title="无聊的记事本编码 我选择IntelliJ IDEA"></a>无聊的记事本编码 我选择IntelliJ IDEA</h2><h3 id="IntelliJ-IDEA-如何创建一个-Java-项目"><a href="#IntelliJ-IDEA-如何创建一个-Java-项目" class="headerlink" title="IntelliJ IDEA 如何创建一个 Java 项目"></a>IntelliJ IDEA 如何创建一个 Java 项目</h3><p><a class="link"   href="https://blog.csdn.net/promsing/article/details/111225674?ops_request_misc=%7B%22request_id%22:%22168800058616800215074771%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168800058616800215074771&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-111225674-null-null.142" >https://blog.csdn.net/promsing/article/details/111225674?ops_request_misc=%7B%22request%5Fid%22%3A%22168800058616800215074771%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=168800058616800215074771&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-111225674-null-null.142 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>程序员第一句<strong>向世界问好</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">public    static    void     main  (String[]   args) </span><br><span class="line">访问修饰符  关键字    返回类型   方法名  string类  字符串数组</span><br></pre></td></tr></table></figure></div>

<p><strong>—————————————————————————————–</strong></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
        <category>JAVASE</category>
      </categories>
      <tags>
        <tag>项目组</tag>
        <tag>黑马程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVASE基础01</title>
    <url>/2023/06/29/JAVASE%E5%9F%BA%E7%A1%8001/</url>
    <content><![CDATA[<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><p>编写 Java 程序时，应注意以下几点：</p>
<ul>
<li><strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li>
<li><strong>类名</strong>：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 <strong>MyFirstJavaClass</strong> 。</li>
<li><strong>方法名</strong>：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</li>
<li><strong>源文件名</strong>：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 <strong>.java</strong>。（如果文件名和类名不相同则会导致编译错误）。</li>
<li><strong>主方法入口</strong>：所有的 Java 程序由 <strong>public static void main(String[] args)</strong> 方法开始执行。</li>
</ul>
<h3 id="Java-标识符"><a href="#Java-标识符" class="headerlink" title="Java 标识符"></a>Java 标识符</h3><p>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</p>
<p>关于 Java 标识符，有以下几点需要注意：</p>
<ul>
<li>所有的标识符都应该以<strong>数字</strong>、<strong>字母</strong>（A-Z 或者 a-z） 、<strong>美元符</strong>（$）、或者<strong>下划线</strong>（_）开始</li>
<li><u><strong>不能</strong></u>是数字开头</li>
<li><u><strong>不能</strong></u>是关键字</li>
<li>标识符是<strong>大小写敏感</strong>的</li>
<li>合法标识符举例：age、$salary、_value、__1_value</li>
<li>非法标识符举例：123abc、-salary、#itheima</li>
</ul>
<h3 id="Java修饰符"><a href="#Java修饰符" class="headerlink" title="Java修饰符"></a>Java修饰符</h3><p>像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：</p>
<ul>
<li>访问控制修饰符 : default, public , protected, private</li>
<li>非访问控制修饰符 : final, abstract, static, synchronized</li>
</ul>
<h3 id="Java-变量"><a href="#Java-变量" class="headerlink" title="Java 变量"></a>Java 变量</h3><p>Java 中主要有如下几种类型的变量</p>
<ul>
<li>局部变量</li>
<li>类变量（静态变量）</li>
<li>成员变量（非静态变量）</li>
</ul>
<h3 id="Java-数组"><a href="#Java-数组" class="headerlink" title="Java 数组"></a>Java 数组</h3><p>数组是储存在堆上的对象，可以保存多个同类型变量。在后面的章节中，我们将会学到如何声明、构造以及初始化一个数组。</p>
<h3 id="Java-关键字"><a href="#Java-关键字" class="headerlink" title="Java 关键字"></a>Java 关键字</h3><table>
<thead>
<tr>
<th align="center">类别</th>
<th align="center">关键字</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">访问控制</td>
<td align="center">private</td>
<td align="center">私有的</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">protected</td>
<td align="center">受保护的</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">public</td>
<td align="center">公共的</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">default</td>
<td align="center">默认</td>
</tr>
<tr>
<td align="center">类、方法和变量修饰符</td>
<td align="center">abstract</td>
<td align="center">声明抽象</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">class</td>
<td align="center">类</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">extends</td>
<td align="center">扩充、继承</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">final</td>
<td align="center">最终值、不可改变的</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">implements</td>
<td align="center">实现（接口）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">interface</td>
<td align="center">接口</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">native</td>
<td align="center">本地、原生方法（非 Java 实现）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">new</td>
<td align="center">创建</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">static</td>
<td align="center">静态</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">strictfp</td>
<td align="center">严格浮点、精准浮点</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">synchronized</td>
<td align="center">线程、同步</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">transient</td>
<td align="center">短暂</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">volatile</td>
<td align="center">易失</td>
</tr>
<tr>
<td align="center">程序控制语句</td>
<td align="center">break</td>
<td align="center">跳出循环</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">case</td>
<td align="center">定义一个值以供 switch 选择</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">continue</td>
<td align="center">继续</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">do</td>
<td align="center">运行</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">else</td>
<td align="center">否则</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">for</td>
<td align="center">循环</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">if</td>
<td align="center">如果</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">instanceof</td>
<td align="center">实例</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">return</td>
<td align="center">返回</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">switch</td>
<td align="center">根据值选择执行</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">while</td>
<td align="center">循环</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">assert</td>
<td align="center">断言表达式是否为真</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">catch</td>
<td align="center">捕捉异常</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">finally</td>
<td align="center">有没有异常都执行</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">throw</td>
<td align="center">抛出一个异常对象</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">throws</td>
<td align="center">声明一个异常可能被抛出</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">try</td>
<td align="center">捕获异常</td>
</tr>
<tr>
<td align="center">包相关</td>
<td align="center">import</td>
<td align="center">引入</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">package</td>
<td align="center">包</td>
</tr>
<tr>
<td align="center">基本类型</td>
<td align="center">boolean</td>
<td align="center">布尔型</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">byte</td>
<td align="center">字节型</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">char</td>
<td align="center">字符型</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">double</td>
<td align="center">双精度浮点</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">float</td>
<td align="center">单精度浮点</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">int</td>
<td align="center">整型</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">long</td>
<td align="center">长整型</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">short</td>
<td align="center">短整型</td>
</tr>
<tr>
<td align="center">变量引用</td>
<td align="center">super</td>
<td align="center">父类、超类</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">this</td>
<td align="center">本类</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">void</td>
<td align="center">无返回值</td>
</tr>
<tr>
<td align="center">保留关键字</td>
<td align="center">goto</td>
<td align="center">是关键字，但不能使用</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">const</td>
<td align="center">是关键字，但不能使用</td>
</tr>
</tbody></table>
<h3 id="Java注释"><a href="#Java注释" class="headerlink" title="Java注释"></a>Java注释</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">   <span class="comment">/* 这是第一个Java程序</span></span><br><span class="line"><span class="comment">    * 它将输出 Hello World</span></span><br><span class="line"><span class="comment">    * 这是一个多行注释的示例</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">       <span class="comment">// 这是单行注释的示例</span></span><br><span class="line">       <span class="comment">/* 这个也是单行注释的示例 */</span></span><br><span class="line">       System.out.println(<span class="string">&quot;Hello World&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Java-基本数据类型"><a href="#Java-基本数据类型" class="headerlink" title="Java 基本数据类型"></a>Java 基本数据类型</h3><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">存储大小</th>
<th align="center">值范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte</td>
<td align="left">1 字节</td>
<td align="center">-128 到 127</td>
</tr>
<tr>
<td align="center">short</td>
<td align="left">2 字节</td>
<td align="center">-32,768 到 32,767</td>
</tr>
<tr>
<td align="center">int</td>
<td align="left">4 字节</td>
<td align="center">-2的31次方到2的31次方-1</td>
</tr>
<tr>
<td align="center">long</td>
<td align="left">8字节</td>
<td align="center">-2的63次方到2的63次方-1</td>
</tr>
<tr>
<td align="center">float</td>
<td align="left">4 字节</td>
<td align="center">负数:-3.402823E+38到-1.401298E-45<br />正数:1.401298E-45到3.402823E+38295</td>
</tr>
<tr>
<td align="center">double</td>
<td align="left">8字节</td>
<td align="center">负数: -1.797693E+308到-4.9000000E-324<br />正数:4.9000000E-324 到1.797693E+308</td>
</tr>
<tr>
<td align="center">char</td>
<td align="left">2 字节</td>
<td align="center">0 到 65,535</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="left">1 字节</td>
<td align="center">true,flase</td>
</tr>
</tbody></table>
<p><strong>long类型，为了防止不兼容，要加L<br></strong></p>
<p><strong>float类型，为了防止不兼容，要加F</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimitiveTypeTest</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="comment">// byte  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：byte 二进制位数：&quot;</span> + Byte.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Byte&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Byte.MIN_VALUE=&quot;</span> + Byte.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Byte.MAX_VALUE=&quot;</span> + Byte.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// short  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：short 二进制位数：&quot;</span> + Short.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Short&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Short.MIN_VALUE=&quot;</span> + Short.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Short.MAX_VALUE=&quot;</span> + Short.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// int  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：int 二进制位数：&quot;</span> + Integer.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Integer&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Integer.MIN_VALUE=&quot;</span> + Integer.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Integer.MAX_VALUE=&quot;</span> + Integer.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// long  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：long 二进制位数：&quot;</span> + Long.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Long&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Long.MIN_VALUE=&quot;</span> + Long.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Long.MAX_VALUE=&quot;</span> + Long.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// float  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：float 二进制位数：&quot;</span> + Float.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Float&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Float.MIN_VALUE=&quot;</span> + Float.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Float.MAX_VALUE=&quot;</span> + Float.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// double  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：double 二进制位数：&quot;</span> + Double.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Double&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Double.MIN_VALUE=&quot;</span> + Double.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Double.MAX_VALUE=&quot;</span> + Double.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// char  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：char 二进制位数：&quot;</span> + Character.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Character&quot;</span>);  </span><br><span class="line">        <span class="comment">// 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Character.MIN_VALUE=&quot;</span>  </span><br><span class="line">                + (<span class="type">int</span>) Character.MIN_VALUE);  </span><br><span class="line">        <span class="comment">// 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Character.MAX_VALUE=&quot;</span>  </span><br><span class="line">                + (<span class="type">int</span>) Character.MAX_VALUE);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><table>
<thead>
<tr>
<th align="left"><strong>数据类型</strong></th>
<th align="left"><strong>默认值</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">byte</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">short</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">int</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">long</td>
<td align="left">0L</td>
</tr>
<tr>
<td align="left">float</td>
<td align="left">0.0f</td>
</tr>
<tr>
<td align="left">double</td>
<td align="left">0.0d</td>
</tr>
<tr>
<td align="left">char</td>
<td align="left">‘u0000’</td>
</tr>
<tr>
<td align="left">String (or any object)</td>
<td align="left">null</td>
</tr>
<tr>
<td align="left">boolean</td>
<td align="left">false</td>
</tr>
</tbody></table>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">字符含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\n</td>
<td align="left">换行 (0x0a)</td>
</tr>
<tr>
<td align="left">\r</td>
<td align="left">回车 (0x0d)</td>
</tr>
<tr>
<td align="left">\f</td>
<td align="left">换页符(0x0c)</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">退格 (0x08)</td>
</tr>
<tr>
<td align="left">\0</td>
<td align="left">空字符 (0x0)</td>
</tr>
<tr>
<td align="left">\s</td>
<td align="left">空格 (0x20)</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">制表符</td>
</tr>
<tr>
<td align="left">&quot;</td>
<td align="left">双引号</td>
</tr>
<tr>
<td align="left">&#39;</td>
<td align="left">单引号</td>
</tr>
<tr>
<td align="left">\</td>
<td align="left">反斜杠</td>
</tr>
<tr>
<td align="left">\ddd</td>
<td align="left">八进制字符 (ddd)</td>
</tr>
<tr>
<td align="left">\uxxxx</td>
<td align="left">16进制Unicode字符 (xxxx)</td>
</tr>
</tbody></table>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">printall</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//字符常量输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;lihuibear&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;xiaoxiong&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//整数常量</span></span><br><span class="line">        System.out.println(<span class="number">20030304</span>);</span><br><span class="line">        System.out.println(-<span class="number">20230512</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//小数常量</span></span><br><span class="line">        System.out.println(<span class="number">13.14</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//字符常量</span></span><br><span class="line">        System.out.println(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&#x27;X&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//布尔常量</span></span><br><span class="line">        System.out.println(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//空常量</span></span><br><span class="line">        <span class="comment">//空常量不能直接输出</span></span><br><span class="line"><span class="comment">//        System.out.println(null);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="自动类型转化"><a href="#自动类型转化" class="headerlink" title="自动类型转化"></a>自动类型转化</h4><p>数据范围大小（小到大）</p>
<p><code>byte→short↘</code></p>
<p>​								<code>int→long→float→double</code></p>
<p>​			<code>char↗</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZiDongLeiZhuan</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">            <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">            <span class="type">float</span> b=a;</span><br><span class="line">            <span class="type">byte</span> c=<span class="number">11</span>;</span><br><span class="line">            <span class="type">short</span> d=c;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">            System.out.println(b);</span><br><span class="line">            System.out.println(c);</span><br><span class="line">            System.out.println(d);</span><br><span class="line">  </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">10.0</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<p><strong>必须满足转换前的数据类型的位数要低于转换后的数据类型</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZiDongLeiZhuan</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">            <span class="type">char</span> c1=<span class="string">&#x27;a&#x27;</span>;<span class="comment">//定义一个char类型</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> c1;<span class="comment">//char自动类型转换为int</span></span><br><span class="line">            System.out.println(<span class="string">&quot;char自动类型转换为int后的值等于&quot;</span>+i1);</span><br><span class="line">            <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;<span class="comment">//定义一个char类型</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> c2+<span class="number">1</span>;<span class="comment">//char 类型和 int 类型计算</span></span><br><span class="line">            System.out.println(<span class="string">&quot;char类型和int计算后的值等于&quot;</span>+i2);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//char自动类型转换为int后的值等于97</span></span><br><span class="line"><span class="comment">//char类型和int计算后的值等于66</span></span><br></pre></td></tr></table></figure></div>

<h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><p><strong>1.条件是转换的数据类型必须是兼容的。</strong></p>
<p><strong>2.格式：(type)value   type是要强制类型转换后的数据类型</strong> </p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QiangZhiZhuanHuan</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)i1;<span class="comment">//强制类型转换为byte</span></span><br><span class="line">        System.out.println(<span class="string">&quot;int强制类型转换为byte后的值等于&quot;</span>+b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//int强制类型转换为byte后的值等于123</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
        <category>JAVASE</category>
      </categories>
      <tags>
        <tag>项目组</tag>
        <tag>黑马程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVASE基础02</title>
    <url>/2023/06/30/JAVASE%E5%9F%BA%E7%A1%8002/</url>
    <content><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>算数运算符</p>
<p>+、-、*、&#x2F;、%</p>
<p>不同类型，转换为高类型，13.14+10-&gt;float;</p>
<p>字符串的+操作-&gt;做的是字符串的拼接工作<br></p>
<p>技巧：从左到右，先遇到字符串就进行拼接，先遇到连续数字就进行+操作</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">yunsuanfu</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] arges)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;lihuibear&quot;</span>+<span class="number">666</span>);</span><br><span class="line">        System.out.println(<span class="number">1</span>+<span class="number">99</span>+<span class="string">&quot;lihuibear&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;lihuibear&quot;</span>+<span class="number">1</span>+<span class="number">99</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//lihuibear666</span></span><br><span class="line"><span class="comment">//100lihuibear</span></span><br><span class="line"><span class="comment">//lihuibear199</span></span><br></pre></td></tr></table></figure></div>

<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">printall</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;		<span class="comment">//把10赋值给int类型的变量i</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i:&quot;</span> +i) ;</span><br><span class="line"></span><br><span class="line">        i += <span class="number">20</span>;		<span class="comment">// +- 把左边和右边的数据做加法操作，结果赋值给左边</span></span><br><span class="line">        <span class="comment">//i= i + 20;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i:&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">        				<span class="comment">//注意: 扩展的赋值运算符底层隐含了强制类型转换</span></span><br><span class="line">        <span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//s += 20;</span></span><br><span class="line">        s = (<span class="type">short</span>)(s + <span class="number">20</span>) ;		</span><br><span class="line">        System.out.println(<span class="string">&quot;s:&quot;</span>+ s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行此类操作的，都最好采用s+=20;这种形式</span></span><br></pre></td></tr></table></figure></div>

<h3 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h3><p>i++先赋值再运算</p>
<p>++i先运算再赋值</p>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><h4 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h4><p><strong>逻辑与&amp;</strong></p>
<p><strong>逻辑或|</strong> a和b都是false，结果为false，否则为true</p>
<p><strong>逻辑异或^</strong>  a和b结果不同为true，相同为false</p>
<p><strong>逻辑非!</strong></p>
<h4 id="短路运算符"><a href="#短路运算符" class="headerlink" title="短路运算符"></a>短路运算符</h4><p><strong>短路与</strong></p>
<p><strong>短路或</strong></p>
<p><em>逻辑与&amp;，   无论左边真假，右边都要执行。<br>短路与&amp;&amp;，如果左边为真，右边执行;如果左边为假，右边不执行<br></em><br><em>逻辑或|，   无论左边真假，右边都要执行。<br>短路或||，如果左边为假，右边执行;如果左边为真，右边不执行<br></em></p>
<h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><h3 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h3><ol>
<li><p><strong>导包</strong></p>
<p>import java.util.Scanner</p>
<p>导包的动作必须出现在类定义的上边</p>
</li>
<li><p><strong>创建对象</strong></p>
<p>Scanner sc &#x3D; new Scanner (System.in);</p>
<p>上面这个格式里面，只有sc是变量名，可以变，其他的都不允许变</p>
</li>
<li><p><strong>接收数据</strong></p>
<p>int i &#x3D; sc.nextInt() ;</p>
<p>上面这个格式里面，只有i是变量名，可以变，其他的都不允许变</p>
</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">printall</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">a</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        <span class="type">int</span> aa= a.nextInt();</span><br><span class="line">        <span class="comment">//输出数据</span></span><br><span class="line">        System.out.println(aa);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>顺序结构</p>
<p>分支结构（if，switch）</p>
<p>循环结构（for while, do…while）</p>
<h3 id="三种循环"><a href="#三种循环" class="headerlink" title="三种循环:"></a>三种循环:</h3><h4 id="三种循环的区别"><a href="#三种循环的区别" class="headerlink" title="三种循环的区别:"></a>三种循环的区别:</h4><p><strong>for循环</strong>和<strong>while循环</strong>先判断条件是否成立，然后决定是否执行循环体 <em><strong>(先判断后执行</strong></em>)<br><strong>do…while循环</strong>先执行一次循环体，然后判断条件是否成立，是否继续执行循环体 (<em><strong>先执行后判断</strong></em>)</p>
<h4 id="for和while的区别"><a href="#for和while的区别" class="headerlink" title="for和while的区别:"></a>for和while的区别:</h4><p>条件控制语句所控制的自增变量i，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访问到了</p>
<p>条件控制语句所控制的自增变量i，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用</p>
<h4 id="死循环格式"><a href="#死循环格式" class="headerlink" title="死循环格式:"></a>死循环格式:</h4><p>for(;;){}<br>while(true) {}   最常用<br>do{}while(true);</p>
<h3 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h3><p><strong>continue</strong>用在循环中，基于条件控制，跳过某次循环体内容的执行，继续下一次的执行用在循环中</p>
<p><strong>break</strong>基于条件控制，终止循环体内容的执行，也就是说结束当前的整个循环</p>
<h3 id="Random的使用"><a href="#Random的使用" class="headerlink" title="Random的使用"></a>Random的使用</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Random r= <span class="keyword">new</span> <span class="title class_">Random</span>;</span><br><span class="line"><span class="comment">//接收数据</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span>r.nextInt(<span class="number">100</span>)+<span class="number">1</span>;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
        <category>JAVASE</category>
      </categories>
      <tags>
        <tag>项目组</tag>
        <tag>黑马程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVASE基础04</title>
    <url>/2023/06/30/JAVASE%E5%9F%BA%E7%A1%8004/</url>
    <content><![CDATA[<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>方法(method)是将具有独立功能的<font color=blue>代码块</font>组织成为一个整体，使其具有特殊功能的<font color=blue>代码集</font></p>
<p><font color=red>注意:</font><br>方法必须先创建才可以使用，该过程称为<strong>方法定义</strong><br>方法创建后并不是直接运行的，需要手动使用后才执行，该过程称为<strong>方法调用</strong></p>
<h3 id="方法的定义和调用"><a href="#方法的定义和调用" class="headerlink" title="方法的定义和调用"></a>方法的定义和调用</h3><h4 id="一般方法的定义"><a href="#一般方法的定义" class="headerlink" title="一般方法的定义"></a>一般方法的定义</h4><p><code>public static void isEvenNumber()&#123;</code></p>
<p><code>//方法体</code></p>
<p><code>&#125;</code></p>
<h4 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h4><p><code>isEvenNumber()</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">printall</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Getmax();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Getmax</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">num</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> num.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> num.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> max= (a&gt;b)?a:b;</span><br><span class="line">        </span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="带参数的方法定义和调用"><a href="#带参数的方法定义和调用" class="headerlink" title="带参数的方法定义和调用"></a>带参数的方法定义和调用</h3><h4 id="带参数的方法定义"><a href="#带参数的方法定义" class="headerlink" title="带参数的方法定义"></a>带参数的方法定义</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8004/image-20230630151422104.png"
                      alt="image-20230630151422104"
                ></p>
<h4 id="带参数的方法调用"><a href="#带参数的方法调用" class="headerlink" title="带参数的方法调用"></a>带参数的方法调用</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8004/image-20230630151642557.png"
                      alt="image-20230630151642557"
                ></p>
<h4 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8004/image-20230630152616768.png"
                      alt="image-20230630152616768"
                ></p>
<h3 id="带返回值方法的定义和调用"><a href="#带返回值方法的定义和调用" class="headerlink" title="带返回值方法的定义和调用"></a>带返回值方法的定义和调用</h3><h4 id="带返回值方法的定义"><a href="#带返回值方法的定义" class="headerlink" title="带返回值方法的定义"></a>带返回值方法的定义</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8004/image-20230630153120783.png"
                      alt="image-20230630153120783"
                ></p>
<h4 id="带返回值方法的调用"><a href="#带返回值方法的调用" class="headerlink" title="带返回值方法的调用"></a>带返回值方法的调用</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8004/image-20230630171846247.png"
                      alt="image-20230630171846247"
                ></p>
<h3 id="方法的注意事项"><a href="#方法的注意事项" class="headerlink" title="方法的注意事项"></a>方法的注意事项</h3><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8004/image-20230630171746594.png"
                      alt="image-20230630171746594"
                ></p>
<h4 id="通用格式"><a href="#通用格式" class="headerlink" title="通用格式"></a>通用格式</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8004/image-20230630172934511.png"
                      alt="image-20230630172934511"
                ></p>
<h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载</p>
<ol>
<li><strong>多个方法在同一个类中</strong></li>
<li><strong>多个方法具有相同的方法名</strong></li>
<li><strong>多个方法的参数不相同，类型不同或者数量不同</strong></li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8004/image-20230630174259573.png"
                      alt="image-20230630174259573"
                ></p>
<h4 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fangfachongzai</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     	<span class="type">boolean</span> <span class="variable">c</span> <span class="operator">=</span> compare(<span class="number">10</span>,<span class="number">11</span>);<span class="comment">//默认int</span></span><br><span class="line">        System.out.println(c);</span><br><span class="line">        </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">d</span> <span class="operator">=</span> compare((<span class="type">long</span>)<span class="number">10</span>,(<span class="type">long</span>)<span class="number">11</span>);<span class="comment">//强制转换</span></span><br><span class="line">        System.out.println(d);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;int&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> a==b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">long</span> a,<span class="type">long</span> b)</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;long&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> a==b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">byte</span> a,<span class="type">byte</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;byte&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a==b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">short</span> a,<span class="type">short</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;short&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a==b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自动选择符合的类型</span></span><br></pre></td></tr></table></figure></div>

<h3 id="方法的参数传递"><a href="#方法的参数传递" class="headerlink" title="方法的参数传递"></a>方法的参数传递</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8004/image-20230630210756806.png"
                      alt="image-20230630210756806"
                ></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
        <category>JAVASE</category>
      </categories>
      <tags>
        <tag>项目组</tag>
        <tag>黑马程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVASE合集</title>
    <url>/2023/07/19/JAVASE%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h1 id="JAVASE"><a href="#JAVASE" class="headerlink" title="JAVASE"></a>JAVASE</h1><h2 id="JRE与JDK"><a href="#JRE与JDK" class="headerlink" title="JRE与JDK"></a>JRE与JDK</h2><h3 id="初步了解"><a href="#初步了解" class="headerlink" title="初步了解"></a>初步了解</h3><h4 id="1-JRE-Java-Runtime-Environment"><a href="#1-JRE-Java-Runtime-Environment" class="headerlink" title="1.JRE(Java Runtime Environment)"></a>1.JRE(Java Runtime Environment)</h4><p>是Java程序的运行时环境，包含JVM 和运行时所需要的核心类库。我们想要运行一个已有的Java程序，那么只需安装JRE即可</p>
<h4 id="2-JDK-Java-Development-Kit"><a href="#2-JDK-Java-Development-Kit" class="headerlink" title="2.JDK (Java Development Kit)"></a>2.JDK (Java Development Kit)</h4><p>是Java程序开发工具包，包含JRE和开发人员使用的工具其中的开发工具: 编译工具 (avac.exe)和运行具 (ava.exe)0我们想要开发一个全新的Java程序，那么必须安装JDK</p>
<p><a class="link"   href="https://tvvffi13ib.feishu.cn/file/boxcnSDkMSKurH2HPTkXHbH2ZKa" >https://tvvffi13ib.feishu.cn/file/boxcnSDkMSKurH2HPTkXHbH2ZKa <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="常用dos命令"><a href="#常用dos命令" class="headerlink" title="常用dos命令"></a>常用dos命令</h2><table>
<thead>
<tr>
<th>盘符名称</th>
<th>盘符切换</th>
</tr>
</thead>
<tbody><tr>
<td>dir</td>
<td>查看当前路径下的内容</td>
</tr>
<tr>
<td>cd目录</td>
<td>进入单级目录</td>
</tr>
<tr>
<td>cd..</td>
<td>回退到上一级目录</td>
</tr>
<tr>
<td>cd 目录1\目录\ …</td>
<td>进入多级目录</td>
</tr>
<tr>
<td>cd\</td>
<td>回退到盘符目录</td>
</tr>
<tr>
<td>cls</td>
<td>清屏</td>
</tr>
<tr>
<td>exit</td>
<td>退出命令提示符窗口</td>
</tr>
</tbody></table>
<h2 id="无聊的记事本编码-我选择IntelliJ-IDEA"><a href="#无聊的记事本编码-我选择IntelliJ-IDEA" class="headerlink" title="无聊的记事本编码 我选择IntelliJ IDEA"></a>无聊的记事本编码 我选择IntelliJ IDEA</h2><h3 id="IntelliJ-IDEA-如何创建一个-Java-项目"><a href="#IntelliJ-IDEA-如何创建一个-Java-项目" class="headerlink" title="IntelliJ IDEA 如何创建一个 Java 项目"></a>IntelliJ IDEA 如何创建一个 Java 项目</h3><p><a class="link"   href="https://blog.csdn.net/promsing/article/details/111225674?ops_request_misc=%7B%22request_id%22:%22168800058616800215074771%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=168800058616800215074771&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-111225674-null-null.142" >https://blog.csdn.net/promsing/article/details/111225674?ops_request_misc=%7B%22request%5Fid%22%3A%22168800058616800215074771%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=168800058616800215074771&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-111225674-null-null.142 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>程序员第一句<strong>向世界问好</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">public    static    void     main  (String[]   args) </span><br><span class="line">访问修饰符  关键字    返回类型   方法名  string类  字符串数组</span><br></pre></td></tr></table></figure></div>

<p><strong>—————————————————————————————–</strong></p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><p>编写 Java 程序时，应注意以下几点：</p>
<ul>
<li><strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li>
<li><strong>类名</strong>：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 <strong>MyFirstJavaClass</strong> 。</li>
<li><strong>方法名</strong>：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</li>
<li><strong>源文件名</strong>：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 <strong>.java</strong>。（如果文件名和类名不相同则会导致编译错误）。</li>
<li><strong>主方法入口</strong>：所有的 Java 程序由 <strong>public static void main(String[] args)</strong> 方法开始执行。</li>
</ul>
<h3 id="Java-标识符"><a href="#Java-标识符" class="headerlink" title="Java 标识符"></a>Java 标识符</h3><p>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</p>
<p>关于 Java 标识符，有以下几点需要注意：</p>
<ul>
<li>所有的标识符都应该以<strong>数字</strong>、<strong>字母</strong>（A-Z 或者 a-z） 、<strong>美元符</strong>（$）、或者<strong>下划线</strong>（_）开始</li>
<li><u><strong>不能</strong></u>是数字开头</li>
<li><u><strong>不能</strong></u>是关键字</li>
<li>标识符是<strong>大小写敏感</strong>的</li>
<li>合法标识符举例：age、$salary、_value、__1_value</li>
<li>非法标识符举例：123abc、-salary、#itheima</li>
</ul>
<h3 id="Java修饰符"><a href="#Java修饰符" class="headerlink" title="Java修饰符"></a>Java修饰符</h3><p>像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：</p>
<ul>
<li>访问控制修饰符 : default, public , protected, private</li>
<li>非访问控制修饰符 : final, abstract, static, synchronized</li>
</ul>
<h3 id="Java-变量"><a href="#Java-变量" class="headerlink" title="Java 变量"></a>Java 变量</h3><p>Java 中主要有如下几种类型的变量</p>
<ul>
<li>局部变量</li>
<li>类变量（静态变量）</li>
<li>成员变量（非静态变量）</li>
</ul>
<h3 id="Java-数组"><a href="#Java-数组" class="headerlink" title="Java 数组"></a>Java 数组</h3><p>数组是储存在堆上的对象，可以保存多个同类型变量。在后面的章节中，我们将会学到如何声明、构造以及初始化一个数组。</p>
<h3 id="Java-关键字"><a href="#Java-关键字" class="headerlink" title="Java 关键字"></a>Java 关键字</h3><table>
<thead>
<tr>
<th align="center">类别</th>
<th align="center">关键字</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">访问控制</td>
<td align="center">private</td>
<td align="center">私有的</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">protected</td>
<td align="center">受保护的</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">public</td>
<td align="center">公共的</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">default</td>
<td align="center">默认</td>
</tr>
<tr>
<td align="center">类、方法和变量修饰符</td>
<td align="center">abstract</td>
<td align="center">声明抽象</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">class</td>
<td align="center">类</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">extends</td>
<td align="center">扩充、继承</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">final</td>
<td align="center">最终值、不可改变的</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">implements</td>
<td align="center">实现（接口）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">interface</td>
<td align="center">接口</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">native</td>
<td align="center">本地、原生方法（非 Java 实现）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">new</td>
<td align="center">创建</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">static</td>
<td align="center">静态</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">strictfp</td>
<td align="center">严格浮点、精准浮点</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">synchronized</td>
<td align="center">线程、同步</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">transient</td>
<td align="center">短暂</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">volatile</td>
<td align="center">易失</td>
</tr>
<tr>
<td align="center">程序控制语句</td>
<td align="center">break</td>
<td align="center">跳出循环</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">case</td>
<td align="center">定义一个值以供 switch 选择</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">continue</td>
<td align="center">继续</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">do</td>
<td align="center">运行</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">else</td>
<td align="center">否则</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">for</td>
<td align="center">循环</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">if</td>
<td align="center">如果</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">instanceof</td>
<td align="center">实例</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">return</td>
<td align="center">返回</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">switch</td>
<td align="center">根据值选择执行</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">while</td>
<td align="center">循环</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">assert</td>
<td align="center">断言表达式是否为真</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">catch</td>
<td align="center">捕捉异常</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">finally</td>
<td align="center">有没有异常都执行</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">throw</td>
<td align="center">抛出一个异常对象</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">throws</td>
<td align="center">声明一个异常可能被抛出</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">try</td>
<td align="center">捕获异常</td>
</tr>
<tr>
<td align="center">包相关</td>
<td align="center">import</td>
<td align="center">引入</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">package</td>
<td align="center">包</td>
</tr>
<tr>
<td align="center">基本类型</td>
<td align="center">boolean</td>
<td align="center">布尔型</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">byte</td>
<td align="center">字节型</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">char</td>
<td align="center">字符型</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">double</td>
<td align="center">双精度浮点</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">float</td>
<td align="center">单精度浮点</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">int</td>
<td align="center">整型</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">long</td>
<td align="center">长整型</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">short</td>
<td align="center">短整型</td>
</tr>
<tr>
<td align="center">变量引用</td>
<td align="center">super</td>
<td align="center">父类、超类</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">this</td>
<td align="center">本类</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">void</td>
<td align="center">无返回值</td>
</tr>
<tr>
<td align="center">保留关键字</td>
<td align="center">goto</td>
<td align="center">是关键字，但不能使用</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">const</td>
<td align="center">是关键字，但不能使用</td>
</tr>
</tbody></table>
<h3 id="Java注释"><a href="#Java注释" class="headerlink" title="Java注释"></a>Java注释</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">   <span class="comment">/* 这是第一个Java程序</span></span><br><span class="line"><span class="comment">    * 它将输出 Hello World</span></span><br><span class="line"><span class="comment">    * 这是一个多行注释的示例</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">       <span class="comment">// 这是单行注释的示例</span></span><br><span class="line">       <span class="comment">/* 这个也是单行注释的示例 */</span></span><br><span class="line">       System.out.println(<span class="string">&quot;Hello World&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Java-基本数据类型"><a href="#Java-基本数据类型" class="headerlink" title="Java 基本数据类型"></a>Java 基本数据类型</h3><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">存储大小</th>
<th align="center">值范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte</td>
<td align="left">1 字节</td>
<td align="center">-128 到 127</td>
</tr>
<tr>
<td align="center">short</td>
<td align="left">2 字节</td>
<td align="center">-32,768 到 32,767</td>
</tr>
<tr>
<td align="center">int</td>
<td align="left">4 字节</td>
<td align="center">-2的31次方到2的31次方-1</td>
</tr>
<tr>
<td align="center">long</td>
<td align="left">8字节</td>
<td align="center">-2的63次方到2的63次方-1</td>
</tr>
<tr>
<td align="center">float</td>
<td align="left">4 字节</td>
<td align="center">负数:-3.402823E+38到-1.401298E-45<br />正数:1.401298E-45到3.402823E+38295</td>
</tr>
<tr>
<td align="center">double</td>
<td align="left">8字节</td>
<td align="center">负数: -1.797693E+308到-4.9000000E-324<br />正数:4.9000000E-324 到1.797693E+308</td>
</tr>
<tr>
<td align="center">char</td>
<td align="left">2 字节</td>
<td align="center">0 到 65,535</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="left">1 字节</td>
<td align="center">true,flase</td>
</tr>
</tbody></table>
<p><strong>long类型，为了防止不兼容，要加L<br></strong></p>
<p><strong>float类型，为了防止不兼容，要加F</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimitiveTypeTest</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="comment">// byte  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：byte 二进制位数：&quot;</span> + Byte.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Byte&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Byte.MIN_VALUE=&quot;</span> + Byte.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Byte.MAX_VALUE=&quot;</span> + Byte.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// short  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：short 二进制位数：&quot;</span> + Short.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Short&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Short.MIN_VALUE=&quot;</span> + Short.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Short.MAX_VALUE=&quot;</span> + Short.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// int  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：int 二进制位数：&quot;</span> + Integer.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Integer&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Integer.MIN_VALUE=&quot;</span> + Integer.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Integer.MAX_VALUE=&quot;</span> + Integer.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// long  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：long 二进制位数：&quot;</span> + Long.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Long&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Long.MIN_VALUE=&quot;</span> + Long.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Long.MAX_VALUE=&quot;</span> + Long.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// float  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：float 二进制位数：&quot;</span> + Float.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Float&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Float.MIN_VALUE=&quot;</span> + Float.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Float.MAX_VALUE=&quot;</span> + Float.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// double  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：double 二进制位数：&quot;</span> + Double.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Double&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Double.MIN_VALUE=&quot;</span> + Double.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Double.MAX_VALUE=&quot;</span> + Double.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// char  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：char 二进制位数：&quot;</span> + Character.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Character&quot;</span>);  </span><br><span class="line">        <span class="comment">// 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Character.MIN_VALUE=&quot;</span>  </span><br><span class="line">                + (<span class="type">int</span>) Character.MIN_VALUE);  </span><br><span class="line">        <span class="comment">// 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Character.MAX_VALUE=&quot;</span>  </span><br><span class="line">                + (<span class="type">int</span>) Character.MAX_VALUE);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><table>
<thead>
<tr>
<th align="left"><strong>数据类型</strong></th>
<th align="left"><strong>默认值</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">byte</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">short</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">int</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">long</td>
<td align="left">0L</td>
</tr>
<tr>
<td align="left">float</td>
<td align="left">0.0f</td>
</tr>
<tr>
<td align="left">double</td>
<td align="left">0.0d</td>
</tr>
<tr>
<td align="left">char</td>
<td align="left">‘u0000’</td>
</tr>
<tr>
<td align="left">String (or any object)</td>
<td align="left">null</td>
</tr>
<tr>
<td align="left">boolean</td>
<td align="left">false</td>
</tr>
</tbody></table>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><table>
<thead>
<tr>
<th align="left">符号</th>
<th align="left">字符含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\n</td>
<td align="left">换行 (0x0a)</td>
</tr>
<tr>
<td align="left">\r</td>
<td align="left">回车 (0x0d)</td>
</tr>
<tr>
<td align="left">\f</td>
<td align="left">换页符(0x0c)</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">退格 (0x08)</td>
</tr>
<tr>
<td align="left">\0</td>
<td align="left">空字符 (0x0)</td>
</tr>
<tr>
<td align="left">\s</td>
<td align="left">空格 (0x20)</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">制表符</td>
</tr>
<tr>
<td align="left">&quot;</td>
<td align="left">双引号</td>
</tr>
<tr>
<td align="left">&#39;</td>
<td align="left">单引号</td>
</tr>
<tr>
<td align="left">\</td>
<td align="left">反斜杠</td>
</tr>
<tr>
<td align="left">\ddd</td>
<td align="left">八进制字符 (ddd)</td>
</tr>
<tr>
<td align="left">\uxxxx</td>
<td align="left">16进制Unicode字符 (xxxx)</td>
</tr>
</tbody></table>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">printall</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//字符常量输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;lihuibear&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;xiaoxiong&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//整数常量</span></span><br><span class="line">        System.out.println(<span class="number">20030304</span>);</span><br><span class="line">        System.out.println(-<span class="number">20230512</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//小数常量</span></span><br><span class="line">        System.out.println(<span class="number">13.14</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//字符常量</span></span><br><span class="line">        System.out.println(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&#x27;X&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//布尔常量</span></span><br><span class="line">        System.out.println(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//空常量</span></span><br><span class="line">        <span class="comment">//空常量不能直接输出</span></span><br><span class="line"><span class="comment">//        System.out.println(null);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="自动类型转化"><a href="#自动类型转化" class="headerlink" title="自动类型转化"></a>自动类型转化</h4><p>数据范围大小（小到大）</p>
<p><code>byte→short↘</code></p>
<p>​								<code>int→long→float→double</code></p>
<p>​			<code>char↗</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZiDongLeiZhuan</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">            <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">            <span class="type">float</span> b=a;</span><br><span class="line">            <span class="type">byte</span> c=<span class="number">11</span>;</span><br><span class="line">            <span class="type">short</span> d=c;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">            System.out.println(b);</span><br><span class="line">            System.out.println(c);</span><br><span class="line">            System.out.println(d);</span><br><span class="line">  </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">10.0</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">11</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<p><strong>必须满足转换前的数据类型的位数要低于转换后的数据类型</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZiDongLeiZhuan</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">            <span class="type">char</span> c1=<span class="string">&#x27;a&#x27;</span>;<span class="comment">//定义一个char类型</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> c1;<span class="comment">//char自动类型转换为int</span></span><br><span class="line">            System.out.println(<span class="string">&quot;char自动类型转换为int后的值等于&quot;</span>+i1);</span><br><span class="line">            <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;<span class="comment">//定义一个char类型</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> c2+<span class="number">1</span>;<span class="comment">//char 类型和 int 类型计算</span></span><br><span class="line">            System.out.println(<span class="string">&quot;char类型和int计算后的值等于&quot;</span>+i2);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//char自动类型转换为int后的值等于97</span></span><br><span class="line"><span class="comment">//char类型和int计算后的值等于66</span></span><br></pre></td></tr></table></figure></div>

<h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><p><strong>1.条件是转换的数据类型必须是兼容的。</strong></p>
<p><strong>2.格式：(type)value   type是要强制类型转换后的数据类型</strong> </p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QiangZhiZhuanHuan</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)i1;<span class="comment">//强制类型转换为byte</span></span><br><span class="line">        System.out.println(<span class="string">&quot;int强制类型转换为byte后的值等于&quot;</span>+b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//int强制类型转换为byte后的值等于123</span></span><br></pre></td></tr></table></figure></div>

<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>算数运算符</p>
<p>+、-、*、&#x2F;、%</p>
<p>不同类型，转换为高类型，13.14+10-&gt;float;</p>
<p>字符串的+操作-&gt;做的是字符串的拼接工作<br></p>
<p>技巧：从左到右，先遇到字符串就进行拼接，先遇到连续数字就进行+操作</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">yunsuanfu</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] arges)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;lihuibear&quot;</span>+<span class="number">666</span>);</span><br><span class="line">        System.out.println(<span class="number">1</span>+<span class="number">99</span>+<span class="string">&quot;lihuibear&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;lihuibear&quot;</span>+<span class="number">1</span>+<span class="number">99</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//lihuibear666</span></span><br><span class="line"><span class="comment">//100lihuibear</span></span><br><span class="line"><span class="comment">//lihuibear199</span></span><br></pre></td></tr></table></figure></div>

<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">printall</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;		<span class="comment">//把10赋值给int类型的变量i</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i:&quot;</span> +i) ;</span><br><span class="line"></span><br><span class="line">        i += <span class="number">20</span>;		<span class="comment">// +- 把左边和右边的数据做加法操作，结果赋值给左边</span></span><br><span class="line">        <span class="comment">//i= i + 20;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i:&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">        				<span class="comment">//注意: 扩展的赋值运算符底层隐含了强制类型转换</span></span><br><span class="line">        <span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//s += 20;</span></span><br><span class="line">        s = (<span class="type">short</span>)(s + <span class="number">20</span>) ;		</span><br><span class="line">        System.out.println(<span class="string">&quot;s:&quot;</span>+ s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行此类操作的，都最好采用s+=20;这种形式</span></span><br></pre></td></tr></table></figure></div>

<h3 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h3><p>i++先赋值再运算</p>
<p>++i先运算再赋值</p>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><h4 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h4><p><strong>逻辑与&amp;</strong></p>
<p><strong>逻辑或|</strong> a和b都是false，结果为false，否则为true</p>
<p><strong>逻辑异或^</strong>  a和b结果不同为true，相同为false</p>
<p><strong>逻辑非!</strong></p>
<h4 id="短路运算符"><a href="#短路运算符" class="headerlink" title="短路运算符"></a>短路运算符</h4><p><strong>短路与</strong></p>
<p><strong>短路或</strong></p>
<p><em>逻辑与&amp;，   无论左边真假，右边都要执行。<br>短路与&amp;&amp;，如果左边为真，右边执行;如果左边为假，右边不执行<br></em><br><em>逻辑或|，   无论左边真假，右边都要执行。<br>短路或||，如果左边为假，右边执行;如果左边为真，右边不执行<br></em></p>
<h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><h3 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h3><ol>
<li><p><strong>导包</strong></p>
<p>import java.util.Scanner</p>
<p>导包的动作必须出现在类定义的上边</p>
</li>
<li><p><strong>创建对象</strong></p>
<p>Scanner sc &#x3D; new Scanner (System.in);</p>
<p>上面这个格式里面，只有sc是变量名，可以变，其他的都不允许变</p>
</li>
<li><p><strong>接收数据</strong></p>
<p>int i &#x3D; sc.nextInt() ;</p>
<p>上面这个格式里面，只有i是变量名，可以变，其他的都不允许变</p>
</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">printall</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">a</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        <span class="type">int</span> aa= a.nextInt();</span><br><span class="line">        <span class="comment">//输出数据</span></span><br><span class="line">        System.out.println(aa);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>顺序结构</p>
<p>分支结构（if，switch）</p>
<p>循环结构（for while, do…while）</p>
<h3 id="三种循环"><a href="#三种循环" class="headerlink" title="三种循环:"></a>三种循环:</h3><h4 id="三种循环的区别"><a href="#三种循环的区别" class="headerlink" title="三种循环的区别:"></a>三种循环的区别:</h4><p><strong>for循环</strong>和<strong>while循环</strong>先判断条件是否成立，然后决定是否执行循环体 <em><strong>(先判断后执行</strong></em>)<br><strong>do…while循环</strong>先执行一次循环体，然后判断条件是否成立，是否继续执行循环体 (<em><strong>先执行后判断</strong></em>)</p>
<h4 id="for和while的区别"><a href="#for和while的区别" class="headerlink" title="for和while的区别:"></a>for和while的区别:</h4><p>条件控制语句所控制的自增变量i，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访问到了</p>
<p>条件控制语句所控制的自增变量i，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用</p>
<h4 id="死循环格式"><a href="#死循环格式" class="headerlink" title="死循环格式:"></a>死循环格式:</h4><p>for(;;){}<br>while(true) {}   最常用<br>do{}while(true);</p>
<h3 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h3><p><strong>continue</strong>用在循环中，基于条件控制，跳过某次循环体内容的执行，继续下一次的执行用在循环中</p>
<p><strong>break</strong>基于条件控制，终止循环体内容的执行，也就是说结束当前的整个循环</p>
<h3 id="Random的使用"><a href="#Random的使用" class="headerlink" title="Random的使用"></a>Random的使用</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Random r= <span class="keyword">new</span> <span class="title class_">Random</span>;</span><br><span class="line"><span class="comment">//接收数据</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span>r.nextInt(<span class="number">100</span>)+<span class="number">1</span>;</span><br></pre></td></tr></table></figure></div>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p><strong>推荐格式</strong></p>
<p>格式一: 数据类型[]   变量名<br>例:           int[] arr</p>
<p><em>定义了一个int类型的数组，数组名是arr</em></p>
<p>格式二: 数据类型 变量名[]<br>                 int arr[]</p>
<p><em>定义了一个int类型的变量，变量名是arr数组</em></p>
<h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><p>int [] arr &#x3D; new int [3];</p>
<p>左边:<br>int:说明数组中的元素类型是int类型</p>
<p>[]:说明这是一个数组</p>
<p>arr:这是数组的名称</p>
<p>右边:<br>new:为数组申请内存空间</p>
<p>int:说明数组中的元素类型是int类型</p>
<p>[]:说明这是一个数组</p>
<p>3:数组长度，其实就是数组中的元素个数</p>
<h3 id="数组元素访问"><a href="#数组元素访问" class="headerlink" title="数组元素访问"></a>数组元素访问</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出数组名，地址分配</span></span><br><span class="line">System.out.println(arr);</span><br><span class="line"><span class="comment">//输出数组元素</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><table>
<thead>
<tr>
<th align="center">类型</th>
<th>初始值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">整数</td>
<td>0</td>
</tr>
<tr>
<td align="center">浮点数</td>
<td>0.0</td>
</tr>
<tr>
<td align="center">布尔值</td>
<td>false</td>
</tr>
<tr>
<td align="center">字符</td>
<td>空字符</td>
</tr>
<tr>
<td align="center">引用数据类型</td>
<td>null</td>
</tr>
</tbody></table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230630115700337.png"
                      alt="image-20230630115700337"
                ></p>
<p><strong>———————————————————————————————</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230630115703994.png"
                      alt="image-20230630115703994"
                ></p>
<p><strong>———————————————————————————————-</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230630115807066.png"
                      alt="image-20230630115807066"
                ></p>
<p><strong>———————————————————————————————————————————————</strong></p>
<p><strong>多个数组 指向相同的内存图，一个数组改变数据值，另外一个数组相应的也改变</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230630141519058.png"
                      alt="image-20230630141519058"
                ></p>
<h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">printall</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//int [] arr =  &#123;1,2,3,4&#125;;</span></span><br><span class="line">        <span class="type">int</span> [] arr = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="数组操作的两个问题"><a href="#数组操作的两个问题" class="headerlink" title="数组操作的两个问题"></a>数组操作的两个问题</h3><p>索引越界</p>
<p>空指针异常</p>
<p>null</p>
<h3 id="数组常见操作"><a href="#数组常见操作" class="headerlink" title="数组常见操作"></a>数组常见操作</h3><p>遍历-&gt;for</p>
<p>最大值-&gt;max&#x3D;arr[0];-&gt;max</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>方法(method)是将具有独立功能的<font color=blue>代码块</font>组织成为一个整体，使其具有特殊功能的<font color=blue>代码集</font></p>
<p><font color=red>注意:</font><br>方法必须先创建才可以使用，该过程称为<strong>方法定义</strong><br>方法创建后并不是直接运行的，需要手动使用后才执行，该过程称为<strong>方法调用</strong></p>
<h3 id="方法的定义和调用"><a href="#方法的定义和调用" class="headerlink" title="方法的定义和调用"></a>方法的定义和调用</h3><h4 id="一般方法的定义"><a href="#一般方法的定义" class="headerlink" title="一般方法的定义"></a>一般方法的定义</h4><p><code>public static void isEvenNumber()&#123;</code></p>
<p><code>//方法体</code></p>
<p><code>&#125;</code></p>
<h4 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h4><p><code>isEvenNumber()</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">printall</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Getmax();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Getmax</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">num</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> num.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> num.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> max= (a&gt;b)?a:b;</span><br><span class="line">        </span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="带参数的方法定义和调用"><a href="#带参数的方法定义和调用" class="headerlink" title="带参数的方法定义和调用"></a>带参数的方法定义和调用</h3><h4 id="带参数的方法定义"><a href="#带参数的方法定义" class="headerlink" title="带参数的方法定义"></a>带参数的方法定义</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230630151422104.png"
                      alt="image-20230630151422104"
                ></p>
<h4 id="带参数的方法调用"><a href="#带参数的方法调用" class="headerlink" title="带参数的方法调用"></a>带参数的方法调用</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230630151642557.png"
                      alt="image-20230630151642557"
                ></p>
<h4 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230630152616768.png"
                      alt="image-20230630152616768"
                ></p>
<h3 id="带返回值方法的定义和调用"><a href="#带返回值方法的定义和调用" class="headerlink" title="带返回值方法的定义和调用"></a>带返回值方法的定义和调用</h3><h4 id="带返回值方法的定义"><a href="#带返回值方法的定义" class="headerlink" title="带返回值方法的定义"></a>带返回值方法的定义</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230630153120783.png"
                      alt="image-20230630153120783"
                ></p>
<h4 id="带返回值方法的调用"><a href="#带返回值方法的调用" class="headerlink" title="带返回值方法的调用"></a>带返回值方法的调用</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230630171846247.png"
                      alt="image-20230630171846247"
                ></p>
<h3 id="方法的注意事项"><a href="#方法的注意事项" class="headerlink" title="方法的注意事项"></a>方法的注意事项</h3><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230630171746594.png"
                      alt="image-20230630171746594"
                ></p>
<h4 id="通用格式"><a href="#通用格式" class="headerlink" title="通用格式"></a>通用格式</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230630172934511.png"
                      alt="image-20230630172934511"
                ></p>
<h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载</p>
<ol>
<li><strong>多个方法在同一个类中</strong></li>
<li><strong>多个方法具有相同的方法名</strong></li>
<li><strong>多个方法的参数不相同，类型不同或者数量不同</strong></li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230630174259573.png"
                      alt="image-20230630174259573"
                ></p>
<h4 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fangfachongzai</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     	<span class="type">boolean</span> <span class="variable">c</span> <span class="operator">=</span> compare(<span class="number">10</span>,<span class="number">11</span>);<span class="comment">//默认int</span></span><br><span class="line">        System.out.println(c);</span><br><span class="line">        </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">d</span> <span class="operator">=</span> compare((<span class="type">long</span>)<span class="number">10</span>,(<span class="type">long</span>)<span class="number">11</span>);<span class="comment">//强制转换</span></span><br><span class="line">        System.out.println(d);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;int&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> a==b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">long</span> a,<span class="type">long</span> b)</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;long&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> a==b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">byte</span> a,<span class="type">byte</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;byte&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a==b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">short</span> a,<span class="type">short</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;short&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a==b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自动选择符合的类型</span></span><br></pre></td></tr></table></figure></div>

<h3 id="方法的参数传递"><a href="#方法的参数传递" class="headerlink" title="方法的参数传递"></a>方法的参数传递</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230630210756806.png"
                      alt="image-20230630210756806"
                ></p>
<h2 id="题目演练"><a href="#题目演练" class="headerlink" title="题目演练"></a>题目演练</h2><h3 id="1-遍历数组"><a href="#1-遍历数组" class="headerlink" title="1.遍历数组"></a>1.遍历数组</h3><p>设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如:[11,22,33,44,55]</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">pprintarr</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> [] arr =&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line">    printarr(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printarr</span><span class="params">(<span class="type">int</span> arr [])</span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i= <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i== arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">               System.out.print(arr[i]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-返回最大值"><a href="#2-返回最大值" class="headerlink" title="2.返回最大值"></a>2.返回最大值</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getmax</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanf</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span>scanf.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span>scanf.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span>scanf.nextInt();</span><br><span class="line">        </span><br><span class="line">        getMax(a,b,c);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max1</span> <span class="operator">=</span> (a&gt;b)?a:b;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> (max1&gt;c)?max1:c;</span><br><span class="line">    System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-减肥计划（switch版）"><a href="#3-减肥计划（switch版）" class="headerlink" title="3.减肥计划（switch版）"></a>3.减肥计划（switch版）</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span> (System.in);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        jianfei(w);</span><br><span class="line">       <span class="keyword">while</span>(w!=<span class="number">0</span>) &#123;</span><br><span class="line">           w = sc.nextInt();</span><br><span class="line">           jianfei(w);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">jianfei</span><span class="params">(<span class="type">int</span> w)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (w)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;跑步&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;游泳&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;慢走&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;单车&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;拳击&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;爬山&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;好好吃一顿&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="4-逢七过"><a href="#4-逢七过" class="headerlink" title="4.逢七过"></a>4.逢七过</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     printfengqi();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printfengqi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i/<span class="number">7</span>==<span class="number">0</span>||i%<span class="number">10</span>==<span class="number">7</span>||(i/<span class="number">10</span>)%<span class="number">10</span>==<span class="number">7</span>) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%4d&quot;</span>,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="5-不死神兔"><a href="#5-不死神兔" class="headerlink" title="5.不死神兔"></a>5.不死神兔</h3><p><strong>斐波那契数列</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        feibonaqie();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">feibonaqie</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> [] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">20</span>];</span><br><span class="line">        arr[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> ( i= <span class="number">2</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        arr[i]=arr[i-<span class="number">1</span>]+arr[i-<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( i= <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%5d&quot;</span>,arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="6-百钱百鸡"><a href="#6-百钱百鸡" class="headerlink" title="6.百钱百鸡"></a>6.百钱百鸡</h3><p>需求:我国古代数学家张丘建在《算经》一书中提出的数学问题:鸡翁一值钱五，鸡母一值钱三，鸡维三值钱一百钱买百鸡，问鸡翁、鸡母、鸡维各几何?</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Buyji();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Buyji</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        x=<span class="number">0</span>;</span><br><span class="line">        y=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(x= <span class="number">0</span> ;x&lt;<span class="number">20</span>;x++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(y=<span class="number">0</span>;y&lt;<span class="number">33</span>;y++)&#123;</span><br><span class="line">                z=<span class="number">100</span>-x-y;</span><br><span class="line">                <span class="keyword">if</span>(z%<span class="number">3</span>==<span class="number">0</span>&amp;&amp;(<span class="number">5</span>*x+<span class="number">3</span>*y+z/<span class="number">3</span> ==<span class="number">100</span>))&#123;</span><br><span class="line">                    System.out.printf(<span class="string">&quot;%2d,%2d,%2d\n&quot;</span>,x,y,z);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="7-数组元素求和"><a href="#7-数组元素求和" class="headerlink" title="7.数组元素求和"></a>7.数组元素求和</h3><p><font color=red>需求:</font></p>
<p>有这样的一个数组，元素是(68,27,95,88,171,996,51,210)。求出该数组中满足要求的元素和</p>
<p><font color=red>要求:</font> </p>
<p>求和的元素个位和十位都不能是7，并且只能是偶数</p>
<p><font color=red>思路:</font></p>
<p>定义一个数组，用静态初始化完成数组元素的初始化<br>定义一个求和变量，初始值是0<br>遍历数组，获取到数组中的每一个元素<br>判断该元素是否满足条件，如果满足条件就累加</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    printarrsum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printarrsum</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] arr=&#123;<span class="number">68</span>,<span class="number">27</span>,<span class="number">95</span>,<span class="number">88</span>,<span class="number">171</span>,<span class="number">996</span>,<span class="number">51</span>,<span class="number">210</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt; arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]%<span class="number">10</span>!=<span class="number">7</span>&amp;&amp;(arr[i]/<span class="number">10</span>%<span class="number">10</span>!=<span class="number">7</span>)&amp;&amp;arr[i]%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            sum+=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="8-判断数组是否相同"><a href="#8-判断数组是否相同" class="headerlink" title="8.判断数组是否相同"></a>8.判断数组是否相同</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr1=&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] arr2=&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line">    <span class="type">boolean</span> flag=comper(arr1,arr2);</span><br><span class="line">    System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">comper</span><span class="params">(<span class="type">int</span>[] arr1,<span class="type">int</span>[] arr2)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr1.length!=arr2.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i= <span class="number">0</span>;i&lt; arr1.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr1[i]!=arr2[i])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="9-查找下标"><a href="#9-查找下标" class="headerlink" title="9.查找下标"></a>9.查找下标</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        chazhao(arr, a);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            a = sc.nextInt();</span><br><span class="line"></span><br><span class="line">            chazhao(arr, a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">chazhao</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        <span class="type">int</span> idex=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span> ;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==a)&#123;</span><br><span class="line">                idex=i;</span><br><span class="line">                System.out.println(idex);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(idex==-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="10-反转输出"><a href="#10-反转输出" class="headerlink" title="10.反转输出"></a>10.反转输出</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">19</span>,<span class="number">28</span>,<span class="number">37</span>,<span class="number">46</span>,<span class="number">50</span>&#125;;</span><br><span class="line">        fanzuan(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fanzuan</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>, end = arr.length - <span class="number">1</span>; start &lt;= end; start++, end--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[start];</span><br><span class="line">            arr[start] = arr[end];</span><br><span class="line">            arr[end] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        printarr(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printarr</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(arr[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(arr[i] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="11-评分"><a href="#11-评分" class="headerlink" title="11.评分"></a>11.评分</h3><p>去掉最低最高</p>
<p>增加自我改进，使用sort排序</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(arr);</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> getmax(arr);</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> getmin(arr);</span><br><span class="line">        jianfa(arr,max,min);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getmax</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> max= arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>;i&lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&gt;max) &#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值为：&quot;</span>+max);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getmin</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> min= arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>;i&lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&lt;min) &#123;</span><br><span class="line">                min = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;最小值为：&quot;</span>+min);</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">jianfa</span> <span class="params">(<span class="type">int</span> arr [],<span class="type">int</span> max,<span class="type">int</span> min)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">score1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ;i&lt; arr.length;i++)&#123;</span><br><span class="line">            score1+=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span>score1-max-min;</span><br><span class="line">        System.out.println(<span class="string">&quot;减法：&quot;</span>+score);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;有序：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%2d&quot;</span>, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> score=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            score+=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;sort方法：&quot;</span>+score);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h3 id="初步认知"><a href="#初步认知" class="headerlink" title="初步认知"></a>初步认知</h3><p><font color=red>类的特点:</font></p>
<p>类是对象的数据类型</p>
<p>类是具有相同属性和行为的一组对象的集合</p>
<p><font color=red>对象的属性：</font></p>
<p>每个对象的每个属性都拥有特定的值</p>
<p><font color=red>对象的行为：</font></p>
<p>对象能够执行的操作</p>
<h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><p>**类:**类是对现实生活中一类具有共同属性和行为的事物的抽象</p>
<p><strong>对象</strong>:是能够看得到摸的着的真实存在的实体</p>
<p><font color=gree>类是对象的抽象<br>对象是类的实体</font></p>
<h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230701102341591.png"
                      alt="image-20230701102341591"
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类的定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String brand;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line">	<span class="comment">//成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> sendMessage&#123;</span><br><span class="line">        System.out.printIn(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230701103303343.png"
                      alt="image-20230701103303343"
                ></p>
<h5 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230701103343411.png"
                      alt="image-20230701103343411"
                ></p>
<h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;好好学习，天天向上&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doHomework</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;键盘敲烂，月薪过万&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用对象</span></span><br><span class="line">        System.out.println(s.name+<span class="string">&quot;,&quot;</span>+s.age);</span><br><span class="line">        s.name=<span class="string">&quot;lihuibear&quot;</span>;</span><br><span class="line">        s.age= <span class="number">20</span>;</span><br><span class="line">        System.out.println(s.name+<span class="string">&quot;,&quot;</span>+s.age);</span><br><span class="line">        s.study();;</span><br><span class="line">        s.doHomework();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="内存图"><a href="#内存图" class="headerlink" title="内存图"></a>内存图</h3><h4 id="单个对象"><a href="#单个对象" class="headerlink" title="单个对象"></a>单个对象</h4><h5 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230701105622363.png"
                      alt="image-20230701105622363"
                ></p>
<h5 id="调用方法成员方法"><a href="#调用方法成员方法" class="headerlink" title="调用方法成员方法"></a>调用方法成员方法</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230701105654605.png"
                      alt="image-20230701105654605"
                ></p>
<h4 id="多个对象"><a href="#多个对象" class="headerlink" title="多个对象"></a>多个对象</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230701110814901.png"
                      alt="image-20230701110814901"
                ></p>
<h4 id="多个对象指向相同"><a href="#多个对象指向相同" class="headerlink" title="多个对象指向相同"></a>多个对象指向相同</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230701111728546.png"
                      alt="image-20230701111728546"
                ></p>
<h3 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230701112735414.png"
                      alt="image-20230701112735414"
                ></p>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><h4 id="private关键字"><a href="#private关键字" class="headerlink" title="private关键字"></a><strong>private关键字</strong></h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><ul>
<li><p>是一个权限修饰符</p>
</li>
<li><p>可以修饰成员(成员变量和成员方法)</p>
</li>
<li><p>作用是保护成员不被别的类使用，被private修饰的成员只在本类中才能访问</p>
</li>
</ul>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong><font color = red size=5>注意</font></strong></h5><p>针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作</p>
<p>提供<font color = red >get变量名()</font>方法，用于获取成员变量的值，方法用<font color = green >public</font>修饰</p>
<p>提供<font color = red >set变量名(参数)</font>方法，用于设置成员变量的值，方法用<font color = green >public</font>修饰</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line"><span class="comment">//    String name;</span></span><br><span class="line"><span class="comment">//    int age;</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String n)</span> &#123;</span><br><span class="line">         name=n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">       age=a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;,&quot;</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;好好学习，天天向上&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doHomework</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;键盘敲烂，月薪过万&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用对象</span></span><br><span class="line">        s.setName(<span class="string">&quot;lihuibear&quot;</span>);</span><br><span class="line">        s.setAge(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//get方法</span></span><br><span class="line">        System.out.println(s.getName()+s.getAge());</span><br><span class="line">        <span class="comment">//show方法</span></span><br><span class="line">        s.show();</span><br><span class="line"></span><br><span class="line">        s.study();</span><br><span class="line">        s.doHomework();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h4><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Student类中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.name= name;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230701141331266.png"
                      alt="image-20230701141331266"
                ></p>
<h4 id="封装-1"><a href="#封装-1" class="headerlink" title="封装"></a>封装</h4><p><font color =red>1.封装概述</font></p>
<p>是面向对象三大特征之一 (<strong>封装，继承，多态</strong>）</p>
<p>是面向对象编程语言对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界是无法直接操作的<br><font color =red>2.封装原则</font></p>
<p>将类的某些信息隐藏在类内部，不允许外部程序直接访问,而是通过该类提供的方法来实现对隐藏信息的操作和访问成员变量private，提供对应的getXxx()&#x2F;setXxx(方法</p>
<p><font color =red>3.封装好处</font></p>
<p>通过方法来控制成员变量的操作，提高了代码的安全性把代码用方法进行封装，提高了代码的复用性</p>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><p><strong>1.构造方法的创建</strong></p>
<ul>
<li>如果没有定义构造方法，系统将给出一个默认的无参数构造方法</li>
<li>如果定义了构造方法，系统将不再提供默认的构造方法</li>
</ul>
<p><strong>2.构造方法的重载</strong></p>
<ul>
<li>如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法</li>
</ul>
<p><strong>3.推荐的使用方式</strong></p>
<ul>
<li>无论是否使用，都手工书写无参数构造方法</li>
</ul>
<h4 id="标准类制作"><a href="#标准类制作" class="headerlink" title="标准类制作"></a>标准类制作</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//show方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;,&quot;</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s1=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造方法</span></span><br><span class="line">        Student s2=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;2lihuibear&quot;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用对象</span></span><br><span class="line">        s1.setName(<span class="string">&quot;1lihuibear&quot;</span>);</span><br><span class="line">        s1.setAge(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//get方法</span></span><br><span class="line">        System.out.println(s1.getName()+<span class="string">&quot;,&quot;</span>+s1.getAge());</span><br><span class="line">       <span class="comment">// System.out.println(s2.getName()+&quot;,&quot;+s2.getAge());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//show方法</span></span><br><span class="line">        s1.show();</span><br><span class="line">        s2.show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="API的使用"><a href="#API的使用" class="headerlink" title="API的使用"></a>API的使用</h2><p>帮助文档</p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>构造方法</p>
<p>![image-20230701163912679](E:&#x2F;my firle&#x2F;STUDY&#x2F;专业课&#x2F;images&#x2F;JAVASE基础07&#x2F;image-20230701163912679.png)</p>
<h3 id="string构造方法"><a href="#string构造方法" class="headerlink" title="string构造方法"></a>string构造方法</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//public string();创建一个空白字符串对象，</span></span><br><span class="line">        String s1=<span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;s1&quot;</span>+s1);</span><br><span class="line"><span class="comment">//public string(char[] chs);根据字符数组的内容，来创建字符串对象</span></span><br><span class="line">        <span class="type">char</span>[] chs =&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        String s2=<span class="keyword">new</span> <span class="title class_">String</span>(chs);</span><br><span class="line">        System.out.println(<span class="string">&quot;s2&quot;</span>+s2);</span><br><span class="line"><span class="comment">//public string(byte[] bys);根据字节数组的内容，来创建字符串对象</span></span><br><span class="line">        <span class="type">byte</span>[] byt=&#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>&#125;;</span><br><span class="line">        String s3= <span class="keyword">new</span> <span class="title class_">String</span>(byt);</span><br><span class="line">        System.out.println(<span class="string">&quot;s3&quot;</span>+s3);</span><br><span class="line"><span class="comment">//string s =“abc”;直接赋值的方式创建字符串对象，</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span><span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;s4&quot;</span>+s4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="string对象的特点"><a href="#string对象的特点" class="headerlink" title="string对象的特点"></a>string对象的特点</h3><p>![image-20230701171311741](E:&#x2F;my firle&#x2F;STUDY&#x2F;专业课&#x2F;images&#x2F;JAVASE基础07&#x2F;image-20230701171311741.png)</p>
<h3 id="字符串的比较"><a href="#字符串的比较" class="headerlink" title="字符串的比较"></a>字符串的比较</h3><p>![image-20230701173157223](E:&#x2F;my firle&#x2F;STUDY&#x2F;专业课&#x2F;images&#x2F;JAVASE基础07&#x2F;image-20230701173157223.png)</p>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;lihuibear&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;xiaoxiong&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="type">String</span> <span class="variable">mima</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (name.equals(username) &amp;&amp; mima.equals(password)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登陆成功！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">2</span>-i == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;稍后重试！！！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;你还有&quot;</span> + (<span class="number">2</span>-i) + <span class="string">&quot;次机会&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="字符串的遍历"><a href="#字符串的遍历" class="headerlink" title="字符串的遍历"></a>字符串的遍历</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span>sc.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.println(line.length());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>;i&lt;line.length();i++)&#123; </span><br><span class="line">            System.out.println(line.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="统计字符个数"><a href="#统计字符个数" class="headerlink" title="统计字符个数"></a>统计字符个数</h4><p>1.键盘录入一个字符串，统计该字符串中大写字母字符，小写字母字符，数字字符出现的次数(不考虑其他字符)</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span>sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span>,d=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>;i&lt;line.length();i++)&#123;</span><br><span class="line">            <span class="type">char</span> ch=line.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">                a++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">                b++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                c++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                d++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;大写字母&quot;</span>+a);</span><br><span class="line">        System.out.println(<span class="string">&quot;小写字母&quot;</span>+b);</span><br><span class="line">        System.out.println(<span class="string">&quot;数字&quot;</span>+c);</span><br><span class="line">        System.out.println(<span class="string">&quot;其他&quot;</span>+d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>2.相同字母，数字多少个</p>
<p><em><strong><u>用到了后面的知识</u></strong></em></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">        Map&lt;Character, Integer&gt; charCount = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; line.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> line.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (charCount.containsKey(ch)) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> charCount.get(ch);</span><br><span class="line">                charCount.put(ch, count + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                charCount.put(ch, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Character, Integer&gt; entry : charCount.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;有&quot;</span> + entry.getValue() + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">      <span class="type">String</span> <span class="variable">ch</span> <span class="operator">=</span> fanzuan(line);</span><br><span class="line">      System.out.println(ch);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">fanzuan</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ss</span> <span class="operator">=</span><span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s.length() - <span class="number">1</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            ss+=s.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ss;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>减少空间浪费</p>
<h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><p>![image-20230701201835541](E:&#x2F;my firle&#x2F;STUDY&#x2F;专业课&#x2F;images&#x2F;JAVASE基础07&#x2F;image-20230701201835541.png)</p>
<h4 id="添加与反转"><a href="#添加与反转" class="headerlink" title="添加与反转"></a>添加与反转</h4><p>![image-20230701202705532](E:&#x2F;my firle&#x2F;STUDY&#x2F;专业课&#x2F;images&#x2F;JAVASE基础07&#x2F;image-20230701202705532.png)</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line">        <span class="comment">//空内容</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">a</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;空内容a:&quot;</span>+a);</span><br><span class="line">        <span class="comment">//自带内容</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">aa</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;lihuibear&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;自带内容aa:&quot;</span>+aa);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一般编程</span></span><br><span class="line">        a.append(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        a.append(<span class="string">&quot;hui&quot;</span>);</span><br><span class="line">        a.append(<span class="string">&quot;bear&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;一般编程a:&quot;</span>+a);</span><br><span class="line">        <span class="comment">//链式编程</span></span><br><span class="line">        a.append(<span class="string">&quot;li&quot;</span>).append(<span class="string">&quot;hui&quot;</span>).append(<span class="string">&quot;bear&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;链式编程:a:&quot;</span>+a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反转</span></span><br><span class="line">        a.reverse();</span><br><span class="line">        System.out.println(<span class="string">&quot;反转a:&quot;</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="StringBuilder和String的转化"><a href="#StringBuilder和String的转化" class="headerlink" title="StringBuilder和String的转化"></a>StringBuilder和String的转化</h4><p>![image-20230701204328254](E:&#x2F;my firle&#x2F;STUDY&#x2F;专业课&#x2F;images&#x2F;JAVASE基础07&#x2F;image-20230701204328254.png)</p>
<h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb1.append(<span class="string">&quot;lihuibear&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;append：&quot;</span>+sb1);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> sb1.toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;toString法：&quot;</span>+s1);</span><br><span class="line"></span><br><span class="line">        String s22=<span class="string">&quot;lihuibear&quot;</span>;</span><br><span class="line">        String s2= <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;lihuibear&quot;</span>);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb2</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s22);</span><br><span class="line">        System.out.println(<span class="string">&quot;构造法转换：&quot;</span>+sb2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h4><h5 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h5><p>String-&gt;StringBuilder-&gt;append-&gt;String</p>
<h5 id="字符串反转-1"><a href="#字符串反转-1" class="headerlink" title="字符串反转"></a>字符串反转</h5><p>String-&gt;StringBuilder-&gt;reverse-&gt;String</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> myreserve(line);</span><br><span class="line"></span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">myreserve</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        流程</span></span><br><span class="line"><span class="comment">        String-&gt;StringBuilder-&gt;reverse-&gt;String</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        1.String-&gt;StringBuilder</span></span><br><span class="line"><span class="comment">        StringBuilder sb=new StringBuilder(s);</span></span><br><span class="line"><span class="comment">        2.</span></span><br><span class="line"><span class="comment">        sb.reverse();</span></span><br><span class="line"><span class="comment">        3.</span></span><br><span class="line"><span class="comment">        String ss =sb.toString();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//一般方法</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        StringBuilder sb=new StringBuilder(s);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        sb.reverse();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        String ss =sb.toString();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s).reverse().toString();</span><br><span class="line">        <span class="keyword">return</span> ss;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230702165814824.png"
                      alt="image-20230702165814824"
                ></p>
<h3 id="ArrayList构造方法和添加方法"><a href="#ArrayList构造方法和添加方法" class="headerlink" title="ArrayList构造方法和添加方法"></a>ArrayList构造方法和添加方法</h3><table>
<thead>
<tr>
<th align="left">方法名</th>
<th>说明</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">public ArrayList</td>
<td>创建一个空的集合对象</td>
<td>ArrayList <String>  arry &#x3D; new ArrayList&lt;&gt;();</td>
</tr>
<tr>
<td align="left">public boolen add(E e)</td>
<td>将指定的元素追加到此集合的末尾</td>
<td>boolean b &#x3D; arry.add(“world”);</td>
</tr>
<tr>
<td align="left">public void add(int index,E element)</td>
<td>在此集合中的指定位置插入指定的元素</td>
<td>arry.add(1,lihuibear)</td>
</tr>
<tr>
<td align="left"></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left">public boolen remove(Object o)</td>
<td><strong>删除</strong>指定的元素，返回删除是否成功</td>
<td>boolen b &#x3D;arry.remove(“world”);</td>
</tr>
<tr>
<td align="left">public E remove (int index)</td>
<td>删除指定索引处的元素，返回被<strong>删除</strong>的元素</td>
<td>arry.remove(1);</td>
</tr>
<tr>
<td align="left">public E set (int index E element)</td>
<td>修改指定索引处的元素，返回被<strong>修改</strong>的元素</td>
<td>arry.set (1,“lihuibear4”);</td>
</tr>
<tr>
<td align="left">public E get(int index)</td>
<td>返回指定索引处的元素</td>
<td>arry.get(0);</td>
</tr>
<tr>
<td align="left">public int size()</td>
<td>返回集合中元素的个数</td>
<td>arry.size();</td>
</tr>
</tbody></table>
<p><font color=red size=5>注意:</font></p>
<p><strong>一切索引都不能越界</strong></p>
<h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>




<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArryListStudent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Student&gt; arry =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lihuibear0&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lihuibear1&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lihuibear2&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lihuibear3&quot;</span>,<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">        arry.add(s1);</span><br><span class="line">        arry.add(s2);</span><br><span class="line">        arry.add(s3);</span><br><span class="line">        arry.add(s4);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i= <span class="number">0</span>;i&lt; arry.size();i++)&#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> arry.get(i);</span><br><span class="line"></span><br><span class="line">            System.out.println(s.getName()+<span class="string">&quot; &quot;</span>+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArryListStudent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入录入的学生人数&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            addStudent(array);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printStudent(array);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生姓名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生年龄：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        s.setName(name);</span><br><span class="line">        s.setAge(age);</span><br><span class="line"></span><br><span class="line">        array.add(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printStudent</span> <span class="params">(ArrayList&lt;Student&gt; array)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ;i&lt;array.size();i++) &#123;</span><br><span class="line">            Student s= array.get(i);</span><br><span class="line">            System.out.println(s.getName()+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<h4 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">gaiStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;输入你想要修应该的学生的学号&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(&quot;输入学生新姓名&quot;);</span></span><br><span class="line"><span class="comment">//        String name = sc.nextLine();</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;输入学生新年龄&quot;);</span></span><br><span class="line"><span class="comment">//        String age = sc.nextLine();</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;输入学生新地址&quot;);</span></span><br><span class="line"><span class="comment">//        String address = sc.nextLine();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        Student s = new Student();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        s.setId(id);</span></span><br><span class="line"><span class="comment">//        s.setName(name);</span></span><br><span class="line"><span class="comment">//        s.setAge(age);</span></span><br><span class="line"><span class="comment">//        s.setAddress(address); </span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入你想要修应该的内容name输入1 age输入2 address输入3 退出输入4&quot;</span>);</span><br><span class="line"></span><br><span class="line">            s.setId(id);</span><br><span class="line">           </span><br><span class="line">  </span><br><span class="line">           </span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> <span class="variable">nn</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (nn) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入学生新姓名&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">                    s.setName(name);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入学生新年龄&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">                    s.setAge(age);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入学生新地址&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">                    s.setAddress(address);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;谢谢使用！&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (student.getId().equals(id)) &#123;</span><br><span class="line">                array.set(i, s);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;没有该学生&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">gaiStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;输入你想要修应该的学生的学号&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">ss</span> <span class="operator">=</span> array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (ss.getId().equals(id)) &#123;</span><br><span class="line">                array.set(i, s);</span><br><span class="line">                <span class="keyword">if</span> (s.getId().equals(id)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入学生新姓名&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入学生新年龄&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入学生新地址&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">                    s.setId(id);</span><br><span class="line">                    s.setName(name);</span><br><span class="line">                    s.setAge(age);</span><br><span class="line">                    s.setAddress(address);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;没有该学生，重新输入&quot;</span>);</span><br><span class="line">                    gaiStudent(array);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (student.getId().equals(id)) &#123;</span><br><span class="line">                array.set(i, s);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="练习-学生管理系统"><a href="#练习-学生管理系统" class="headerlink" title="练习 学生管理系统"></a>练习 学生管理系统</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Studentall;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String id, String name, String age, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Studentall;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lihuibear.ArryListStudent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Studentmain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;-----------欢迎来到学生管理系统----------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;1 添加学生&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;2 删除学生&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;3 查看全部学生&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;4 修改学生&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;5 退出&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你选择&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (num) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;添加学生&quot;</span>);</span><br><span class="line">                    addStudent(array);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;删除学生&quot;</span>);</span><br><span class="line">                    deleteStudent(array);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;查看全部学生&quot;</span>);</span><br><span class="line">                    findStudent(array);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;修改学生&quot;</span>);</span><br><span class="line">                    gaiStudent(array);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;谢谢使用！&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;输入学生学号id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        <span class="keyword">if</span>(idsame(array,id))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入学生姓名&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入学生年龄&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入学生地址&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">            s.setId(id);</span><br><span class="line">            s.setName(name);</span><br><span class="line">            s.setAge(age);</span><br><span class="line">            s.setAddress(address);</span><br><span class="line"></span><br><span class="line">            array.add(s);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;添加成功！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;已经有该同学了！！！重新输入&quot;</span>);</span><br><span class="line">            addStudent(array);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要删除学生的学号&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"><span class="comment">//        String name = sc.nextLine();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (s.getId().equals(id)) &#123;<span class="comment">//||s.getName().equals(name)</span></span><br><span class="line">                array.remove(i);</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;没有该学生！！！&quot;</span>);</span><br><span class="line">                deleteStudent(array);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找全部</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;学号\t\t\t姓名\t\t\t年龄\t\t地址&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> array.get(i);</span><br><span class="line">            System.out.println(s.getId() + <span class="string">&quot;\t&quot;</span> + s.getName() + <span class="string">&quot;\t&quot;</span> + s.getAge() + <span class="string">&quot;岁&quot;</span> + <span class="string">&quot;\t&quot;</span> + s.getAddress());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">gaiStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;输入你想要修应该的学生的学号&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">ss</span> <span class="operator">=</span> array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (ss.getId().equals(id)) &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;输入学生新姓名&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">                System.out.println(<span class="string">&quot;输入学生新年龄&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">                System.out.println(<span class="string">&quot;输入学生新地址&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">                s.setId(id);</span><br><span class="line">                s.setName(name);</span><br><span class="line">                s.setAge(age);</span><br><span class="line">                s.setAddress(address);</span><br><span class="line"></span><br><span class="line">                array.set(i, s);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;没有该学生，重新输入&quot;</span>);</span><br><span class="line">                gaiStudent(array);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断相同Id</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">idsame</span><span class="params">(ArrayList&lt;Student&gt; array, String id)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">sid</span> <span class="operator">=</span> array.get(i);</span><br><span class="line">            <span class="keyword">if</span>(sid.getId().equals(id))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230703204912977-16897368635141.png"
                      alt="image-20230703204912977"
                ></p>
<h3 id="继承的好处和弊端"><a href="#继承的好处和弊端" class="headerlink" title="继承的好处和弊端"></a>继承的好处和弊端</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230703205828634-16897368635152.png"
                      alt="image-20230703205828634"
                ></p>
<h3 id="继承中变量访问的特点"><a href="#继承中变量访问的特点" class="headerlink" title="继承中变量访问的特点"></a>继承中变量访问的特点</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230703214928217-16897368635154.png"
                      alt="image-20230703214928217"
                ></p>
<h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><table>
<thead>
<tr>
<th>关键字</th>
<th>访问对象</th>
<th>代码</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>子类局部</td>
<td>age</td>
</tr>
<tr>
<td>this</td>
<td>子类成员</td>
<td>this.age</td>
</tr>
<tr>
<td>super</td>
<td>父类成员</td>
<td>super.age</td>
</tr>
</tbody></table>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230703215657195-16897368635153.png"
                      alt="image-20230703215657195"
                ></p>
<h3 id="继承中，构造方法的访问特点"><a href="#继承中，构造方法的访问特点" class="headerlink" title="继承中，构造方法的访问特点"></a>继承中，构造方法的访问特点</h3><p>子类初始化前一定要完成父类数据的初始化</p>
<p>子类构造方法<strong>默认第一句为super(),访问父类无参构造方法</strong></p>
<table>
<thead>
<tr>
<th>父类</th>
<th>子类</th>
<th>测试类</th>
</tr>
</thead>
<tbody><tr>
<td>无参构造方法<br />带参构造方法</td>
<td>无参构造方法</td>
<td>父类无参<br />子类无参</td>
</tr>
<tr>
<td></td>
<td>带参构造方法</td>
<td>父类无参<br />子类带参</td>
</tr>
<tr>
<td>带参构造方法</td>
<td>super()<br />无参构造方法</td>
<td>父类带参<br />子类无参</td>
</tr>
<tr>
<td></td>
<td>super()<br />带参构造方法</td>
<td>父类带参<br />子类带参</td>
</tr>
</tbody></table>
<h3 id="继承中，成员方法的访问特点"><a href="#继承中，成员方法的访问特点" class="headerlink" title="继承中，成员方法的访问特点"></a>继承中，成员方法的访问特点</h3><p>通过子类对象访问一个方法</p>
<ul>
<li>子类成员范围找</li>
<li>父类成员范围找</li>
<li>如果都没有就报错(不考虑父亲的父亲…)</li>
</ul>
<h3 id="super内存图"><a href="#super内存图" class="headerlink" title="super内存图"></a>super内存图</h3><pre><code>    ![image-20230704074956004](../images/JAVASE基础09/image-20230704074956004.png)   
</code></pre>
<h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><p>@Override的使用检查方法重写是否有误</p>
<h4 id="方法重写注意事项"><a href="#方法重写注意事项" class="headerlink" title="方法重写注意事项"></a><strong>方法重写注意事项</strong></h4><p>父类中，私有方法，子类不能继承，</p>
<h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4><p>public  &gt; 默认 &gt; 私有</p>
<h3 id="继承的注意事项"><a href="#继承的注意事项" class="headerlink" title="继承的注意事项"></a>继承的注意事项</h3><p>不能同时继承多个类</p>
<p>支持多层继承</p>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="包package"><a href="#包package" class="headerlink" title="包package"></a>包package</h3><h4 id="什么是包"><a href="#什么是包" class="headerlink" title="什么是包"></a>什么是包</h4><p>包其实就是文件夹，方便对类进行分类管理</p>
<h4 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h4><p><strong>import  包名</strong></p>
<p>简化代码书写</p>
<h3 id="修饰符-1"><a href="#修饰符-1" class="headerlink" title="修饰符"></a>修饰符</h3><h4 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><table>
<thead>
<tr>
<th>修饰符</th>
<th>同一个类</th>
<th>同一个包中<br />子类和无关类</th>
<th>不同包的子类</th>
<th>不同包的无关类</th>
</tr>
</thead>
<tbody><tr>
<td>private</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>默认</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>pbulic</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
</tbody></table>
<h4 id="状态修饰符-final"><a href="#状态修饰符-final" class="headerlink" title="状态修饰符 final"></a>状态修饰符 final</h4><p>关键字<strong>fianl</strong>是最终的意思，可以修饰成员方法，成员变量，类</p>
<h5 id="状态修饰符-final特点"><a href="#状态修饰符-final特点" class="headerlink" title="状态修饰符 final特点"></a>状态修饰符 final特点</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230704102127067-16897368635155.png"
                      alt="image-20230704102127067"
                ></p>
<h5 id="修饰局部变量"><a href="#修饰局部变量" class="headerlink" title="修饰局部变量"></a>修饰局部变量</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230704102557407-16897368635156.png"
                      alt="image-20230704102557407"
                ></p>
<h4 id="静态修饰符-static"><a href="#静态修饰符-static" class="headerlink" title="静态修饰符 static"></a>静态修饰符 static</h4><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230704104733725-16897368635158.png"
                      alt="image-20230704104733725"
                ></p>
<h5 id="静态修饰符-static访问特点"><a href="#静态修饰符-static访问特点" class="headerlink" title="静态修饰符 static访问特点"></a>静态修饰符 static访问特点</h5><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230704105339122-16897368635157.png"
                      alt="image-20230704105339122"
                ></p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230704105603247-16897368635159.png"
                      alt="image-20230704105603247"
                ></p>
<h3 id="多态中成员访问特点"><a href="#多态中成员访问特点" class="headerlink" title="多态中成员访问特点"></a>多态中成员访问特点</h3><p><strong>成员变量</strong>:编译看左边，执行看左边-&gt;&gt;都看父类</p>
<p>**成员方法:**编译看左边，执行看右边</p>
<h3 id="多态的好处和弊端"><a href="#多态的好处和弊端" class="headerlink" title="多态的好处和弊端"></a>多态的好处和弊端</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230704135451773-168973686351510.png"
                      alt="image-20230704135451773"
                ></p>
<h3 id="多态中的转型"><a href="#多态中的转型" class="headerlink" title="多态中的转型"></a>多态中的转型</h3><p><strong>向上转型</strong></p>
<p>​				从子到父          Animal a &#x3D; new Cat();</p>
<p>​				父类引用指向子类对象 a.eat();</p>
<p><strong>向下转型</strong></p>
<p>​				从父到子          Animal a &#x3D; new Cat();<br>​											Cat c &#x3D;(Cat)a;</p>
<p>​				父类引用转为子类对象c.eat();  c.game;</p>
<h3 id="多态转型内存图"><a href="#多态转型内存图" class="headerlink" title="多态转型内存图"></a>多态转型内存图<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230704141523511-168973686351511.png"
                      alt="image-20230704141523511"
                ></h3><p>​		</p>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><p>在Java中，一个<strong>没有方法体</strong>的方法应该定义为<strong>抽象方法</strong>，而类中如果<strong>有抽象方法</strong>，该类必须<strong>定义为抽象类</strong></p>
<p><strong>关键字</strong>：<strong>abstract</strong></p>
<h4 id="抽象类的特点"><a href="#抽象类的特点" class="headerlink" title="抽象类的特点"></a>抽象类的特点</h4><p><strong>抽象类和抽象方法必须使用abstract 关键字修饰</strong></p>
<p>public abstract class 类名</p>
<p>public abstract void eat();</p>
<p><strong>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类</strong></p>
<p><strong>抽象类不能实例化</strong></p>
<p>抽象类如何实例化——&gt;参照多态的方式，通过子类对象实例化，这叫抽象类多态</p>
<p><strong>抽象类的子类</strong></p>
<p>要么重写抽象类中的所有抽象方法</p>
<p>要么是抽象类</p>
<h4 id="抽象类的成员特点"><a href="#抽象类的成员特点" class="headerlink" title="抽象类的成员特点"></a>抽象类的成员特点</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230704152335956-168973686351512.png"
                      alt="image-20230704152335956"
                ></p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>接口就是一种<strong>公共的规范标准</strong>，只要符合规范标准，大家都可以通用</p>
<h3 id="接口特点"><a href="#接口特点" class="headerlink" title="接口特点"></a>接口特点</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230704154603975-168973686351513.png"
                      alt="image-20230704154603975"
                ></p>
<h3 id="接口的成员特点"><a href="#接口的成员特点" class="headerlink" title="接口的成员特点"></a>接口的成员特点</h3><p><strong>成员变量</strong><br>只能是常量</p>
<p>默认修饰符: public static final</p>
<p><strong>构造方法</strong></p>
<p>接口<font color  =red>没有构造方法</font>，因为接口主要是对行为进行抽象的，是没有具体存在</p>
<p><font color  =red>一个类如果没有父类，默认继承自Object类成员方法</font></p>
<p><strong>只能是抽象方法</strong></p>
<p>默认修饰符: public abstract</p>
<h3 id="类和接口的关系"><a href="#类和接口的关系" class="headerlink" title="类和接口的关系"></a>类和接口的关系</h3><h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230704163637301-168973686351514.png"
                      alt="image-20230704163637301"
                >强调</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230704164909076-168973686351515.png"
                      alt="image-20230704164909076"
                ></p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230704165251197-168973686351516.png"
                      alt="image-20230704165251197"
                ></p>
<h2 id="形参和返回值（再看看）"><a href="#形参和返回值（再看看）" class="headerlink" title="形参和返回值（再看看）"></a>形参和返回值（<u>再看看</u>）</h2><h3 id="类名作为形参和返回值"><a href="#类名作为形参和返回值" class="headerlink" title="类名作为形参和返回值"></a>类名作为形参和返回值</h3><p>方法的形参是类名，其实需要的是该类的对象</p>
<p>方法的返回值是类名，其实返回的是该类的对象</p>
<h3 id="抽象类名作为形参和返回值"><a href="#抽象类名作为形参和返回值" class="headerlink" title="抽象类名作为形参和返回值"></a>抽象类名作为形参和返回值</h3><p>方法的形参是抽象类名，其实需要的是该抽象类的子类对象</p>
<p>方法的返回值是抽象类名，其实返回的是该抽象类的子类对象</p>
<h3 id="接口名作为形参和返回值"><a href="#接口名作为形参和返回值" class="headerlink" title="接口名作为形参和返回值"></a>接口名作为形参和返回值</h3><p>方法的形参是接口名，其实需要的是该接口的实现类对象</p>
<p>方法的返回值是接口名，其实返回的是该接口的实现类对象</p>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230704201446218-168973686351517.png"
                      alt="image-20230704201446218"
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inter</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//show();</span></span><br><span class="line">        <span class="type">Inter</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inter</span>();</span><br><span class="line">        i.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>​	<strong>格式:</strong></p>
<p>外部类名.内部类名.对象名&#x3D;外部类对象.内部类对象</p>
<p>​	<strong>范例:</strong></p>
<p> Outer.Inner.oi &#x3D; new Outer0.new Inner();</p>
<p><strong>但是常用</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230704205517276-168973686351519.png"
                      alt="image-20230704205517276"
                ></p>
<h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>在方法中定义的类</p>
<p>外界是无法直接使用，</p>
<p>需要在<strong>方法内部创建对象</strong>并使用该类可以<strong>直接访问外部类的成员</strong>，也可以访问<strong>方法内的局部变量</strong> </p>
<h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><h4 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230704210801749-168973686351518.png"
                      alt="image-20230704210801749"
                ></p>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p><strong>无输出</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230704211136543-168973686351520.png"
                      alt="image-20230704211136543"
                ></p>
<p><strong>对象调方法</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230704211747651-168973686351521.png"
                      alt="image-20230704211747651"
                ></p>
<h3 id="匿名内部类在开发中的使用"><a href="#匿名内部类在开发中的使用" class="headerlink" title="匿名内部类在开发中的使用"></a>匿名内部类在开发中的使用</h3><p>课程p193</p>
<p>减少类的书写</p>
<h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><h4 id="math常用方法"><a href="#math常用方法" class="headerlink" title="math常用方法"></a>math常用方法</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230704213248012-168973686351522.png"
                      alt="image-20230704213248012"
                ></p>
<h3 id="System"><a href="#System" class="headerlink" title="System"></a>System</h3><h4 id="system常用方法"><a href="#system常用方法" class="headerlink" title="system常用方法"></a>system常用方法</h4><table>
<thead>
<tr>
<th>方法名</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>public static void exit (int status)</td>
<td>终止当前运行的Java 虚拟机，非零表示异常终止</td>
</tr>
<tr>
<td>public static currentTimeMillis()</td>
<td>返回当前时间(以毫秒为单位)</td>
</tr>
</tbody></table>
<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><h4 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h4><p>Object是类层次结构的根，每个类都可以将 Object作为超类。所有类都直接或者间接的继承自该类<br>构造方法: public Object()<br>回想面向对象中，为什么说子类的构造方法默认访问的是父类的无参构造方法?因为它们的顶级父类只有无参构造方法</p>
<h5 id="to-String"><a href="#to-String" class="headerlink" title="to String()"></a>to String()</h5><p>返回对象的字符串表示形式。建议所有子类重写该方法，自动生成</p>
<p>建议每次重写Alt+Insert</p>
<h5 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h5><p>比较对象是否相等。默认比较地址，重写可以比较内容，自动生成</p>
<h4 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h4><h5 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h5><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public static String toString(int[] a)</td>
<td>返回指定数组的内容的字符串表示形式</td>
</tr>
<tr>
<td>public static void sort(int[] a)</td>
<td>按照数字顺序排列指定的数组</td>
</tr>
</tbody></table>
<p>工具类的设计思想</p>
<p>构造方法用private修饰</p>
<p>成员用 public static修饰</p>
<h3 id="基本类型包装类"><a href="#基本类型包装类" class="headerlink" title="基本类型包装类"></a>基本类型包装类</h3><h4 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h4><p>将基本数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据常用的操作之一:<strong>用于基本数据类型与字符串之间的转换</strong></p>
<table>
<thead>
<tr>
<th>基本数据类型</th>
<th>包装类</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody></table>
<h4 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230705082827654-168973686351523.png"
                      alt="image-20230705082827654"
                ></p>
<h4 id="int和String的相互转换"><a href="#int和String的相互转换" class="headerlink" title="int和String的相互转换"></a>int和String的相互转换</h4><h5 id="int——-String"><a href="#int——-String" class="headerlink" title="int——-String"></a>int——-String</h5><ol>
<li><p>“”+number 进行连接</p>
</li>
<li><p>public static String &#x3D; String.valueOf(number)</p>
<p>String s &#x3D; String.valueOf(number);</p>
</li>
</ol>
<h5 id="String——int"><a href="#String——int" class="headerlink" title="String——int"></a>String——int</h5><ol>
<li><p>String——-Integer—-int</p>
<p>Integer i &#x3D; Integer.valueOf(s);</p>
<p>int x &#x3D; i.intValue;</p>
</li>
<li><p>​       int y &#x3D; Integer.parseInt(s);</p>
</li>
</ol>
<h4 id="案例-字符串数组排序"><a href="#案例-字符串数组排序" class="headerlink" title="案例 字符串数组排序"></a>案例 字符串数组排序</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;11 66 45 77 33 8 3 7&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把字符串中的数字数据存储到一个int类型的数组中</span></span><br><span class="line">        String[] array = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[array.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = Integer.parseInt(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%4d&quot;</span>, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出排序完的数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%4d&quot;</span>, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                sb.append(arr[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(arr[i]).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ss</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        System.out.println(ss);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="自动装箱与拆箱"><a href="#自动装箱与拆箱" class="headerlink" title="自动装箱与拆箱"></a>自动装箱与拆箱</h4><p>装箱:把基本数据类型转换为对应的包装类类型</p>
<p>拆箱:把包装类类型转换为对应的基本数据类型</p>
<h6 id="装箱"><a href="#装箱" class="headerlink" title="装箱"></a>装箱</h6><p>Integer i &#x3D; Integer.valueOf(100);</p>
<h6 id="自动装箱"><a href="#自动装箱" class="headerlink" title="自动装箱"></a>自动装箱</h6><p>Integer ii &#x3D; 100；</p>
<p>注意：ii！&#x3D;null</p>
<h6 id="拆箱"><a href="#拆箱" class="headerlink" title="拆箱"></a>拆箱</h6><p>ii &#x3D; i.intValue()+200;</p>
<h6 id="自动拆箱"><a href="#自动拆箱" class="headerlink" title="自动拆箱"></a>自动拆箱</h6><p>ii+&#x3D;200；</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230705095829078-168973686351524.png"
                      alt="image-20230705095829078"
                ></p>
<h3 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h3><h4 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h4><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public Date()</td>
<td>分配一个 Date对象，并初始化，以便它代表它被分配的时间，精确到毫秒</td>
</tr>
<tr>
<td>public Date(long data)</td>
<td>分配一个 Date对象，并将其初始化为表示从标准基准时间起指定的毫秒数</td>
</tr>
</tbody></table>
<h5 id="Data常用方法"><a href="#Data常用方法" class="headerlink" title="Data常用方法"></a>Data常用方法</h5><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public long  getTime()</td>
<td>获取的是日期对象从1970年1月1日00:00:00到现在的毫秒值</td>
</tr>
<tr>
<td>public void setTime(long time)</td>
<td>设置时间，给的是毫秒值</td>
</tr>
</tbody></table>
<h4 id="SimpleDateFormat-类"><a href="#SimpleDateFormat-类" class="headerlink" title="SimpleDateFormat 类"></a>SimpleDateFormat 类</h4><h5 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h5><p>SimpleDateFormat是一个具体的类，用于以区域设置敏感的方式格式化和解析日期。我们重点学习日期格式化和解析</p>
<p>日期和时间格式由日期和时间模式字符串指定，在期和时间模式字符串中，从A到以及从a到引号的字母被解释为表示日期或时间字符串的组件的模式字母</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230705103144151-168973686351525.png"
                      alt="image-20230705103144151"
                ></p>
<h5 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230705103225255-168973686351526.png"
                      alt="image-20230705103225255"
                ></p>
<p><strong>例：从 Date 到 string和从 String 到 Date</strong></p>
<p><strong>从 Date 到 string</strong> </p>
<p>public final String format(Date date)    将日期格式化成日期&#x2F;时间字符串解析:</p>
<p><strong>从 String 到 Date</strong></p>
<p>public Date parse (String source)       从给定字符串的开始解析文本以生成日期</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230705103814462-168973686351527.png"
                      alt="image-20230705103814462"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230705103757194-168973686351528.png"
                      alt="image-20230705103757194"
                ></p>
<h5 id="日期工具类的编写"><a href="#日期工具类的编写" class="headerlink" title="日期工具类的编写"></a>日期工具类的编写</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230705110055604-168973686351529.png"
                      alt="image-20230705110055604"
                ></p>
<h4 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h4><h5 id="概述-8"><a href="#概述-8" class="headerlink" title="概述"></a>概述</h5><p>Calendar为某一时刻和一组日历字段之间的转换提供了一些方法，并为操作日历字段提供了一些方法</p>
<p>Calendar提供了一个类方法getlnstance 用于获取 Calendar对象，</p>
<p>其日历字段已使用当前日期和时间初始化:Calendar rightNow &#x3D;Calendar.getlnstance();</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230705111325386-168973686351530.png"
                      alt="image-20230705111325386"
                ></p>
<h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public int get(int filed)</td>
<td>返回给定日历字段的值</td>
</tr>
<tr>
<td>public abstract  void add(int filed,int amount)</td>
<td>根据日历的规则，将指定的时间量添加或减去给定的日历字段</td>
</tr>
<tr>
<td>public final  void set(int year,int month,int date)</td>
<td>设置当前日历的年月日</td>
</tr>
</tbody></table>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="概述-9"><a href="#概述-9" class="headerlink" title="概述"></a>概述</h3><p>异常:就是程序出现了不正常的情况</p>
<h3 id="异常体系"><a href="#异常体系" class="headerlink" title="异常体系"></a>异常体系</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230705151207927-168973686351531.png"
                      alt="image-20230705151207927"
                ></p>
<h3 id="JVM的默认处理方案"><a href="#JVM的默认处理方案" class="headerlink" title="JVM的默认处理方案"></a>JVM的默认处理方案</h3><p>如果程序出现了问题，我们<strong>没有做任何处理</strong>，</p>
<p>最终JVM会做默认的处理：</p>
<p>把异常的名称，异常原因及异常出现的位置等信息输出在了控制台</p>
<p>程序停止执行</p>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>try….catch</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230705152247845-168973686351532.png"
                      alt="image-20230705152247845"
                ></p>
<h4 id="三种异常处理的显示方法"><a href="#三种异常处理的显示方法" class="headerlink" title="三种异常处理的显示方法"></a>三种异常处理的显示方法</h4><p>多用e.printStackTrace();</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230705153617248-168973686351533.png"
                      alt="image-20230705153617248"
                ></p>
<h3 id="编译时异常和运行时异常的区别"><a href="#编译时异常和运行时异常的区别" class="headerlink" title="编译时异常和运行时异常的区别"></a>编译时异常和运行时异常的区别</h3><p>Java 中的异常被分为两大类: <font color=red><strong>编译时异常</strong></font>和<font color=red><strong>运行时异常</strong></font>也被称为<font color=red><strong>受检异常</strong></font>和<font color=red><strong>非受检异常</strong></font></p>
<p>所有的<strong>RuntimeException类及其子类</strong>被称为运行时异常，</p>
<p><strong>其他</strong>的异常都是编译时异常</p>
<h4 id="处理方案"><a href="#处理方案" class="headerlink" title="处理方案"></a>处理方案</h4><p><strong>编译时异常</strong>:必须显示处理，否则程序就会发生错误，无法通过编译</p>
<p><strong>运行时异常</strong>:无需显示处理，也可以和编译时异常一样处理</p>
<h3 id="异常处理之-throws"><a href="#异常处理之-throws" class="headerlink" title="异常处理之 throws"></a>异常处理之 throws</h3><p>格式：</p>
<p>throws 异常类名；</p>
<p><strong>注意</strong>:这个格式是跟在方法的括号后面的</p>
<p>只是抛出了异常，还是不能继续运行</p>
<p><strong>编译时异常必须要进行处理</strong>，两种外理方案:tvcatch或者throws，如果采用throws 这种方案，将来谁调，用谁处理</p>
<p><strong>运行时异常可以不处理</strong>，出现问题后，需要我们回来修改代码</p>
<h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>例子</p>
<p>1</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> myyichang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScoreException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ScoreException</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ScoreException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>2</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> myyichang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkScore</span><span class="params">(<span class="type">int</span> score)</span> <span class="keyword">throws</span> ScoreException &#123;</span><br><span class="line">        <span class="keyword">if</span>(score&lt;<span class="number">0</span>||score&gt;<span class="number">100</span>)&#123;</span><br><span class="line"><span class="comment">//            throw  new ScoreException();</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ScoreException</span>(<span class="string">&quot;分数有误&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;分数正常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>3</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> myyichang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLOutput;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teachertext</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;输入分数&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t.checkScore(score);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ScoreException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230705161536717-168973686351534.png"
                      alt="image-20230705161536717"
                ></p>
<h2 id="集合体系结构"><a href="#集合体系结构" class="headerlink" title="集合体系结构"></a>集合体系结构</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>集合类的特点:提供一种存储空间可变的存储模型，存储的数据容量可以随时发生改变</p>
<h3 id="集合类体系结构"><a href="#集合类体系结构" class="headerlink" title="集合类体系结构"></a>集合类体系结构</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230706072422605-168973686351535.png"
                      alt="image-20230706072422605"
                ></p>
<h3 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h3><h4 id="collection-常用方法"><a href="#collection-常用方法" class="headerlink" title="collection 常用方法"></a>collection 常用方法</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230706073453808-168973686351536.png"
                      alt="image-20230706073453808"
                ></p>
<h4 id="Collection-集合的遍历"><a href="#Collection-集合的遍历" class="headerlink" title="Collection 集合的遍历"></a>Collection 集合的遍历</h4><p>lterator:迭代器，集合的专用遍历方式</p>
<p>lterator &lt; E &gt;iterator(): 返回此集合中元素的迭代器，通过集合的iterator()方法得到</p>
<p>迭代器是通过集合的iterator()方法得到的，所以我们说它是依赖于集合而存在的</p>
<h5 id="lterator中的常用方法"><a href="#lterator中的常用方法" class="headerlink" title="lterator中的常用方法"></a>lterator中的常用方法</h5><p>E next(): 返回选代中的下一个元素</p>
<p>boolean hasNext(): 如果选代具有更多元素，则返回true </p>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h4 id="List集合概述"><a href="#List集合概述" class="headerlink" title="List集合概述"></a>List集合概述</h4><p>有序集合(也称为序列)，用户可以精确控制列表中每个元素的插入位置。用户可以通过整数索引访问元素并搜索列表中的元素与Set集合不同，列表通常允许重复的元素</p>
<p>List &lt; String &gt; list  &#x3D; new ArrayList&lt; String&gt;();cv  </p>
<h4 id="List集合特点"><a href="#List集合特点" class="headerlink" title="List集合特点"></a>List集合特点</h4><p>有序:<strong>存储和取出的元素顺序一致</strong></p>
<p>可重复:存储的元素<strong>可以重复</strong></p>
<h4 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法"></a>特有方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void add (int index E element)</td>
<td>在此集合中的指定位置插入指定的元素</td>
</tr>
<tr>
<td>E remove(int index)</td>
<td>删除指定索引处的元素，返回被删除的元素</td>
</tr>
<tr>
<td>E set (int index,E element)</td>
<td>修改指定索引处的元素，返回被修改的元素</td>
</tr>
<tr>
<td>E get(int  index)</td>
<td>返回指定索引处的元素</td>
</tr>
</tbody></table>
<h4 id="并发修改异常"><a href="#并发修改异常" class="headerlink" title="并发修改异常"></a>并发修改异常</h4><p>通过迭代器遍历的 过程中，通过集合获取元素，预期修改值与实际修改值不一样</p>
<h4 id="Listlterator列表迭代器"><a href="#Listlterator列表迭代器" class="headerlink" title="Listlterator列表迭代器"></a>Listlterator列表迭代器</h4><p>通过List集合的listlterator0方法得到，所以说它是List集合特有的迭代器用于允许程序员沿任一方向遍历列表的列表迭代器，在迭代期间修改列表，并获取列表中迭代器的当前位置 			 </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230706095745716-168973686351637.png"
                      alt="image-20230706095745716"
                ></p>
<h4 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230706102012271-168973686351638.png"
                      alt="image-20230706102012271"
                ></p>
<h4 id="使用情况"><a href="#使用情况" class="headerlink" title="使用情况"></a>使用情况</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230706103323967-168973686351639.png"
                      alt="image-20230706103323967"
                ></p>
<h4 id="常见数据结构"><a href="#常见数据结构" class="headerlink" title="常见数据结构"></a>常见数据结构</h4><h5 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230706103635241-168973686351640.png"
                      alt="image-20230706103635241"
                ></p>
<h5 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230706104438062-168973686351641.png"
                      alt="image-20230706104438062"
                ></p>
<h5 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230706104642601.png"
                      alt="image-20230706104642601"
                ></p>
<h5 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230706105435033-168973686351642.png"
                      alt="image-20230706105435033"
                ></p>
<h4 id="List集合子类特点"><a href="#List集合子类特点" class="headerlink" title="List集合子类特点"></a>List集合子类特点</h4><p>List集合常用子类: ArrayList，LinkedList</p>
<p><strong>ArrayList</strong>: 底层数据结构是数组，查询快，增删慢</p>
<p><strong>LinkedList</strong>: 底层数据结构是链表，查询慢，增删快</p>
<h4 id="LinkedLIst集合的特有功能"><a href="#LinkedLIst集合的特有功能" class="headerlink" title="LinkedLIst集合的特有功能"></a>LinkedLIst集合的特有功能</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230706112439692.png"
                      alt="image-20230706112439692"
                ></p>
<h3 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h3><h4 id="概述-10"><a href="#概述-10" class="headerlink" title="概述"></a>概述</h4><p>Set集合特点</p>
<p>不包含重复元素的集合</p>
<p>没有带索引的方法，所以不能使用普通for循环遍历</p>
<h4 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230706140333701.png"
                      alt="image-20230706140333701"
                ></p>
<h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p><strong>HashSet集合特点：</strong></p>
<ol>
<li><p>底层数据结构是哈希表</p>
</li>
<li><p>对集合的迭代顺序不作任何保证，也就是说不保证存储和取出的元素顺序一致没有带索的方法，所以不能使用普通for循环遍历</p>
</li>
<li><p>由于是Set集合，所以是不包含重复元素的集合</p>
</li>
</ol>
<h4 id="HashSet集合保证元素唯一性源码分析"><a href="#HashSet集合保证元素唯一性源码分析" class="headerlink" title="HashSet集合保证元素唯一性源码分析"></a>HashSet集合保证元素唯一性源码分析</h4><p>HashSet集合存储元素<br>要保证元素唯一性，需要重写hashCode()和equals()</p>
<p><strong>HashSet集合添加一个元素的过程</strong></p>
<p>   <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230706144012539.png"
                      alt="image-20230706144012539"
                ></p>
<h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p>JDK8之前，底层采用<font color=red>数组+链表</font>实现，可以说是一个元素为链表的数组</p>
<p>JDK8以后，在长度比较长的时候，底层实现了优化</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230706144630257.png"
                      alt="image-20230706144630257"
                ></p>
<h4 id="LinkedHashSet集合特点"><a href="#LinkedHashSet集合特点" class="headerlink" title="LinkedHashSet集合特点"></a>LinkedHashSet集合特点</h4><p>1:哈希表和链表实现的Set接口，具有可预测的迭代次序</p>
<p>2:由链表保证元素有序，也就是说元素的存储和取出顺序是一致的</p>
<p>3:由哈希表保证元素唯一，也就是说没有重复的元素 </p>
<h4 id="TreeSet集合特点"><a href="#TreeSet集合特点" class="headerlink" title="TreeSet集合特点"></a>TreeSet集合特点</h4><p>元素有序，这里的顺序不是指存储和取出的顺序，而是按照一定的规则进行排序，具体排序方式取决于构造方法<br>        TreeSet(): 根据其元素的自然排序进行排序<br>        TreeSet(Comparator comparaton): 根据指定的比较器进行排序</p>
<p>没有带索引的方法,所以<strong>不能使用普通for循环遍历</strong></p>
<p>由于是Set集合，所以<strong>不包含重复元素的集合</strong></p>
<h4 id="自然排序Comparable的使用"><a href="#自然排序Comparable的使用" class="headerlink" title="自然排序Comparable的使用"></a>自然排序Comparable的使用</h4><p><strong>存储学生对象并遍历，创建TreeSet集合使用无参构造方法要求:按照年龄从小到大排序，年龄相同时，按照姓名的字母顺序排序</strong><br><strong>结论</strong><br>用TreeSet集合存储自定义对象，无参构造方法使用的是自然排序对元素进行排序的自然排序，就是让元素所属的类实现Comparable接口，重写compareTo(To)方法重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写</p>
<h4 id="比较器排序Comparator的使用"><a href="#比较器排序Comparator的使用" class="headerlink" title="比较器排序Comparator的使用"></a>比较器排序Comparator的使用</h4><p><strong>存储学生对象并遍历，创建TreeSet集合使用带参构造方法要求:按照年龄从小到大排序，年龄相同时，按照姓名的字母顺序排序</strong><br><strong>结论</strong></p>
<ol>
<li><p>用TreeSet集合存储自定义对象，带参构造方法使用的是<strong>比较器排序</strong>对元素进行排序的</p>
</li>
<li><p>比较器排序，就是<strong>让集合构造方法接收Comparator的实现类对象</strong>，重写compare(To1,To2)方法</p>
</li>
<li><p>重写方法时一定要注意排序规则必须按照要求的主要条件和次要条件来写</p>
</li>
</ol>
<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h4 id="概述-11"><a href="#概述-11" class="headerlink" title="概述"></a>概述</h4><p>泛型:是JDK5中引入的特性，它提供了编译时类型安全检测机制，该机制允许在编译时检测到非法的类型它的<strong>本质是参数化类型</strong>，也就是说所操作的数据类型被指定为一个参数</p>
<p>提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢?</p>
<p>顾名思义，<strong>就是将类型由原来的具体的类型参数化，然后在使用&#x2F;调用时传入具体的类型</strong></p>
<p>这种参数类型可以用在类、方法和接口中，分别被称为<strong>泛型类</strong>、泛型方法、<strong>泛型接口</strong> </p>
<h4 id="格式及好处"><a href="#格式及好处" class="headerlink" title="格式及好处"></a>格式及好处</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230706211424720.png"
                      alt="image-20230706211424720"
                ></p>
<h4 id="泛型方法改进"><a href="#泛型方法改进" class="headerlink" title="泛型方法改进"></a>泛型方法改进</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230706213835277.png"
                      alt="image-20230706213835277"
                ></p>
<h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><h4 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h4><p>为了表示各种泛型List的父类，可以使用类型通配符</p>
<ol>
<li><p>类型通配符:&lt;?&gt;</p>
</li>
<li><p>List&lt;?&gt;:表示元素类型未知的List，它的元素可以匹配任何的类型这种带通配符的</p>
</li>
<li><p>List仅表示它是各种泛型List的父类，并不能把元素添加到其中</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230706214440880.png"
                      alt="image-20230706214440880"
                ></p>
</li>
</ol>
<h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>可变参数又称参数个数可变，用作方法的形参出现，那么方法参数个数就是可变的了</p>
<p><strong>格式:修饰符返回值类型方法名(数据类型…变量名)</strong></p>
<p><strong>范例: public static int sum(int…a){}</strong></p>
<p><strong>实际上封装到了数组a中</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230706215406297.png"
                      alt="image-20230706215406297"
                ></p>
<p><strong>有多个参数，可变参数放到后面</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230706215611119.png"
                      alt="image-20230706215611119"
                ></p>
<h4 id="可变参数的使用"><a href="#可变参数的使用" class="headerlink" title="可变参数的使用"></a>可变参数的使用</h4><h5 id="Arrays工具类中有一个静态方法"><a href="#Arrays工具类中有一个静态方法" class="headerlink" title="Arrays工具类中有一个静态方法:"></a><strong>Arrays工具类中有一个静态方法:</strong></h5><p>public static &lt; T &gt;List&lt; T &gt; asList (T…a): 返回由指定数组支持的固定大小的列表</p>
<p>不支持add,remove  因为会改变集合的大小</p>
<p>支持set(1,”lihuibear”);</p>
<h5 id="List接口中有一个静态方法"><a href="#List接口中有一个静态方法" class="headerlink" title="List接口中有一个静态方法:"></a><strong>List接口中有一个静态方法:</strong></h5><p>public static &lt; E &gt; List&lt; E &gt; of (E…elements): 返回包含任意数量元素的不可变列表</p>
<p>不支持增删改操作</p>
<h5 id="Set接口中有一个静态方法"><a href="#Set接口中有一个静态方法" class="headerlink" title="Set接口中有一个静态方法:"></a><strong>Set接口中有一个静态方法:</strong></h5><p>public static&lt; E &gt;Set&lt; E &gt; of (E…elements) : 返回一个包含任意数量元素的不可变集合</p>
<p>不支持增删，没有改的操作</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230707074403066.png"
                      alt="image-20230707074403066"
                ></p>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="概述-12"><a href="#概述-12" class="headerlink" title="概述"></a>概述</h4><p>Interface Map&lt;K，V&gt;</p>
<p>K:键的类型，V:值的类型</p>
<p>将键映射到值的对象；不能包含重复的键;每个键可以映射到最多一个值</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230707075422953.png"
                      alt="image-20230707075422953"
                ></p>
<h4 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230707075553811.png"
                      alt="image-20230707075553811"
                ></p>
<h4 id="Map集合的获取功能"><a href="#Map集合的获取功能" class="headerlink" title="Map集合的获取功能"></a>Map集合的获取功能</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230707080222435.png"
                      alt="image-20230707080222435"
                ></p>
<h4 id="Map集合的遍历"><a href="#Map集合的遍历" class="headerlink" title="Map集合的遍历"></a>Map集合的遍历</h4><p><strong>1</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230707083951761.png"
                      alt="image-20230707083951761"
                ></p>
<p><strong>2</strong></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230707084237523.png"
                      alt="image-20230707084237523"
                ></p>
<h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><h4 id="概述-13"><a href="#概述-13" class="headerlink" title="概述"></a>概述</h4><p>是针对集合操作的工具类</p>
<h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><p>publicstatic&lt;T extends Comparable&lt;? super T &gt;&gt; void sort（List&lt; T &gt; list): 将指定的列表按升序排序</p>
<p>publicstatic void reverse(List&lt;?&gt; list): 反转指定列表中元素的顺序</p>
<p>public static void shuffle(List&lt;?&gt;list): 使用默认的随机源随机排列指定的列表</p>
<p> IO流</p>
<h3 id="概述-14"><a href="#概述-14" class="headerlink" title="概述"></a>概述</h3><p>IO:输入&#x2F;输出(Input&#x2F;Output)</p>
<p>流:是一种抽象概念，是对数据传输的总称。也就是说数据在设备间的传输称为流，流的本质是数据传输</p>
<p>lO流就是用来处理设备间数据传输问题的</p>
<p><strong>常见的应用</strong>:文件复制;文件上传;文件下载</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230710171838076.png"
                      alt="image-20230710171838076"
                ></p>
<p>一般来说，我们说IO流的分类是按照数据类型来分的</p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>那么这两种流都在什么情况下使用呢?<br>    如果数据通过Window自带的记事本软件打开，我们还可以读懂里面的内容否则使用字节流。如果你不知道该使用哪种类型的流，就使用字节流。</p>
<h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><h4 id="概述-15"><a href="#概述-15" class="headerlink" title="概述"></a>概述</h4><p>File:它是文件和目录路径名的抽象表示<br>文件和目录是可以通过File封装成对象的<br>对于File而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名而已。它可以是存在的，也可以是不存在的.将来是要通过具体的操作把这个路径的内容转换为具体存在的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230710111307144.png"
                      alt="image-20230710111307144"
                ></p>
<h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230710112157398.png"
                      alt="image-20230710112157398"
                ></p>
<h4 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230710161730192-16889770712261.png"
                      alt="image-20230710161730192"
                ></p>
<h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p><strong>递归概述:</strong></p>
<p>以编程的角度来看，递归指的是方法定义中调用方法本身的现象</p>
<p><strong>递归解决问题的思路:</strong></p>
<p>把一个复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解递归策</p>
<p>略只需少量的程序就可描述出解题过程所需要的多次重复计算</p>
<h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><h4 id="字节流写数据"><a href="#字节流写数据" class="headerlink" title="字节流写数据"></a>字节流写数据</h4><p><strong>字节流抽象基类</strong></p>
<p>InputStream: 这个抽象类是表示字节输入流的所有类的超类</p>
<p>OutputStream:这个抽象类是表示字节输出流的所有类的超类</p>
<p>子类名特点:子类名称都是以其父类名作为子类名的后缀</p>
<p>FileOutputStream: 文件输出流用于将数据写入File</p>
<p>FileOutputStream(Stringname): 创建文件输出流以指定的名称写入文件</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230710180637561.png"
                      alt="image-20230710180637561"
                ></p>
<h4 id="字节流写数据的3种方式"><a href="#字节流写数据的3种方式" class="headerlink" title="字节流写数据的3种方式"></a>字节流写数据的3种方式</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230710185409736.png"
                      alt="image-20230710185409736"
                ></p>
<h4 id="字节流写数据的两个小问题"><a href="#字节流写数据的两个小问题" class="headerlink" title="字节流写数据的两个小问题"></a>字节流写数据的两个小问题</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230710194356609.png"
                      alt="image-20230710194356609"
                ></p>
<h4 id="异常处理-1"><a href="#异常处理-1" class="headerlink" title="异常处理"></a>异常处理</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230710194711617.png"
                      alt="image-20230710194711617"
                ></p>
<h4 id="字节流读数据"><a href="#字节流读数据" class="headerlink" title="字节流读数据"></a>字节流读数据</h4><p>一次读一个</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//标准格式</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;FILE\\lihuibear002.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> by;</span><br><span class="line">        <span class="keyword">while</span>((by=fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)by);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230710205502183.png"
                      alt="image-20230710205502183"
                ></p>
<h4 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h4><p><strong>字节缓冲流:</strong><br>BufferOutputStream:  该类实现缓冲输出流。通过设置这样的输出流，应用程序可以向底层输出流写入字节，而不必为写入的每个字节导致底层系统的调用</p>
<p>BuferedinputStream: 创建BufferedInputStream将创建一个内部缓冲区数组。当从流中读取或跳过字节时，内部缓冲区将根据需要从所包含的输入流中重新填充，一次很多字节</p>
<p><strong>构造方法:</strong><br>字节缓冲输出流: </p>
<p>BufferedOutputStream(OutputStream out)</p>
<p>字节缓冲输入流: </p>
<p>BufferedInputStream(InputStream in）</p>
<p>字节缓冲流<font color =red>仅仅提供缓冲区</font>,而真正的读写数据还得依靠基本的字节流对象进行操作</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230710213953404.png"
                      alt="image-20230710213953404"
                ></p>
<h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230710220906985.png"
                      alt="image-20230710220906985"
                ></p>
<h4 id="编码表"><a href="#编码表" class="headerlink" title="编码表"></a>编码表</h4><h5 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230711073631529.png"
                      alt="image-20230711073631529"
                ></p>
<h5 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h5><p>是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等计算机要准确的存储和识别各种字符集符号，就需要进行字符编码，一套字符集必然至少有一套字符编码.常见字符集有ASCII字符集、GBXXX字符集、Unicode字符集等</p>
<h4 id="编码解码问题"><a href="#编码解码问题" class="headerlink" title="编码解码问题"></a>编码解码问题</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230711075726562.png"
                      alt="image-20230711075726562"
                ></p>
<p>​    </p>
<h5 id="字符流抽象基本类"><a href="#字符流抽象基本类" class="headerlink" title="字符流抽象基本类"></a>字符流抽象基本类</h5><p>Reader:字符输入流的抽象类</p>
<p>Writer:字符输出流的抽象类</p>
<p><strong>字符流中和编码解码问题相关的两个类</strong></p>
<p>InputStreamReader</p>
<p>OutputStreamWriter</p>
<h4 id="字符流写数据的5种方式"><a href="#字符流写数据的5种方式" class="headerlink" title="字符流写数据的5种方式"></a>字符流写数据的5种方式</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230711082147384.png"
                      alt="image-20230711082147384"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230711083230734.png"
                      alt="image-20230711083230734"
                ></p>
<h4 id="字符流读数据的2种方法"><a href="#字符流读数据的2种方法" class="headerlink" title="字符流读数据的2种方法"></a>字符流读数据的2种方法</h4><p>和字节流一样</p>
<h4 id="字符缓冲流复制文件"><a href="#字符缓冲流复制文件" class="headerlink" title="字符缓冲流复制文件"></a>字符缓冲流复制文件</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230711094122993.png"
                      alt="image-20230711094122993"
                ></p>
<h4 id="字符缓冲流特有功能"><a href="#字符缓冲流特有功能" class="headerlink" title="字符缓冲流特有功能"></a>字符缓冲流特有功能</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230711095104741.png"
                      alt="image-20230711095104741"
                ></p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230711100144004.png"
                      alt="image-20230711100144004"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230711100209064.png"
                      alt="image-20230711100209064"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230711100302768.png"
                      alt="image-20230711100302768"
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//成绩文本</span></span><br><span class="line"><span class="keyword">package</span> lihuibear002;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import com.sun.org.apache.xpath.internal.operations.String;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stuedntscore</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student s1, Student s2)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> s2.getSum() - s1.getSum();</span><br><span class="line">                <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> num == <span class="number">0</span> ? s1.getScore_CH() - s2.getScore_CH() : num;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> num2 == <span class="number">0</span> ? s1.getScore_MA() - s2.getScore_MA() : num2;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num4</span> <span class="operator">=</span> num3 == <span class="number">0</span> ? s1.getName().compareTo(s2.getName()) : num3;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> num4;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();<span class="comment">//???</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;语文：&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">score_CH</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;数学：&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">score_MA</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;英语：&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">score_EN</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">            s.setName(name);</span><br><span class="line">            s.setScore_CH(score_CH);</span><br><span class="line">            s.setScore_MA(score_MA);</span><br><span class="line">            s.setScore_EN(score_EN);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            ts.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;FILE\\lihuibear004.txt&quot;</span>));</span><br><span class="line">        <span class="keyword">for</span> (Student s : ts) &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            sb.append(s.getName()).append(<span class="string">&quot;,&quot;</span>).append(s.getScore_CH()).append(<span class="string">&quot;,&quot;</span>).append(s.getScore_MA()).append(<span class="string">&quot;,&quot;</span>).append(s.getScore_EN()).append(<span class="string">&quot;,&quot;</span>).append(s.getSum());</span><br><span class="line">            bw.write(sb.toString());</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear002;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> score_CH;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> score_MA;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> score_EN;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> score_CH, <span class="type">int</span> score_MA, <span class="type">int</span> score_EN)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.score_CH = score_CH;</span><br><span class="line">        <span class="built_in">this</span>.score_MA = score_MA;</span><br><span class="line">        <span class="built_in">this</span>.score_EN = score_EN;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScore_CH</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score_CH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore_CH</span><span class="params">(<span class="type">int</span> score_CH)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.score_CH = score_CH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScore_MA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score_MA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore_MA</span><span class="params">(<span class="type">int</span> score_MA)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.score_MA = score_MA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScore_EN</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score_EN;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore_EN</span><span class="params">(<span class="type">int</span> score_EN)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.score_EN = score_EN;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.score_CH+<span class="built_in">this</span>.score_MA+<span class="built_in">this</span>.score_EN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="复制文件的异常处理"><a href="#复制文件的异常处理" class="headerlink" title="复制文件的异常处理"></a>复制文件的异常处理</h4><h5 id="标准写法"><a href="#标准写法" class="headerlink" title="标准写法"></a>标准写法</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230711173600559.png"
                      alt="image-20230711173600559"
                ></p>
<h5 id="改进-1"><a href="#改进-1" class="headerlink" title="改进"></a>改进</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230711173506161.png"
                      alt="image-20230711173506161"
                ></p>
<h3 id="特殊操作流"><a href="#特殊操作流" class="headerlink" title="特殊操作流"></a>特殊操作流</h3><p>System类中有两个静态的成员变量:<br><strong>publicstatic finallnputStreamin:</strong> <u>标准输入流</u>。通常该流对应于键盘输入或由主机环境或用户指定的另一个输入源</p>
<p><strong>publicstatic final PrintStream out:</strong> <u>标准输出流</u>。通常该流对应于显示输出或由主机环境或用户指定的另一个输出目标</p>
<h4 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h4><h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230711192656375.png"
                      alt="image-20230711192656375"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230711193738515.png"
                      alt="image-20230711193738515"
                ></p>
<h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230711193945844.png"
                      alt="image-20230711193945844"
                ></p>
<h5 id="字节打印流"><a href="#字节打印流" class="headerlink" title="字节打印流"></a>字节打印流</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230711204341168.png"
                      alt="image-20230711204341168"
                ></p>
<h5 id="字符打印流"><a href="#字符打印流" class="headerlink" title="字符打印流"></a>字符打印流</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230711204257162.png"
                      alt="image-20230711204257162"
                ></p>
<h4 id="对象序列化流"><a href="#对象序列化流" class="headerlink" title="对象序列化流"></a>对象序列化流</h4><p><strong>对象序列化</strong>:就是将对象保存到磁盘中，或者在网络中传输对象这种机制就是使用一个字节序列表示一个对象，该字节序列包念:对象的类型、对象的数据和对象中存储的属性等信息字节序列写到文件之后，相当于文件中持久保存了一个对象的信息反之，该字节序列还可以从文件中读取回来，重构对象，对它进行反序列化</p>
<p><strong>要实现序列化和反序列化就要使用对象序列化流和对象反序列化流:</strong></p>
<p><strong>对象序列化流</strong>:ObiectOutputStream</p>
<p><strong>对象反序列化流</strong>:ObjectlnputStream</p>
<h5 id="对象序列化流-1"><a href="#对象序列化流-1" class="headerlink" title="对象序列化流"></a>对象序列化流</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230711210331783.png"
                      alt="image-20230711210331783"
                ></p>
<p><font color=red size =5 >注意</font></p>
<p>一个对象要想被序列化，该对象所属的类必须必须实现Serializable 接口</p>
<p>Serializable是一个<strong>标记接口</strong>，实现该接口，<strong>不需要重写任何方法</strong></p>
<h5 id="对象反序列化流"><a href="#对象反序列化流" class="headerlink" title="对象反序列化流:"></a><strong>对象反序列化流</strong>:</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230711212100733.png"
                      alt="image-20230711212100733"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230711212709648.png"
                      alt="image-20230711212709648"
                ></p>
<h4 id="seeriaVersionUID-transient"><a href="#seeriaVersionUID-transient" class="headerlink" title="seeriaVersionUID &amp;transient"></a>seeriaVersionUID &amp;transient</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230712080610639.png"
                      alt="image-20230712080610639"
                ></p>
<h4 id="Properties概述"><a href="#Properties概述" class="headerlink" title="Properties概述"></a>Properties概述</h4><p>是一个Map体系的集合类</p>
<p>Properties可以保存到流中或从流中加载</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230712081413989.png"
                      alt="image-20230712081413989"
                ></p>
<h5 id="properties特有方法"><a href="#properties特有方法" class="headerlink" title="properties特有方法"></a>properties特有方法</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230712081519903.png"
                      alt="image-20230712081519903"
                ></p>
<p><strong>例子：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230712083003175.png"
                      alt="image-20230712083003175"
                ></p>
<h5 id="properties与IO流结合"><a href="#properties与IO流结合" class="headerlink" title="properties与IO流结合"></a>properties与IO流结合</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230712084110408.png"
                      alt="image-20230712084110408"
                ></p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="实现多线程"><a href="#实现多线程" class="headerlink" title="实现多线程"></a>实现多线程</h3><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><p>进程:是<strong>正在运行</strong>的程序</p>
<ul>
<li>是系统进行资源分配和调用的独立单位</li>
<li>每一个进程都有它自己的内存空间和系统资源</li>
</ul>
<h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><p> 线程:是进程中的单个顺序控制流，<strong>是一条执行路径</strong></p>
<ul>
<li>单线程:一个进程如果只有一条执行路径，则称为单线程程序</li>
<li>多线程:一个进程如果有多条执行路径，则称为多线程程序</li>
</ul>
<h4 id="多线程的实现方法1"><a href="#多线程的实现方法1" class="headerlink" title="多线程的实现方法1"></a>多线程的实现方法1</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230712112859848.png"
                      alt="image-20230712112859848"
                ></p>
<h4 id="设置和获取线程名称"><a href="#设置和获取线程名称" class="headerlink" title="设置和获取线程名称"></a>设置和获取线程名称</h4><p>Thread类中设置和获取线程名称的方法</p>
<ul>
<li>void setName (String name): 将此线程的名称更改为等于参数name</li>
<li>String getName0:返回此线程的名称</li>
<li>通过构造方法也可以设置线程名称</li>
</ul>
<p>如何获取main0方法所在的线程名称?</p>
<p>public static Thread currentThread(): 返回对当前正在执行的线程对象的引用</p>
<h4 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h4><p>线程有两种调度模型</p>
<ul>
<li>**分时调度模型:**所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间片</li>
<li>**抢占式调度模型:**优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个，优先级高的线程获取的CPU时间片相对多一些</li>
</ul>
<p><strong>Java使用的是抢占式调度模型</strong></p>
<p>假如计算机只有一个CPU，那么CPU 在某一个时刻只能执行一条指令，线程只有得到CPU时间片，也就是使用权才可以执行指令。所以说多线程程序的执行是有<strong>随机性</strong>，因为谁抢到CPU的使用权是不一定的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230712144047074.png"
                      alt="image-20230712144047074"
                ></p>
<p>&#x2F;&#x2F;System.out.println(Thread.MAX PRIORITY);10</p>
<p> &#x2F;&#x2F;System.out.println(Thread.MIN PRIORITY);1</p>
<p> &#x2F;&#x2F;System.out.println(Thread.NORM PRIORITY); &#x2F;&#x2F;5默认<br>&#x2F;&#x2F;设置正确的优先级</p>
<p>tp1.setPriority(5);</p>
<p>tp2.setPriority(10)；</p>
<p>tp3.setPriority(1);</p>
<p>设置优先级仅仅表示抢占cpu的概率高，不是一定要是优先级最大的先执行</p>
<h4 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230712155349566.png"
                      alt="image-20230712155349566"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230712155329106.png"
                      alt="image-20230712155329106"
                ></p>
<h4 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230712155952003.png"
                      alt="image-20230712155952003"
                ></p>
<h4 id="多线程的实现方式2"><a href="#多线程的实现方式2" class="headerlink" title="多线程的实现方式2"></a>多线程的实现方式2</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230712162618792.png"
                      alt="image-20230712162618792"
                ></p>
<h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><h4 id="数据安全问题的解决"><a href="#数据安全问题的解决" class="headerlink" title="数据安全问题的解决"></a>数据安全问题的解决</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230712171102762.png"
                      alt="image-20230712171102762"
                ></p>
<h4 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230712194103318.png"
                      alt="image-20230712194103318"
                ></p>
<h5 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230712202007332.png"
                      alt="image-20230712202007332"
                ></p>
<h4 id="线程安全的类"><a href="#线程安全的类" class="headerlink" title="线程安全的类"></a>线程安全的类</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230712202310346.png"
                      alt="image-20230712202310346"
                ></p>
<h4 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h4><p>虽然我们可以理解同步代码块和同步方法的锁对象问题，但是我们并没有直接看到在哪里加上了锁，在哪里释放了锁为了更清晰的表达如何加锁和释放锁，JDK5以后提供了一个新的锁对象<strong>Lock</strong></p>
<p>Lock实现提供比使用synchronized方法和语句可以获得更广泛的锁定操作Lock中提供了获得锁和释放锁的方法</p>
<ul>
<li><strong>void lock(): 获得锁</strong></li>
<li><strong>void unlock():释放锁</strong></li>
</ul>
<p>Lock是接口不能直接实例化，这里采用它的实现类ReentrantLock来实例化</p>
<p>ReentrantLock的构造方法</p>
<p><strong>ReentrantLock()</strong>:创建一个ReentrantLock的实例</p>
<h3 id="生产者消费者"><a href="#生产者消费者" class="headerlink" title="生产者消费者"></a>生产者消费者</h3><h4 id="概述-16"><a href="#概述-16" class="headerlink" title="概述"></a>概述</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230712205826542.png"
                      alt="image-20230712205826542"
                ></p>
<h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230712205912234.png"
                      alt="image-20230712205912234"
                ></p>
<h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230712212647777.png"
                      alt="image-20230712212647777"
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    //定义一个成员变量，表述第x瓶奶</span></span><br><span class="line"><span class="comment">    private int milk;</span></span><br><span class="line"><span class="comment">    //定义一个成员变量表示奶箱的状态</span></span><br><span class="line"><span class="comment">    private boolean state = false;</span></span><br><span class="line"><span class="comment">    //提供存储牛奶和获取牛奶的操作</span></span><br><span class="line"><span class="comment">    public synchronized void putmilk(int milk)&#123;</span></span><br><span class="line"><span class="comment">        //如果有奶，等待</span></span><br><span class="line"><span class="comment">        if(state)&#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                wait();</span></span><br><span class="line"><span class="comment">            &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //如果没有奶，送</span></span><br><span class="line"><span class="comment">        this.milk = milk;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;生产送第&quot;+this.milk+&quot;奶&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //生产完，改变状态</span></span><br><span class="line"><span class="comment">        state =true;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //唤醒</span></span><br><span class="line"><span class="comment">        notifyAll();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    public synchronized void getmilk()&#123;</span></span><br><span class="line"><span class="comment">        //如果没有，等待生产</span></span><br><span class="line"><span class="comment">        if(!state)&#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                wait();</span></span><br><span class="line"><span class="comment">            &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //有就消费</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;用户拿到第&quot;+this.milk+&quot;奶&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //消费完改变状态</span></span><br><span class="line"><span class="comment">        state = false;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //唤醒</span></span><br><span class="line"><span class="comment">        notifyAll();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*private Box b;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Prodocer(Box b) &#123;</span></span><br><span class="line"><span class="comment">        this.b = b;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public void run() &#123;</span></span><br><span class="line"><span class="comment">        for (int i = 1; i &lt;= 5; i++) &#123;</span></span><br><span class="line"><span class="comment">            b.putmilk(i);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*private Box b;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Customer(Box b) &#123;</span></span><br><span class="line"><span class="comment">        this.b = b;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public void run() &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        while (true) &#123;</span></span><br><span class="line"><span class="comment">            b.getmilk();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Box b = new Box();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Prodocer p = new Prodocer(b);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Customer c = new Customer(b);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Thread t1 = new Thread(p);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Thread t2 = new Thread(c);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        t1.start();</span></span><br><span class="line"><span class="comment">        t2.start();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="网路编程"><a href="#网路编程" class="headerlink" title="网路编程"></a>网路编程</h2><h3 id="网络编程入门"><a href="#网络编程入门" class="headerlink" title="网络编程入门"></a>网络编程入门</h3><h4 id="概述-17"><a href="#概述-17" class="headerlink" title="概述"></a>概述</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230713081247436.png"
                      alt="image-20230713081247436"
                ></p>
<ul>
<li>计算机网络<br>是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统 </li>
<li>网络编程<br>在网络通信协议下，实现网络互连的不同计算机上运行的程序间可以进行数据交换</li>
</ul>
<h4 id="网络编程三要素"><a href="#网络编程三要素" class="headerlink" title="网络编程三要素"></a>网络编程三要素</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230713082029084.png"
                      alt="image-20230713082029084"
                ></p>
<h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230713082610416.png"
                      alt="image-20230713082610416"
                ></p>
<h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><p>ipconfig:查看本机IP地址</p>
<p>ping IP 地址:检查网络是否连通</p>
<h5 id="特殊IP地址"><a href="#特殊IP地址" class="headerlink" title="特殊IP地址"></a>特殊IP地址</h5><p>127.0.0.1:是回送地址，可以代表本机地址，一般用来测试使用</p>
<h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><p>端口:设备上应用程序的唯一标识<br>端口号:用两个字节表示的整数，它的取值范围是0—65535。其中，0—1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败</p>
<h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><p>协议:计算机网络中，连接和通信的规则被称为网络通信协议</p>
<h5 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a><strong>UDP协议</strong></h5><ul>
<li>用户数据报协议(UserDatagram Protocol)</li>
<li>UDP是无连接通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。简单来说，当一台计算机向另外一台计算机发送数据时，发送端不会确认接收端是否存在，就会发出数据，同样接收端在收到数据时，也不会向发送端反馈是否收到数据<br>由于使用UDP协议消耗资源小，通信效率高，所以通常都会用于音频、视频和普通数据的传输</li>
</ul>
<h5 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a><strong>TCP协议</strong></h5><ul>
<li>传输控制协议(Transmission Control Protocol)</li>
<li>TCP协议是面向连接的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据它提供了两台计算机之间可靠无差错的数据传输。在TCP连接中必须要明确客户端与服务器端，由客户端向服务端发出连接请求，每次连接的创建都需要经过“三次握手”</li>
</ul>
<p>三次握手:TCP协议中，在发送数据的准备阶段，客户端与服务器之间的<strong>三次交互</strong>，以保证连接的可靠</p>
<ul>
<li>第一次握手，客户端向服务器端发出连接请求，等待服务器确认</li>
<li>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求</li>
<li>第三次握手，客户端再次向服务器端发送确认信息，确认连接</li>
</ul>
<p>完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性TCP协议可以保证传输数的安全，所以应用十分广泛。例如上传文件、下载文件、浏览网页等</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230713100538249.png"
                      alt="image-20230713100538249"
                ></p>
<h3 id="UDP通信程序"><a href="#UDP通信程序" class="headerlink" title="UDP通信程序"></a>UDP通信程序</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>UDP协议是一种<strong>不可靠</strong>的网络协议，它在通信的两端<strong>各建立一个Socket对象</strong>，但是这两个Socket只是发送，接收数据的对象因此对于基于UDP协议的通信双方而言，<strong>没有所谓的客户端和服务器的概念</strong>，Java提供了DatagramSocket类作为基于UDP协议的Socket</p>
<h4 id="UDP发送数据"><a href="#UDP发送数据" class="headerlink" title="UDP发送数据"></a>UDP发送数据</h4><p> 发送数据的步骤</p>
<ul>
<li>创建发送端的Socket对象(DatagramSocket)<br>DatagramSocket()</li>
<li>创建数据，并把数据打包<br>DatagramPacket(bytel] buf, int length, lnetAddress address, int port)调用</li>
<li>DatagrlmSocket对象的方法发送数据<br>void send(DatagramPacket p)</li>
<li>关闭发送端<br>void close()</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230713101614454.png"
                      alt="image-20230713101614454"
                ></p>
<h4 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230713202923623.png"
                      alt="image-20230713202923623"
                ></p>
<h4 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bear003;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">10001</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">byte</span>[] by = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(by, by.length);</span><br><span class="line"></span><br><span class="line">            ds.receive(dp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        byte[] data = dp.getData();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        int len = dp.getLength();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        String dataString = new String(data, 0, len);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;数据为：&quot;+dataString);</span></span><br><span class="line">            System.out.println(<span class="string">&quot;数据为：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(dp.getData(), <span class="number">0</span>, dp.getLength()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//        ds.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> bear003;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Senddemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;886&quot;</span>.equals(line))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] by = line.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(by, by.length, InetAddress.getByName(<span class="string">&quot;192.168.188.39&quot;</span>), <span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line">            ds.send(dp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="TCP通信程序"><a href="#TCP通信程序" class="headerlink" title="TCP通信程序"></a>TCP通信程序</h3><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>TCP通信协议是一种可靠的网络协议，它在通信的两端各建立-个Socket对象，从而在通信的两端形成网络虚拟链路旦建立了虚拟的网络链路，两端的程序就可以通过虚拟链路进行通信Java对基于TCP协议的的网络提供了良好的封装，使用Socket对象来代表两端的通信端口，并通过Socket产生I0流来进行网络通信Java为客户端提供了Socket类，为服务器端提供了ServerSocket类</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230713202202033.png"
                      alt="image-20230713202202033"
                ></p>
<h4 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230713202838762.png"
                      alt="image-20230713202838762"
                ></p>
<h4 id="接收-1"><a href="#接收-1" class="headerlink" title="接收"></a>接收</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230714080754600.png"
                      alt="image-20230714080754600"
                ></p>
<h4 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230714104527722.png"
                      alt="image-20230714104527722"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230714104458701.png"
                      alt="image-20230714104458701"
                ></p>
<table>
<thead>
<tr>
<th>void</th>
<th>shutdownInput()  将此套接字的输入流放置在“流的末尾”。</th>
</tr>
</thead>
<tbody><tr>
<td>void</td>
<td>shutdownOutput()  禁用此套接字的输出流。</td>
</tr>
</tbody></table>
<h4 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230714080708442.png"
                      alt="image-20230714080708442"
                ></p>
<p>其他案例见<a class="link"   href="https://github.com/lihuibear4/NET.git" >https://github.com/lihuibear4/NET.git <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><h3 id="概述-18"><a href="#概述-18" class="headerlink" title="概述"></a>概述</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230714161840174.png"
                      alt="image-20230714161840174"
                ></p>
<h3 id="标准格式"><a href="#标准格式" class="headerlink" title="标准格式"></a>标准格式</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230714162845678.png"
                      alt="image-20230714162845678"
                ></p>
<p>Lambda表达式的格式</p>
<ul>
<li>格式:(形式参数)-&gt;代码块)</li>
<li>形式参数:如果有多个参数，参数之间用逗号隔开，如果没有参数，留空即可</li>
<li>-&gt;:由英文中画线和大于符号组成，固定写法。代表指向动作</li>
<li>代码块:是我们具体要做的事情，也就是以前我们写的方法体内容</li>
</ul>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>Lambda表达式的使用前提</p>
<ul>
<li>有一个接口</li>
<li>接口中有且仅有一个抽象方法</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230714170232303.png"
                      alt="image-20230714170232303"
                ></p>
<h3 id="省略模式"><a href="#省略模式" class="headerlink" title="省略模式"></a>省略模式</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230714171051735.png"
                      alt=" "
                ></p>
<h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>使用Lambda必须要有接口，并且要求接口中有且仅有一个抽象方法</li>
<li>必须有上下文环境，才能推导出Lambda对应的接口</li>
</ul>
<p>根据局部变量的赋值得知Lambda对应的接口: Runnable r&#x3D; () -&gt;System.out.println(“Lambda表达式”);</p>
<p>根据调用方法的参数得知Lambda对应的接口: new Thread(() -&gt; System.out,println(“Lambda表达式”)).start();</p>
<h3 id="Lambda表达式和匿名内部类的区别"><a href="#Lambda表达式和匿名内部类的区别" class="headerlink" title="Lambda表达式和匿名内部类的区别"></a>Lambda表达式和匿名内部类的区别</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230714212715823.png"
                      alt="image-20230714212715823"
                ></p>
<h2 id="接口的组成更新"><a href="#接口的组成更新" class="headerlink" title="接口的组成更新"></a>接口的组成更新</h2><h3 id="概述-19"><a href="#概述-19" class="headerlink" title="概述"></a>概述</h3><p>接口的组成</p>
<ul>
<li>常量<br>public static final</li>
<li>抽象方法<br>public abstract</li>
</ul>
<h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><p>接口中默认方法的定义格式:</p>
<p>格式:publicdefault返回值类型方法名(参数列表)</p>
<p>范例: public <strong>default</strong> void show30{}</p>
<p>接口中默认方法的注意事项默认方法不是抽象方法，所以不强制被重写。但是可以被重写，</p>
<p>写的时候去掉d<strong>efault关键字</strong>public可以省略，<strong>default不能省略</strong></p>
<h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230715082233108.png"
                      alt="image-20230715082233108"
                ></p>
<h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230715084012477.png"
                      alt="image-20230715084012477"
                ></p>
<h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230715092103844.png"
                      alt="image-20230715092103844"
                ></p>
<h3 id="方法引用符"><a href="#方法引用符" class="headerlink" title="方法引用符"></a>方法引用符</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230715092301493.png"
                      alt="image-20230715092301493"
                ></p>
<h3 id="Lambda表达式支持的方法引用"><a href="#Lambda表达式支持的方法引用" class="headerlink" title="Lambda表达式支持的方法引用"></a>Lambda表达式支持的方法引用</h3><p><strong>常见的引用方式</strong></p>
<ul>
<li>引用类方法</li>
<li>引用对象的实例方法</li>
<li>引用类的实例方法</li>
<li>引用构造器</li>
</ul>
<h3 id="引用类方法的使用"><a href="#引用类方法的使用" class="headerlink" title="引用类方法的使用"></a>引用类方法的使用</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230715103508264.png"
                      alt="image-20230715103508264"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230715144604612.png"
                      alt="image-20230715144604612"
                ></p>
<p><strong>&#x2F;&#x2F;Lambda表达式被类的实例方法替代的时候</strong></p>
<p><strong>&#x2F;&#x2F;第一个参数作为调用者</strong></p>
<p><strong>&#x2F;&#x2F;后面的参数全部传递给该方法作为参数</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230715151143470.png"
                      alt="image-20230715151143470"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230715153944938.png"
                      alt="image-20230715153944938"
                ></p>
<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><h3 id="概述-20"><a href="#概述-20" class="headerlink" title="概述"></a>概述</h3><p><strong>函数式接口:有且仅有一个抽象方法的接口</strong></p>
<p>Java中的函数式编程体现就是Lambda表达式，所以函数式接口就是可以适用于Lambda使用的接口只有确保接口中有且仅有一个抽象方法，Java中的Lambda才能顺利地进行推导</p>
<p><strong>如何检测一个接口是不是函数式接口呢?</strong></p>
<ul>
<li>@Functionallnterface</li>
<li>放在接口定义的上方:如果接口是函数式接口，编译通过;如果不是，编译失败</li>
</ul>
<p>注意<br>我们自己定义函数式接口的时候，@Functionallnterface是可选的，就算我不写这个注解，只要保证满足函数式接口定义的条件，也照样是函数式接口。<strong>但是，建议加上该注解</strong></p>
<h3 id="函数式接口作为方法的参数"><a href="#函数式接口作为方法的参数" class="headerlink" title="函数式接口作为方法的参数"></a>函数式接口作为方法的参数</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230715155529206.png"
                      alt="image-20230715155529206"
                ></p>
<h3 id="函数式接口作为方法的返回值"><a href="#函数式接口作为方法的返回值" class="headerlink" title="函数式接口作为方法的返回值"></a>函数式接口作为方法的返回值</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230715161744750.png"
                      alt="image-20230715161744750"
                ></p>
<h3 id="常用函数式接口"><a href="#常用函数式接口" class="headerlink" title="常用函数式接口"></a>常用函数式接口</h3><ul>
<li>Supplier接口</li>
<li>Consumer接口</li>
<li>Predicate接口</li>
<li>Function接口</li>
</ul>
<h4 id="Supplier接口"><a href="#Supplier接口" class="headerlink" title="Supplier接口"></a>Supplier接口</h4><p>Supplier<T>:包含一个无参的方法</p>
<ul>
<li>T get():获得结果</li>
<li>该方法不需要参数，它会按照某种实现逻辑(由Lambda表达式实现)返回一个数据</li>
<li>Supplier<T>接口也被称为生产型接口，如果我们指定了接口的泛型是什么类型，那么接口中的get方法就会生产什么类型的数据供我们使用</li>
</ul>
<h5 id="001"><a href="#001" class="headerlink" title="001"></a>001<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230715163729608.png"
                      alt="image-20230715163729608"
                ></h5><h5 id="002"><a href="#002" class="headerlink" title="002"></a>002</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230715163902837.png"
                      alt="image-20230715163902837"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230715164656931.png"
                      alt="image-20230715164656931"
                ></p>
<h4 id="Consumer接口"><a href="#Consumer接口" class="headerlink" title="Consumer接口"></a>Consumer接口</h4><p>Consumer<T>:包含两个方法</p>
<ul>
<li>void accept(T t):对给定的参数执行此操作</li>
<li>defaultConsumer<T>andThen(Consumer after): 返回一个组合的Consumer，依次执行此操作，然后执行after操作</li>
<li>Consumer<T>接口也被称为消费型接口，它消费的数据的数据类型由泛型指定</li>
</ul>
<h5 id="001-1"><a href="#001-1" class="headerlink" title="001"></a>001</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230715170249111.png"
                      alt="image-20230715170249111"
                ></p>
<h5 id="002-1"><a href="#002-1" class="headerlink" title="002"></a>002</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230717154342595.png"
                      alt="image-20230717154342595"
                ></p>
<h4 id="Predicate接口"><a href="#Predicate接口" class="headerlink" title="Predicate接口"></a>Predicate接口</h4><p> Predicate<T>:常用的四个方法</p>
<ul>
<li>boolean test(T t):对给定的参数进行判断(判断逻辑由Lambda表达式实现)，返回一个布尔值</li>
<li>default Predicate<T> negate(): 返回一个逻的否定，对应逻辑非default </li>
<li>Predicate<T>and(Predicate other): 返回一个组合判断，对应短路与default </li>
<li>Predicate<T>or(Predicate other): 返回一个组合判断，对应短路或Predicate<T>接口通常用于判断参数是否满足指定的条件</li>
</ul>
<h4 id="Function接口"><a href="#Function接口" class="headerlink" title="Function接口"></a>Function接口</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230717163938678.png"
                      alt="image-20230717163938678"
                ></p>
<ul>
<li>Rapply(Tt):将此函数应用于给定的参数</li>
<li>default <V> FunctionandThen(Function after): 返回一个组合函数，首先将该函数应用于输入，然后将after函数应用于结果</li>
<li>Function&lt;T,R&gt;接口通常用于对参数进行处理，转换处理逻辑由Lambda表达式实现)，然后返回一个新的值</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230717192115022.png"
                      alt="image-20230717192115022"
                ></p>
<h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><h3 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230717201519921.png"
                      alt="image-20230717201519921"
                ></p>
<h3 id="Stream流的生成方式"><a href="#Stream流的生成方式" class="headerlink" title="Stream流的生成方式"></a>Stream流的生成方式</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230717201836422.png"
                      alt="image-20230717201836422"
                ></p>
<ul>
<li><p>Stream流的常见生成方式<br>Collection体系的集合可以使用默认方法stream()生成流<br>​	default Stream<E> stream()</p>
</li>
<li><p>Map体系的集合间接的生成流</p>
</li>
<li><p>数组可以通过Stream接口的静态方法of(T…values)生成流</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230717202614622.png"
                      alt="image-20230717202614622"
                ></p>
<h3 id="Stream流的常见中间操作方法"><a href="#Stream流的常见中间操作方法" class="headerlink" title="Stream流的常见中间操作方法"></a>Stream流的常见中间操作方法</h3><ul>
<li><p>Stream<T> filter(Predicate predicate): 用于对流中的数据进行过滤</p>
<p>Predicate接口中的方法 boolean test(T t):对给定的参数进行判断，返回一个布尔值</p>
</li>
<li><p>Stream<T>limit(long maxSize): 返回此流中的元素组成的流，截取前指定参数个数的数据</p>
</li>
<li><p>Stream<T>skip(long n):跳过指定参数个数的数据，返回由该流的剩余元素组成的流</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230717205108363.png"
                      alt="image-20230717205108363"
                ></p>
<ul>
<li><strong>static</strong> <T> Stream<T> concat(Stream a, Stream b):合并a和b两个流为一个流</li>
<li>Stream<T>distinct0: 返回由该流的不同元素(根Objectequals(Object)) 组成的流</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230717205610888.png"
                      alt="image-20230717205610888"
                ></p>
<ul>
<li>Stream<T>sorted0:返回由此流的元素组成的流，根据自然顺序排序</li>
<li>Stream<T>sorted(Comparatorcomparator): 返回由该流的元素组成的流，根据提供的Comparator进行排序</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230717210241224.png"
                      alt="image-20230717210241224"
                ></p>
<ul>
<li><R> Stream<R>map(Functionmapper):返回由给定函数应用于此流的元素的结果组成的流<br>Function接口中的方法    R apply(T t)</li>
<li>IntStream mapTolnt(TolntFunction mapper): 返回一NntStream其中包含将给定函数应用于此流的元素的结果<br>​	IntStream:表示原始int流<br>​	TolntFunction接口中的方法    int applyAslnt(T value)</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230717211346167.png"
                      alt="image-20230717211346167"
                ></p>
<h3 id="Stream流的常见终结操作方法"><a href="#Stream流的常见终结操作方法" class="headerlink" title="Stream流的常见终结操作方法"></a>Stream流的常见终结操作方法</h3><ul>
<li>void forEach(Consumeraction): 对此流的每个元素执行操作<br>Consumer接中的方法    void accept(Tt):对给定的参数执行此操作</li>
<li>long count():返回此流中的元素数</li>
</ul>
<h3 id="Stream流的收集操作"><a href="#Stream流的收集操作" class="headerlink" title="Stream流的收集操作"></a>Stream流的收集操作</h3><p>Stream流的收集方法</p>
<ul>
<li>R collect(Collector collector)</li>
<li>但是这个收集方法的参数是一个Collector 接口</li>
</ul>
<p>工具类Collectors提供了具体的收集方式</p>
<ul>
<li>publicstatic<T> Collector toList0: 把元素收集到List集合中</li>
<li>publicstatic <T> Collector toSet0: 把元素收集到Set集合中</li>
<li>publicstatic CollectortoMap(Function keyMapper,FunctionvalueMapper): 把元素收集到Map集合中</li>
</ul>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230717214920032.png"
                      alt="image-20230717214920032"
                ></p>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><h4 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h4><p>当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过类的加载，类的连接，类的初始化这三个步骤来对类进行初始化。如果不出现意外情况，JVM将会连续完成三个步骤，所以有时也把这三个步骤统称为类加载或者类初始化</p>
<h5 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a><strong>类的加载</strong></h5><ul>
<li>就是指将class文件读入内存，并为之创建一个iava.lang.Class对象</li>
<li>任何类被使用时，系统都会为之建立一个iavalangClass对象</li>
</ul>
<h5 id="类的连接"><a href="#类的连接" class="headerlink" title="类的连接"></a><strong>类的连接</strong></h5><ul>
<li>验证阶段:用于检验被加载的类是否有正确的内部结构，并和其他类协调一致</li>
<li>准备阶段:负责为类的类变量分配内存，并设置默认初始化值</li>
<li>解析阶段:将类的二进制数据中的符号引用替换为直接引用</li>
</ul>
<h5 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a><strong>类的初始化</strong></h5><ul>
<li>在该阶段，主要就是对类变量进行初始化</li>
</ul>
<h5 id="类的初始化步骤"><a href="#类的初始化步骤" class="headerlink" title="类的初始化步骤"></a><strong>类的初始化步骤</strong></h5><ul>
<li>假如类还未被加载和连接，则程序先加载并连接该类</li>
<li>假如该类的直接父类还未被初始化，则先初始化其直接父类</li>
<li>假如类中有初始化语句，则系统依次执行这些初始化语句</li>
<li>注意:在执行第2个步骤的时候，系统对直接父类的初始化步骤也遵循初始化步骤1-3</li>
</ul>
<h5 id="类的初始化时机"><a href="#类的初始化时机" class="headerlink" title="类的初始化时机:"></a><strong>类的初始化时机:</strong></h5><ul>
<li>创建类的实例</li>
<li>调用类的类方法</li>
<li>访问类或者接口的类变量，或者为该类变量赋值</li>
<li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li>
<li>初始化某个类的子类</li>
<li>直接使用java.exe命令来运行某个主类</li>
</ul>
<h4 id="类加载器-1"><a href="#类加载器-1" class="headerlink" title="类加载器"></a>类加载器</h4><h5 id="类加载器的作用"><a href="#类加载器的作用" class="headerlink" title="类加载器的作用"></a><strong>类加载器的作用</strong></h5><ul>
<li>负责将.class文件加载到内存中，并为之生成对应的java.lang.Class对象</li>
<li>虽然我们不用过分关心类加载机制，但是了解这个机制我们就能更好的理解程序的运行</li>
</ul>
<h5 id="JVM的类加载机制"><a href="#JVM的类加载机制" class="headerlink" title="JVM的类加载机制"></a><strong>JVM的类加载机制</strong></h5><ul>
<li>全盘负责:就是当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入</li>
<li>父类委托:就是当一个类加载器负责加载某个Class时，先让父类加载器试图加载该Class，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类</li>
<li>缓存机制:保证所有加载过的Class都会被缓存，当程序需要使用某个Class对象时，类加载器先从缓存区中搜索该Class，只有当缓存区中不存在该Class对象时，系统才会读取该类对应的二进制数据，并将其转换成CIass对象，存储到缓存区</li>
</ul>
<h5 id="ClassLoader-是负责加载类的对象"><a href="#ClassLoader-是负责加载类的对象" class="headerlink" title="ClassLoader:是负责加载类的对象"></a><strong>ClassLoader:是负责加载类的对象</strong></h5><h5 id="Java运行时具有以下内置类加载器"><a href="#Java运行时具有以下内置类加载器" class="headerlink" title="Java运行时具有以下内置类加载器"></a><strong>Java运行时具有以下内置类加载器</strong></h5><ul>
<li><p>Bootstrap classloader: 它是虚拟机的内置类加载器，通常表示为null，并且没有父null</p>
</li>
<li><p>Platform classloader:平台类加载器可以看到所有平台类，平台类包括由平台类加载器或其祖先定义的Java SE平台API其实现类和JDK特定的运行时类</p>
</li>
<li><p>System classloader:它也被称为应用程序类加载器，与平台类加载器不同。系统类加载器通常用于定义应用程序类路径模块路径和JDK特定工具上的类</p>
</li>
<li><p><strong>类加载器的继承关系: System的父加载器为Platform，而Platform的父加载器为Bootstrap</strong></p>
</li>
</ul>
<h5 id="ClassLoader中的两个方法"><a href="#ClassLoader中的两个方法" class="headerlink" title="ClassLoader中的两个方法"></a><strong>ClassLoader中的两个方法</strong></h5><ul>
<li>static ClassLoadergetSystemClassLoader0: 返回用于委派的系统类加载器</li>
<li>ClassLoadergetParent0: 返回父类加载器进行委派</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230718152812200.png"
                      alt="image-20230718152812200"
                ></p>
<h3 id="反射-1"><a href="#反射-1" class="headerlink" title="反射"></a>反射</h3><h4 id="概述-21"><a href="#概述-21" class="headerlink" title="概述"></a>概述</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230718153048132.png"
                      alt="image-20230718153048132"
                ></p>
<p>Java反射机制:</p>
<p>是指在运行时去获取一个类的变量和方法信息。然后通过获取到的信息来创建对象，调用方法的一种机制。由于这种动态性，可以极大的增强程序的灵活性，程序不用在编译期就完成确定，在运行期仍然可以扩展</p>
<h4 id="获取Class类的对象"><a href="#获取Class类的对象" class="headerlink" title="获取Class类的对象"></a>获取Class类的对象</h4><p>我们要想通过反射去使用一个类，首先我们要获取到该类的字节码文件对象，也就是类型为Class类型的对象这里我们提供三种方式获取Class类型的对象</p>
<ul>
<li><p>使用类的class属性来获取该类对应的Class对象。举例: Studentclass将会返回Student类对应的CIass对象</p>
</li>
<li><p>调用对象的getClass()方法，返回该对象所属类对应的Class对象<br>该方法是Obiect类中的方法，所有的Java对象都可以调用该方法</p>
</li>
<li><p>使用Class类中的静态方法forName(StringclassName)，该方法需要传入字符由参数，该字符串参数的值是某个类的全路径，也就是完整包名的路径</p>
</li>
</ul>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230718203137629.png"
                      alt="image-20230718203137629"
                ></p>
<h4 id="反射获取构造方法并使用"><a href="#反射获取构造方法并使用" class="headerlink" title="反射获取构造方法并使用"></a>反射获取构造方法并使用</h4><p><strong>Class类中用于获取构造方法的方法</strong></p>
<ul>
<li><p>Constructo r&lt; ?&gt; getConstfuctors(): 返回所有公共构造方法对象的数组</p>
</li>
<li><p>Constructor&lt; ? &gt;getDeclaredConstructors(): 返回所有构造方法对象的数组</p>
</li>
<li><p>Constructor&lt; T &gt;getConstructor(Class&lt; ? &gt;…parameterTypes): 返回单个公共构造方法对象</p>
</li>
<li><p>Constructor&lt; T &gt;getDeclaredConstructor(Class&lt;?&gt;…parameterTypes): 返回单个构造方法对象</p>
</li>
</ul>
<p><strong>Constructor类中用于创建对象的方法</strong></p>
<ul>
<li>Tnewlnstance(Object…initargs): 根据指定的构造方法创建对象</li>
</ul>
<h4 id="练习-4"><a href="#练习-4" class="headerlink" title="练习"></a>练习</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230718222024461.png"
                      alt="image-20230718222024461"
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bear004;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Refectdemo001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;bear002.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor(String.class, <span class="type">int</span>.class, String.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> con.newInstance(<span class="string">&quot;李慧&quot;</span>, <span class="number">20</span>, <span class="string">&quot;sjz&quot;</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230719075057926.png"
                      alt="image-20230719075057926"
                ></p>
<h5 id="暴力反射"><a href="#暴力反射" class="headerlink" title="暴力反射"></a><strong>暴力反射</strong></h5><p>public void setAccessible (boolean flag):值为true，取消访问检查</p>
<p>con.setAccessible(true); </p>
<h4 id="反射获取成员变量并使用"><a href="#反射获取成员变量并使用" class="headerlink" title="反射获取成员变量并使用"></a>反射获取成员变量并使用</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230719081519138.png"
                      alt="image-20230719081519138"
                ></p>
<p>Class类中用于获取成员变量的方法</p>
<ul>
<li>Field[]  getFields(): 返回所有公共成员变量对象的数组</li>
<li>Field[]  getDeclaredFields(): 返回所有成员变量对象的数组Field getField (String name): 返回单个公共成员变量对象</li>
<li>Field getDeclaredField(String name): 返回单个成员变量对象</li>
<li>Field类中用于给成员变量赋值的方法</li>
<li>void set(Objectobi,Objectvalye): 给obi对象的成员变量赋值为value</li>
</ul>
<h4 id="反射获取成员方法并使用"><a href="#反射获取成员方法并使用" class="headerlink" title="反射获取成员方法并使用"></a>反射获取成员方法并使用</h4><p>Class类中用于获取成员方法的方法</p>
<ul>
<li>MethodlgtMethods0: 返回所有公共成员方法对象的数组，包括继承的</li>
<li>MethodlgetDeclaredMethods0: 返回所有成员方法对象的数组，不包括继承的</li>
<li>MethodgetMethod(Stringname, Class&lt; ? &gt;… parameterTypes): 返回单个公共成员方法对象</li>
<li>MethodgetDeclaredMethod(String name,Class&lt;?&gt;… parameterTypes): 返回单个成员方法对象</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230719085745600.png"
                      alt="image-20230719085745600"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230719092128827.png"
                      alt="image-20230719092128827"
                ></p>
<h4 id="越过泛型检查"><a href="#越过泛型检查" class="headerlink" title="越过泛型检查"></a>越过泛型检查</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230719092553373.png"
                      alt="image-20230719092553373"
                ></p>
<h4 id="配置文件运行类的方法"><a href="#配置文件运行类的方法" class="headerlink" title="配置文件运行类的方法"></a>配置文件运行类的方法</h4><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h3 id="概述-22"><a href="#概述-22" class="headerlink" title="概述"></a>概述</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230719103839618.png"
                      alt="image-20230719103839618"
                ></p>
<h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230719105643431.png"
                      alt="image-20230719105643431"
                ></p>
<h3 id="模块服务的使用"><a href="#模块服务的使用" class="headerlink" title="模块服务的使用"></a>模块服务的使用</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%90%88%E9%9B%86/image-20230719111856358.png"
                      alt="image-20230719111856358"
                ></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
        <category>JAVASE</category>
      </categories>
      <tags>
        <tag>项目组</tag>
        <tag>黑马程序员</tag>
        <tag>合集</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVASE基础03</title>
    <url>/2023/06/30/JAVASE%E5%9F%BA%E7%A1%8003/</url>
    <content><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p><strong>推荐格式</strong></p>
<p>格式一: 数据类型[]   变量名<br>例:           int[] arr</p>
<p><em>定义了一个int类型的数组，数组名是arr</em></p>
<p>格式二: 数据类型 变量名[]<br>                 int arr[]</p>
<p><em>定义了一个int类型的变量，变量名是arr数组</em></p>
<h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><p>int [] arr &#x3D; new int [3];</p>
<p>左边:<br>int:说明数组中的元素类型是int类型</p>
<p>[]:说明这是一个数组</p>
<p>arr:这是数组的名称</p>
<p>右边:<br>new:为数组申请内存空间</p>
<p>int:说明数组中的元素类型是int类型</p>
<p>[]:说明这是一个数组</p>
<p>3:数组长度，其实就是数组中的元素个数</p>
<h3 id="数组元素访问"><a href="#数组元素访问" class="headerlink" title="数组元素访问"></a>数组元素访问</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出数组名，地址分配</span></span><br><span class="line">System.out.println(arr);</span><br><span class="line"><span class="comment">//输出数组元素</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><table>
<thead>
<tr>
<th align="center">类型</th>
<th>初始值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">整数</td>
<td>0</td>
</tr>
<tr>
<td align="center">浮点数</td>
<td>0.0</td>
</tr>
<tr>
<td align="center">布尔值</td>
<td>false</td>
</tr>
<tr>
<td align="center">字符</td>
<td>空字符</td>
</tr>
<tr>
<td align="center">引用数据类型</td>
<td>null</td>
</tr>
</tbody></table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/JAVASE%E5%9F%BA%E7%A1%8003/image-20230630115700337.png"
                      alt="image-20230630115700337"
                ></p>
<p><strong>———————————————————————————————</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/JAVASE%E5%9F%BA%E7%A1%8003/image-20230630115703994.png"
                      alt="image-20230630115703994"
                ></p>
<p><strong>———————————————————————————————-</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/JAVASE%E5%9F%BA%E7%A1%8003/image-20230630115807066.png"
                      alt="image-20230630115807066"
                ></p>
<p><strong>———————————————————————————————————————————————</strong></p>
<p><strong>多个数组 指向相同的内存图，一个数组改变数据值，另外一个数组相应的也改变</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/JAVASE%E5%9F%BA%E7%A1%8003/image-20230630141519058.png"
                      alt="image-20230630141519058"
                ></p>
<h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">printall</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//int [] arr =  &#123;1,2,3,4&#125;;</span></span><br><span class="line">        <span class="type">int</span> [] arr = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="数组操作的两个问题"><a href="#数组操作的两个问题" class="headerlink" title="数组操作的两个问题"></a>数组操作的两个问题</h3><p>索引越界</p>
<p>空指针异常</p>
<p>null</p>
<h3 id="数组常见操作"><a href="#数组常见操作" class="headerlink" title="数组常见操作"></a>数组常见操作</h3><p>遍历-&gt;for</p>
<p>最大值-&gt;max&#x3D;arr[0];-&gt;max</p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
        <category>JAVASE</category>
      </categories>
      <tags>
        <tag>项目组</tag>
        <tag>黑马程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVASE基础05</title>
    <url>/2023/06/30/JAVASE%E5%9F%BA%E7%A1%8005/</url>
    <content><![CDATA[<h2 id="题目演练"><a href="#题目演练" class="headerlink" title="题目演练"></a>题目演练</h2><h3 id="1-遍历数组"><a href="#1-遍历数组" class="headerlink" title="1.遍历数组"></a>1.遍历数组</h3><p>设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如:[11,22,33,44,55]</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">pprintarr</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> [] arr =&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line">    printarr(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printarr</span><span class="params">(<span class="type">int</span> arr [])</span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i= <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i== arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">               System.out.print(arr[i]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2-返回最大值"><a href="#2-返回最大值" class="headerlink" title="2.返回最大值"></a>2.返回最大值</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getmax</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanf</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span>scanf.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span>scanf.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span>scanf.nextInt();</span><br><span class="line">        </span><br><span class="line">        getMax(a,b,c);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max1</span> <span class="operator">=</span> (a&gt;b)?a:b;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> (max1&gt;c)?max1:c;</span><br><span class="line">    System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3-减肥计划（switch版）"><a href="#3-减肥计划（switch版）" class="headerlink" title="3.减肥计划（switch版）"></a>3.减肥计划（switch版）</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span> (System.in);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        jianfei(w);</span><br><span class="line">       <span class="keyword">while</span>(w!=<span class="number">0</span>) &#123;</span><br><span class="line">           w = sc.nextInt();</span><br><span class="line">           jianfei(w);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">jianfei</span><span class="params">(<span class="type">int</span> w)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (w)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;跑步&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;游泳&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;慢走&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;单车&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;拳击&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;爬山&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;好好吃一顿&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;星期错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="4-逢七过"><a href="#4-逢七过" class="headerlink" title="4.逢七过"></a>4.逢七过</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     printfengqi();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printfengqi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i/<span class="number">7</span>==<span class="number">0</span>||i%<span class="number">10</span>==<span class="number">7</span>||(i/<span class="number">10</span>)%<span class="number">10</span>==<span class="number">7</span>) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%4d&quot;</span>,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="5-不死神兔"><a href="#5-不死神兔" class="headerlink" title="5.不死神兔"></a>5.不死神兔</h3><p><strong>斐波那契数列</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        feibonaqie();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">feibonaqie</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> [] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">20</span>];</span><br><span class="line">        arr[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> ( i= <span class="number">2</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        arr[i]=arr[i-<span class="number">1</span>]+arr[i-<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( i= <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%5d&quot;</span>,arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="6-百钱百鸡"><a href="#6-百钱百鸡" class="headerlink" title="6.百钱百鸡"></a>6.百钱百鸡</h3><p>需求:我国古代数学家张丘建在《算经》一书中提出的数学问题:鸡翁一值钱五，鸡母一值钱三，鸡维三值钱一百钱买百鸡，问鸡翁、鸡母、鸡维各几何?</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Buyji();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Buyji</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        x=<span class="number">0</span>;</span><br><span class="line">        y=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(x= <span class="number">0</span> ;x&lt;<span class="number">20</span>;x++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(y=<span class="number">0</span>;y&lt;<span class="number">33</span>;y++)&#123;</span><br><span class="line">                z=<span class="number">100</span>-x-y;</span><br><span class="line">                <span class="keyword">if</span>(z%<span class="number">3</span>==<span class="number">0</span>&amp;&amp;(<span class="number">5</span>*x+<span class="number">3</span>*y+z/<span class="number">3</span> ==<span class="number">100</span>))&#123;</span><br><span class="line">                    System.out.printf(<span class="string">&quot;%2d,%2d,%2d\n&quot;</span>,x,y,z);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="7-数组元素求和"><a href="#7-数组元素求和" class="headerlink" title="7.数组元素求和"></a>7.数组元素求和</h3><p><font color=red>需求:</font></p>
<p>有这样的一个数组，元素是(68,27,95,88,171,996,51,210)。求出该数组中满足要求的元素和</p>
<p><font color=red>要求:</font> </p>
<p>求和的元素个位和十位都不能是7，并且只能是偶数</p>
<p><font color=red>思路:</font></p>
<p>定义一个数组，用静态初始化完成数组元素的初始化<br>定义一个求和变量，初始值是0<br>遍历数组，获取到数组中的每一个元素<br>判断该元素是否满足条件，如果满足条件就累加</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    printarrsum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printarrsum</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] arr=&#123;<span class="number">68</span>,<span class="number">27</span>,<span class="number">95</span>,<span class="number">88</span>,<span class="number">171</span>,<span class="number">996</span>,<span class="number">51</span>,<span class="number">210</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt; arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]%<span class="number">10</span>!=<span class="number">7</span>&amp;&amp;(arr[i]/<span class="number">10</span>%<span class="number">10</span>!=<span class="number">7</span>)&amp;&amp;arr[i]%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            sum+=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="8-判断数组是否相同"><a href="#8-判断数组是否相同" class="headerlink" title="8.判断数组是否相同"></a>8.判断数组是否相同</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr1=&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] arr2=&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line">    <span class="type">boolean</span> flag=comper(arr1,arr2);</span><br><span class="line">    System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">comper</span><span class="params">(<span class="type">int</span>[] arr1,<span class="type">int</span>[] arr2)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr1.length!=arr2.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i= <span class="number">0</span>;i&lt; arr1.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr1[i]!=arr2[i])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="9-查找下标"><a href="#9-查找下标" class="headerlink" title="9.查找下标"></a>9.查找下标</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        chazhao(arr, a);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            a = sc.nextInt();</span><br><span class="line"></span><br><span class="line">            chazhao(arr, a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">chazhao</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        <span class="type">int</span> idex=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span> ;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==a)&#123;</span><br><span class="line">                idex=i;</span><br><span class="line">                System.out.println(idex);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(idex==-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="10-反转输出"><a href="#10-反转输出" class="headerlink" title="10.反转输出"></a>10.反转输出</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">19</span>,<span class="number">28</span>,<span class="number">37</span>,<span class="number">46</span>,<span class="number">50</span>&#125;;</span><br><span class="line">        fanzuan(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fanzuan</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>, end = arr.length - <span class="number">1</span>; start &lt;= end; start++, end--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[start];</span><br><span class="line">            arr[start] = arr[end];</span><br><span class="line">            arr[end] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        printarr(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printarr</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(arr[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(arr[i] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="11-评分"><a href="#11-评分" class="headerlink" title="11.评分"></a>11.评分</h3><p>去掉最低最高</p>
<p>增加自我改进，使用sort排序</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(arr);</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> getmax(arr);</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> getmin(arr);</span><br><span class="line">        jianfa(arr,max,min);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getmax</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> max= arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>;i&lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&gt;max) &#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值为：&quot;</span>+max);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getmin</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> min= arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>;i&lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&lt;min) &#123;</span><br><span class="line">                min = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;最小值为：&quot;</span>+min);</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">jianfa</span> <span class="params">(<span class="type">int</span> arr [],<span class="type">int</span> max,<span class="type">int</span> min)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">score1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ;i&lt; arr.length;i++)&#123;</span><br><span class="line">            score1+=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span>score1-max-min;</span><br><span class="line">        System.out.println(<span class="string">&quot;减法：&quot;</span>+score);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;有序：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%2d&quot;</span>, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> score=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            score+=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;sort方法：&quot;</span>+score);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
        <category>JAVASE</category>
      </categories>
      <tags>
        <tag>项目组</tag>
        <tag>黑马程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVASE基础07</title>
    <url>/2023/07/01/JAVASE%E5%9F%BA%E7%A1%8007/</url>
    <content><![CDATA[<h2 id="API的使用"><a href="#API的使用" class="headerlink" title="API的使用"></a>API的使用</h2><p>帮助文档</p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>构造方法</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8007/image-20230701163912679.png"
                      alt="image-20230701163912679"
                ></p>
<h3 id="string构造方法"><a href="#string构造方法" class="headerlink" title="string构造方法"></a>string构造方法</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//public string();创建一个空白字符串对象，</span></span><br><span class="line">        String s1=<span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;s1&quot;</span>+s1);</span><br><span class="line"><span class="comment">//public string(char[] chs);根据字符数组的内容，来创建字符串对象</span></span><br><span class="line">        <span class="type">char</span>[] chs =&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        String s2=<span class="keyword">new</span> <span class="title class_">String</span>(chs);</span><br><span class="line">        System.out.println(<span class="string">&quot;s2&quot;</span>+s2);</span><br><span class="line"><span class="comment">//public string(byte[] bys);根据字节数组的内容，来创建字符串对象</span></span><br><span class="line">        <span class="type">byte</span>[] byt=&#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>&#125;;</span><br><span class="line">        String s3= <span class="keyword">new</span> <span class="title class_">String</span>(byt);</span><br><span class="line">        System.out.println(<span class="string">&quot;s3&quot;</span>+s3);</span><br><span class="line"><span class="comment">//string s =“abc”;直接赋值的方式创建字符串对象，</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span><span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;s4&quot;</span>+s4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="string对象的特点"><a href="#string对象的特点" class="headerlink" title="string对象的特点"></a>string对象的特点</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8007/image-20230701171311741.png"
                      alt="image-20230701171311741"
                ></p>
<h3 id="字符串的比较"><a href="#字符串的比较" class="headerlink" title="字符串的比较"></a>字符串的比较</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8007/image-20230701173157223.png"
                      alt="image-20230701173157223"
                ></p>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;lihuibear&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;xiaoxiong&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="type">String</span> <span class="variable">mima</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (name.equals(username) &amp;&amp; mima.equals(password)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登陆成功！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">2</span>-i == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;稍后重试！！！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;你还有&quot;</span> + (<span class="number">2</span>-i) + <span class="string">&quot;次机会&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="字符串的遍历"><a href="#字符串的遍历" class="headerlink" title="字符串的遍历"></a>字符串的遍历</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span>sc.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.println(line.length());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>;i&lt;line.length();i++)&#123; </span><br><span class="line">            System.out.println(line.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="统计字符个数"><a href="#统计字符个数" class="headerlink" title="统计字符个数"></a>统计字符个数</h4><p>1.键盘录入一个字符串，统计该字符串中大写字母字符，小写字母字符，数字字符出现的次数(不考虑其他字符)</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span>sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span>,d=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>;i&lt;line.length();i++)&#123;</span><br><span class="line">            <span class="type">char</span> ch=line.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">                a++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">                b++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                c++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                d++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;大写字母&quot;</span>+a);</span><br><span class="line">        System.out.println(<span class="string">&quot;小写字母&quot;</span>+b);</span><br><span class="line">        System.out.println(<span class="string">&quot;数字&quot;</span>+c);</span><br><span class="line">        System.out.println(<span class="string">&quot;其他&quot;</span>+d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>2.相同字母，数字多少个</p>
<p><em><strong><u>用到了后面的知识</u></strong></em></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">        Map&lt;Character, Integer&gt; charCount = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; line.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> line.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (charCount.containsKey(ch)) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> charCount.get(ch);</span><br><span class="line">                charCount.put(ch, count + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                charCount.put(ch, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Character, Integer&gt; entry : charCount.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;有&quot;</span> + entry.getValue() + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">      <span class="type">String</span> <span class="variable">ch</span> <span class="operator">=</span> fanzuan(line);</span><br><span class="line">      System.out.println(ch);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">fanzuan</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ss</span> <span class="operator">=</span><span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s.length() - <span class="number">1</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            ss+=s.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ss;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>减少空间浪费</p>
<h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8007/image-20230701201835541.png"
                      alt="image-20230701201835541"
                ></p>
<h4 id="添加与反转"><a href="#添加与反转" class="headerlink" title="添加与反转"></a>添加与反转</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8007/image-20230701202705532.png"
                      alt="image-20230701202705532"
                ></p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line">        <span class="comment">//空内容</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">a</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;空内容a:&quot;</span>+a);</span><br><span class="line">        <span class="comment">//自带内容</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">aa</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;lihuibear&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;自带内容aa:&quot;</span>+aa);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一般编程</span></span><br><span class="line">        a.append(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        a.append(<span class="string">&quot;hui&quot;</span>);</span><br><span class="line">        a.append(<span class="string">&quot;bear&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;一般编程a:&quot;</span>+a);</span><br><span class="line">        <span class="comment">//链式编程</span></span><br><span class="line">        a.append(<span class="string">&quot;li&quot;</span>).append(<span class="string">&quot;hui&quot;</span>).append(<span class="string">&quot;bear&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;链式编程:a:&quot;</span>+a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反转</span></span><br><span class="line">        a.reverse();</span><br><span class="line">        System.out.println(<span class="string">&quot;反转a:&quot;</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="StringBuilder和String的转化"><a href="#StringBuilder和String的转化" class="headerlink" title="StringBuilder和String的转化"></a>StringBuilder和String的转化</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8007/image-20230701204328254.png"
                      alt="image-20230701204328254"
                ></p>
<h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb1.append(<span class="string">&quot;lihuibear&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;append：&quot;</span>+sb1);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> sb1.toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;toString法：&quot;</span>+s1);</span><br><span class="line"></span><br><span class="line">        String s22=<span class="string">&quot;lihuibear&quot;</span>;</span><br><span class="line">        String s2= <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;lihuibear&quot;</span>);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb2</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s22);</span><br><span class="line">        System.out.println(<span class="string">&quot;构造法转换：&quot;</span>+sb2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h4><h5 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h5><p>String-&gt;StringBuilder-&gt;append-&gt;String</p>
<h5 id="字符串反转-1"><a href="#字符串反转-1" class="headerlink" title="字符串反转"></a>字符串反转</h5><p>String-&gt;StringBuilder-&gt;reverse-&gt;String</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lihuibear</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> myreserve(line);</span><br><span class="line"></span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">myreserve</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        流程</span></span><br><span class="line"><span class="comment">        String-&gt;StringBuilder-&gt;reverse-&gt;String</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        1.String-&gt;StringBuilder</span></span><br><span class="line"><span class="comment">        StringBuilder sb=new StringBuilder(s);</span></span><br><span class="line"><span class="comment">        2.</span></span><br><span class="line"><span class="comment">        sb.reverse();</span></span><br><span class="line"><span class="comment">        3.</span></span><br><span class="line"><span class="comment">        String ss =sb.toString();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//一般方法</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        StringBuilder sb=new StringBuilder(s);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        sb.reverse();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        String ss =sb.toString();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s).reverse().toString();</span><br><span class="line">        <span class="keyword">return</span> ss;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
        <category>JAVASE</category>
      </categories>
      <tags>
        <tag>项目组</tag>
        <tag>黑马程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVASE基础06</title>
    <url>/2023/07/01/JAVASE%E5%9F%BA%E7%A1%8006/</url>
    <content><![CDATA[<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h3 id="初步认知"><a href="#初步认知" class="headerlink" title="初步认知"></a>初步认知</h3><p><font color=red>类的特点:</font></p>
<p>类是对象的数据类型</p>
<p>类是具有相同属性和行为的一组对象的集合</p>
<p><font color=red>对象的属性：</font></p>
<p>每个对象的每个属性都拥有特定的值</p>
<p><font color=red>对象的行为：</font></p>
<p>对象能够执行的操作</p>
<h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><p>**类:**类是对现实生活中一类具有共同属性和行为的事物的抽象</p>
<p><strong>对象</strong>:是能够看得到摸的着的真实存在的实体</p>
<p><font color=gree>类是对象的抽象<br>对象是类的实体</font></p>
<h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8006/image-20230701102341591.png"
                      alt="image-20230701102341591"
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类的定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String brand;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line">	<span class="comment">//成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> sendMessage&#123;</span><br><span class="line">        System.out.printIn(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8006/image-20230701103303343.png"
                      alt="image-20230701103303343"
                ></p>
<h5 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8006/image-20230701103343411.png"
                      alt="image-20230701103343411"
                ></p>
<h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;好好学习，天天向上&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doHomework</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;键盘敲烂，月薪过万&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用对象</span></span><br><span class="line">        System.out.println(s.name+<span class="string">&quot;,&quot;</span>+s.age);</span><br><span class="line">        s.name=<span class="string">&quot;lihuibear&quot;</span>;</span><br><span class="line">        s.age= <span class="number">20</span>;</span><br><span class="line">        System.out.println(s.name+<span class="string">&quot;,&quot;</span>+s.age);</span><br><span class="line">        s.study();;</span><br><span class="line">        s.doHomework();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="内存图"><a href="#内存图" class="headerlink" title="内存图"></a>内存图</h3><h4 id="单个对象"><a href="#单个对象" class="headerlink" title="单个对象"></a>单个对象</h4><h5 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8006/image-20230701105622363.png"
                      alt="image-20230701105622363"
                ></p>
<h5 id="调用方法成员方法"><a href="#调用方法成员方法" class="headerlink" title="调用方法成员方法"></a>调用方法成员方法</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8006/image-20230701105654605.png"
                      alt="image-20230701105654605"
                ></p>
<h4 id="多个对象"><a href="#多个对象" class="headerlink" title="多个对象"></a>多个对象</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8006/image-20230701110814901.png"
                      alt="image-20230701110814901"
                ></p>
<h4 id="多个对象指向相同"><a href="#多个对象指向相同" class="headerlink" title="多个对象指向相同"></a>多个对象指向相同</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8006/image-20230701111728546.png"
                      alt="image-20230701111728546"
                ></p>
<h3 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8006/image-20230701112735414.png"
                      alt="image-20230701112735414"
                ></p>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><h4 id="private关键字"><a href="#private关键字" class="headerlink" title="private关键字"></a><strong>private关键字</strong></h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><ul>
<li><p>是一个权限修饰符</p>
</li>
<li><p>可以修饰成员(成员变量和成员方法)</p>
</li>
<li><p>作用是保护成员不被别的类使用，被private修饰的成员只在本类中才能访问</p>
</li>
</ul>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong><font color = red size=5>注意</font></strong></h5><p>针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作</p>
<p>提供<font color = red >get变量名()</font>方法，用于获取成员变量的值，方法用<font color = green >public</font>修饰</p>
<p>提供<font color = red >set变量名(参数)</font>方法，用于设置成员变量的值，方法用<font color = green >public</font>修饰</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line"><span class="comment">//    String name;</span></span><br><span class="line"><span class="comment">//    int age;</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String n)</span> &#123;</span><br><span class="line">         name=n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">       age=a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;,&quot;</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;好好学习，天天向上&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doHomework</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;键盘敲烂，月薪过万&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用对象</span></span><br><span class="line">        s.setName(<span class="string">&quot;lihuibear&quot;</span>);</span><br><span class="line">        s.setAge(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//get方法</span></span><br><span class="line">        System.out.println(s.getName()+s.getAge());</span><br><span class="line">        <span class="comment">//show方法</span></span><br><span class="line">        s.show();</span><br><span class="line"></span><br><span class="line">        s.study();</span><br><span class="line">        s.doHomework();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h4><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Student类中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.name= name;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8006/image-20230701141331266.png"
                      alt="image-20230701141331266"
                ></p>
<h4 id="封装-1"><a href="#封装-1" class="headerlink" title="封装"></a>封装</h4><p><font color =red>1.封装概述</font></p>
<p>是面向对象三大特征之一 (<strong>封装，继承，多态</strong>）</p>
<p>是面向对象编程语言对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界是无法直接操作的<br><font color =red>2.封装原则</font></p>
<p>将类的某些信息隐藏在类内部，不允许外部程序直接访问,而是通过该类提供的方法来实现对隐藏信息的操作和访问成员变量private，提供对应的getXxx()&#x2F;setXxx(方法</p>
<p><font color =red>3.封装好处</font></p>
<p>通过方法来控制成员变量的操作，提高了代码的安全性把代码用方法进行封装，提高了代码的复用性</p>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p><strong>1.构造方法的创建</strong></p>
<ul>
<li>如果没有定义构造方法，系统将给出一个默认的无参数构造方法</li>
<li>如果定义了构造方法，系统将不再提供默认的构造方法</li>
</ul>
<p><strong>2.构造方法的重载</strong></p>
<ul>
<li>如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法</li>
</ul>
<p><strong>3.推荐的使用方式</strong></p>
<ul>
<li>无论是否使用，都手工书写无参数构造方法</li>
</ul>
<h4 id="标准类制作"><a href="#标准类制作" class="headerlink" title="标准类制作"></a>标准类制作</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//show方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;,&quot;</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s1=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造方法</span></span><br><span class="line">        Student s2=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;2lihuibear&quot;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用对象</span></span><br><span class="line">        s1.setName(<span class="string">&quot;1lihuibear&quot;</span>);</span><br><span class="line">        s1.setAge(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//get方法</span></span><br><span class="line">        System.out.println(s1.getName()+<span class="string">&quot;,&quot;</span>+s1.getAge());</span><br><span class="line">       <span class="comment">// System.out.println(s2.getName()+&quot;,&quot;+s2.getAge());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//show方法</span></span><br><span class="line">        s1.show();</span><br><span class="line">        s2.show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
        <category>JAVASE</category>
      </categories>
      <tags>
        <tag>项目组</tag>
        <tag>黑马程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVASE基础08</title>
    <url>/2023/07/02/JAVASE%E5%9F%BA%E7%A1%8008/</url>
    <content><![CDATA[<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8008/image-20230702165814824.png"
                      alt="image-20230702165814824"
                ></p>
<h3 id="ArrayList构造方法和添加方法"><a href="#ArrayList构造方法和添加方法" class="headerlink" title="ArrayList构造方法和添加方法"></a>ArrayList构造方法和添加方法</h3><table>
<thead>
<tr>
<th align="left">方法名</th>
<th>说明</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">public ArrayList</td>
<td>创建一个空的集合对象</td>
<td>ArrayList <String>  arry &#x3D; new ArrayList&lt;&gt;();</td>
</tr>
<tr>
<td align="left">public boolen add(E e)</td>
<td>将指定的元素追加到此集合的末尾</td>
<td>boolean b &#x3D; arry.add(“world”);</td>
</tr>
<tr>
<td align="left">public void add(int index,E element)</td>
<td>在此集合中的指定位置插入指定的元素</td>
<td>arry.add(1,lihuibear)</td>
</tr>
<tr>
<td align="left"></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left">public boolen remove(Object o)</td>
<td><strong>删除</strong>指定的元素，返回删除是否成功</td>
<td>boolen b &#x3D;arry.remove(“world”);</td>
</tr>
<tr>
<td align="left">public E remove (int index)</td>
<td>删除指定索引处的元素，返回被<strong>删除</strong>的元素</td>
<td>arry.remove(1);</td>
</tr>
<tr>
<td align="left">public E set (int index E element)</td>
<td>修改指定索引处的元素，返回被<strong>修改</strong>的元素</td>
<td>arry.set (1,“lihuibear4”);</td>
</tr>
<tr>
<td align="left">public E get(int index)</td>
<td>返回指定索引处的元素</td>
<td>arry.get(0);</td>
</tr>
<tr>
<td align="left">public int size()</td>
<td>返回集合中元素的个数</td>
<td>arry.size();</td>
</tr>
</tbody></table>
<p><font color=red size=5>注意:</font></p>
<p><strong>一切索引都不能越界</strong></p>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>




<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArryListStudent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Student&gt; arry =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lihuibear0&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lihuibear1&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lihuibear2&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lihuibear3&quot;</span>,<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">        arry.add(s1);</span><br><span class="line">        arry.add(s2);</span><br><span class="line">        arry.add(s3);</span><br><span class="line">        arry.add(s4);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i= <span class="number">0</span>;i&lt; arry.size();i++)&#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> arry.get(i);</span><br><span class="line"></span><br><span class="line">            System.out.println(s.getName()+<span class="string">&quot; &quot;</span>+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArryListStudent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入录入的学生人数&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            addStudent(array);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printStudent(array);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生姓名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生年龄：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        s.setName(name);</span><br><span class="line">        s.setAge(age);</span><br><span class="line"></span><br><span class="line">        array.add(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printStudent</span> <span class="params">(ArrayList&lt;Student&gt; array)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ;i&lt;array.size();i++) &#123;</span><br><span class="line">            Student s= array.get(i);</span><br><span class="line">            System.out.println(s.getName()+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<h4 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">gaiStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;输入你想要修应该的学生的学号&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(&quot;输入学生新姓名&quot;);</span></span><br><span class="line"><span class="comment">//        String name = sc.nextLine();</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;输入学生新年龄&quot;);</span></span><br><span class="line"><span class="comment">//        String age = sc.nextLine();</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;输入学生新地址&quot;);</span></span><br><span class="line"><span class="comment">//        String address = sc.nextLine();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        Student s = new Student();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        s.setId(id);</span></span><br><span class="line"><span class="comment">//        s.setName(name);</span></span><br><span class="line"><span class="comment">//        s.setAge(age);</span></span><br><span class="line"><span class="comment">//        s.setAddress(address); </span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入你想要修应该的内容name输入1 age输入2 address输入3 退出输入4&quot;</span>);</span><br><span class="line"></span><br><span class="line">            s.setId(id);</span><br><span class="line">           </span><br><span class="line">  </span><br><span class="line">           </span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> <span class="variable">nn</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (nn) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入学生新姓名&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">                    s.setName(name);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入学生新年龄&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">                    s.setAge(age);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入学生新地址&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">                    s.setAddress(address);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;谢谢使用！&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (student.getId().equals(id)) &#123;</span><br><span class="line">                array.set(i, s);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;没有该学生&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">gaiStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;输入你想要修应该的学生的学号&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">ss</span> <span class="operator">=</span> array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (ss.getId().equals(id)) &#123;</span><br><span class="line">                array.set(i, s);</span><br><span class="line">                <span class="keyword">if</span> (s.getId().equals(id)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入学生新姓名&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入学生新年龄&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入学生新地址&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">                    s.setId(id);</span><br><span class="line">                    s.setName(name);</span><br><span class="line">                    s.setAge(age);</span><br><span class="line">                    s.setAddress(address);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;没有该学生，重新输入&quot;</span>);</span><br><span class="line">                    gaiStudent(array);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (student.getId().equals(id)) &#123;</span><br><span class="line">                array.set(i, s);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="练习-学生管理系统"><a href="#练习-学生管理系统" class="headerlink" title="练习 学生管理系统"></a>练习 学生管理系统</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Studentall;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String id, String name, String age, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Studentall;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lihuibear.ArryListStudent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Studentmain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;-----------欢迎来到学生管理系统----------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;1 添加学生&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;2 删除学生&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;3 查看全部学生&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;4 修改学生&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;5 退出&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你选择&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (num) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;添加学生&quot;</span>);</span><br><span class="line">                    addStudent(array);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;删除学生&quot;</span>);</span><br><span class="line">                    deleteStudent(array);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;查看全部学生&quot;</span>);</span><br><span class="line">                    findStudent(array);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;修改学生&quot;</span>);</span><br><span class="line">                    gaiStudent(array);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;谢谢使用！&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;输入学生学号id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        <span class="keyword">if</span>(idsame(array,id))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入学生姓名&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入学生年龄&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入学生地址&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">            s.setId(id);</span><br><span class="line">            s.setName(name);</span><br><span class="line">            s.setAge(age);</span><br><span class="line">            s.setAddress(address);</span><br><span class="line"></span><br><span class="line">            array.add(s);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;添加成功！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;已经有该同学了！！！重新输入&quot;</span>);</span><br><span class="line">            addStudent(array);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要删除学生的学号&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"><span class="comment">//        String name = sc.nextLine();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (s.getId().equals(id)) &#123;<span class="comment">//||s.getName().equals(name)</span></span><br><span class="line">                array.remove(i);</span><br><span class="line">                System.out.println(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;没有该学生！！！&quot;</span>);</span><br><span class="line">                deleteStudent(array);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找全部</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;学号\t\t\t姓名\t\t\t年龄\t\t地址&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> array.get(i);</span><br><span class="line">            System.out.println(s.getId() + <span class="string">&quot;\t&quot;</span> + s.getName() + <span class="string">&quot;\t&quot;</span> + s.getAge() + <span class="string">&quot;岁&quot;</span> + <span class="string">&quot;\t&quot;</span> + s.getAddress());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">gaiStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;输入你想要修应该的学生的学号&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">ss</span> <span class="operator">=</span> array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (ss.getId().equals(id)) &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;输入学生新姓名&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">                System.out.println(<span class="string">&quot;输入学生新年龄&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">                System.out.println(<span class="string">&quot;输入学生新地址&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">                s.setId(id);</span><br><span class="line">                s.setName(name);</span><br><span class="line">                s.setAge(age);</span><br><span class="line">                s.setAddress(address);</span><br><span class="line"></span><br><span class="line">                array.set(i, s);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;没有该学生，重新输入&quot;</span>);</span><br><span class="line">                gaiStudent(array);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断相同Id</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">idsame</span><span class="params">(ArrayList&lt;Student&gt; array, String id)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">sid</span> <span class="operator">=</span> array.get(i);</span><br><span class="line">            <span class="keyword">if</span>(sid.getId().equals(id))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
        <category>JAVASE</category>
      </categories>
      <tags>
        <tag>项目组</tag>
        <tag>黑马程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVASE基础09</title>
    <url>/2023/07/03/JAVASE%E5%9F%BA%E7%A1%8009/</url>
    <content><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230703204912977.png"
                      alt="image-20230703204912977"
                ></p>
<h3 id="继承的好处和弊端"><a href="#继承的好处和弊端" class="headerlink" title="继承的好处和弊端"></a>继承的好处和弊端</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230703205828634.png"
                      alt="image-20230703205828634"
                ></p>
<h3 id="继承中变量访问的特点"><a href="#继承中变量访问的特点" class="headerlink" title="继承中变量访问的特点"></a>继承中变量访问的特点</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230703214928217.png"
                      alt="image-20230703214928217"
                ></p>
<h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><table>
<thead>
<tr>
<th>关键字</th>
<th>访问对象</th>
<th>代码</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>子类局部</td>
<td>age</td>
</tr>
<tr>
<td>this</td>
<td>子类成员</td>
<td>this.age</td>
</tr>
<tr>
<td>super</td>
<td>父类成员</td>
<td>super.age</td>
</tr>
</tbody></table>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230703215657195.png"
                      alt="image-20230703215657195"
                ></p>
<h3 id="继承中，构造方法的访问特点"><a href="#继承中，构造方法的访问特点" class="headerlink" title="继承中，构造方法的访问特点"></a>继承中，构造方法的访问特点</h3><p>子类初始化前一定要完成父类数据的初始化</p>
<p>子类构造方法<strong>默认第一句为super(),访问父类无参构造方法</strong></p>
<table>
<thead>
<tr>
<th>父类</th>
<th>子类</th>
<th>测试类</th>
</tr>
</thead>
<tbody><tr>
<td>无参构造方法<br />带参构造方法</td>
<td>无参构造方法</td>
<td>父类无参<br />子类无参</td>
</tr>
<tr>
<td></td>
<td>带参构造方法</td>
<td>父类无参<br />子类带参</td>
</tr>
<tr>
<td>带参构造方法</td>
<td>super()<br />无参构造方法</td>
<td>父类带参<br />子类无参</td>
</tr>
<tr>
<td></td>
<td>super()<br />带参构造方法</td>
<td>父类带参<br />子类带参</td>
</tr>
</tbody></table>
<h3 id="继承中，成员方法的访问特点"><a href="#继承中，成员方法的访问特点" class="headerlink" title="继承中，成员方法的访问特点"></a>继承中，成员方法的访问特点</h3><p>通过子类对象访问一个方法</p>
<ul>
<li>子类成员范围找</li>
<li>父类成员范围找</li>
<li>如果都没有就报错(不考虑父亲的父亲…)</li>
</ul>
<h3 id="super内存图"><a href="#super内存图" class="headerlink" title="super内存图"></a>super内存图</h3><pre><code>    ![image-20230704074956004](../images/JAVASE基础09/image-20230704074956004.png)   
</code></pre>
<h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><p>@Override的使用检查方法重写是否有误</p>
<h4 id="方法重写注意事项"><a href="#方法重写注意事项" class="headerlink" title="方法重写注意事项"></a><strong>方法重写注意事项</strong></h4><p>父类中，私有方法，子类不能继承，</p>
<h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4><p>public  &gt; 默认 &gt; 私有</p>
<h3 id="继承的注意事项"><a href="#继承的注意事项" class="headerlink" title="继承的注意事项"></a>继承的注意事项</h3><p>不能同时继承多个类</p>
<p>支持多层继承</p>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="包package"><a href="#包package" class="headerlink" title="包package"></a>包package</h3><h4 id="什么是包"><a href="#什么是包" class="headerlink" title="什么是包"></a>什么是包</h4><p>包其实就是文件夹，方便对类进行分类管理</p>
<h4 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h4><p><strong>import  包名</strong></p>
<p>简化代码书写</p>
<h3 id="修饰符-1"><a href="#修饰符-1" class="headerlink" title="修饰符"></a>修饰符</h3><h4 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><table>
<thead>
<tr>
<th>修饰符</th>
<th>同一个类</th>
<th>同一个包中<br />子类和无关类</th>
<th>不同包的子类</th>
<th>不同包的无关类</th>
</tr>
</thead>
<tbody><tr>
<td>private</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>默认</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>pbulic</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
</tbody></table>
<h4 id="状态修饰符-final"><a href="#状态修饰符-final" class="headerlink" title="状态修饰符 final"></a>状态修饰符 final</h4><p>关键字<strong>fianl</strong>是最终的意思，可以修饰成员方法，成员变量，类</p>
<h5 id="状态修饰符-final特点"><a href="#状态修饰符-final特点" class="headerlink" title="状态修饰符 final特点"></a>状态修饰符 final特点</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230704102127067.png"
                      alt="image-20230704102127067"
                ></p>
<h5 id="修饰局部变量"><a href="#修饰局部变量" class="headerlink" title="修饰局部变量"></a>修饰局部变量</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230704102557407.png"
                      alt="image-20230704102557407"
                ></p>
<h4 id="静态修饰符-static"><a href="#静态修饰符-static" class="headerlink" title="静态修饰符 static"></a>静态修饰符 static</h4><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230704104733725.png"
                      alt="image-20230704104733725"
                ></p>
<h5 id="静态修饰符-static访问特点"><a href="#静态修饰符-static访问特点" class="headerlink" title="静态修饰符 static访问特点"></a>静态修饰符 static访问特点</h5><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230704105339122.png"
                      alt="image-20230704105339122"
                ></p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230704105603247.png"
                      alt="image-20230704105603247"
                ></p>
<h3 id="多态中成员访问特点"><a href="#多态中成员访问特点" class="headerlink" title="多态中成员访问特点"></a>多态中成员访问特点</h3><p><strong>成员变量</strong>:编译看左边，执行看左边-&gt;&gt;都看父类</p>
<p>**成员方法:**编译看左边，执行看右边</p>
<h3 id="多态的好处和弊端"><a href="#多态的好处和弊端" class="headerlink" title="多态的好处和弊端"></a>多态的好处和弊端</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230704135451773.png"
                      alt="image-20230704135451773"
                ></p>
<h3 id="多态中的转型"><a href="#多态中的转型" class="headerlink" title="多态中的转型"></a>多态中的转型</h3><p><strong>向上转型</strong></p>
<p>​				从子到父          Animal a &#x3D; new Cat();</p>
<p>​				父类引用指向子类对象 a.eat();</p>
<p><strong>向下转型</strong></p>
<p>​				从父到子          Animal a &#x3D; new Cat();<br>​											Cat c &#x3D;(Cat)a;</p>
<p>​				父类引用转为子类对象c.eat();  c.game;</p>
<h3 id="多态转型内存图"><a href="#多态转型内存图" class="headerlink" title="多态转型内存图"></a>多态转型内存图<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230704141523511.png"
                      alt="image-20230704141523511"
                ></h3><p>​		</p>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><p>在Java中，一个<strong>没有方法体</strong>的方法应该定义为<strong>抽象方法</strong>，而类中如果<strong>有抽象方法</strong>，该类必须<strong>定义为抽象类</strong></p>
<p><strong>关键字</strong>：<strong>abstract</strong></p>
<h4 id="抽象类的特点"><a href="#抽象类的特点" class="headerlink" title="抽象类的特点"></a>抽象类的特点</h4><p><strong>抽象类和抽象方法必须使用abstract 关键字修饰</strong></p>
<p>public abstract class 类名</p>
<p>public abstract void eat();</p>
<p><strong>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类</strong></p>
<p><strong>抽象类不能实例化</strong></p>
<p>抽象类如何实例化——&gt;参照多态的方式，通过子类对象实例化，这叫抽象类多态</p>
<p><strong>抽象类的子类</strong></p>
<p>要么重写抽象类中的所有抽象方法</p>
<p>要么是抽象类</p>
<h4 id="抽象类的成员特点"><a href="#抽象类的成员特点" class="headerlink" title="抽象类的成员特点"></a>抽象类的成员特点</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230704152335956.png"
                      alt="image-20230704152335956"
                ></p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>接口就是一种<strong>公共的规范标准</strong>，只要符合规范标准，大家都可以通用</p>
<h3 id="接口特点"><a href="#接口特点" class="headerlink" title="接口特点"></a>接口特点</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230704154603975.png"
                      alt="image-20230704154603975"
                ></p>
<h3 id="接口的成员特点"><a href="#接口的成员特点" class="headerlink" title="接口的成员特点"></a>接口的成员特点</h3><p><strong>成员变量</strong><br>只能是常量</p>
<p>默认修饰符: public static final</p>
<p><strong>构造方法</strong></p>
<p>接口<font color  =red>没有构造方法</font>，因为接口主要是对行为进行抽象的，是没有具体存在</p>
<p><font color  =red>一个类如果没有父类，默认继承自Object类成员方法</font></p>
<p><strong>只能是抽象方法</strong></p>
<p>默认修饰符: public abstract</p>
<h3 id="类和接口的关系"><a href="#类和接口的关系" class="headerlink" title="类和接口的关系"></a>类和接口的关系</h3><h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230704163637301.png"
                      alt="image-20230704163637301"
                >强调</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230704164909076.png"
                      alt="image-20230704164909076"
                ></p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230704165251197.png"
                      alt="image-20230704165251197"
                ></p>
<h2 id="形参和返回值（再看看）"><a href="#形参和返回值（再看看）" class="headerlink" title="形参和返回值（再看看）"></a>形参和返回值（<u>再看看</u>）</h2><h3 id="类名作为形参和返回值"><a href="#类名作为形参和返回值" class="headerlink" title="类名作为形参和返回值"></a>类名作为形参和返回值</h3><p>方法的形参是类名，其实需要的是该类的对象</p>
<p>方法的返回值是类名，其实返回的是该类的对象</p>
<h3 id="抽象类名作为形参和返回值"><a href="#抽象类名作为形参和返回值" class="headerlink" title="抽象类名作为形参和返回值"></a>抽象类名作为形参和返回值</h3><p>方法的形参是抽象类名，其实需要的是该抽象类的子类对象</p>
<p>方法的返回值是抽象类名，其实返回的是该抽象类的子类对象</p>
<h3 id="接口名作为形参和返回值"><a href="#接口名作为形参和返回值" class="headerlink" title="接口名作为形参和返回值"></a>接口名作为形参和返回值</h3><p>方法的形参是接口名，其实需要的是该接口的实现类对象</p>
<p>方法的返回值是接口名，其实返回的是该接口的实现类对象</p>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230704201446218.png"
                      alt="image-20230704201446218"
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inter</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//show();</span></span><br><span class="line">        <span class="type">Inter</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inter</span>();</span><br><span class="line">        i.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>​	<strong>格式:</strong></p>
<p>外部类名.内部类名.对象名&#x3D;外部类对象.内部类对象</p>
<p>​	<strong>范例:</strong></p>
<p> Outer.Inner.oi &#x3D; new Outer0.new Inner();</p>
<p><strong>但是常用</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230704205517276.png"
                      alt="image-20230704205517276"
                ></p>
<h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>在方法中定义的类</p>
<p>外界是无法直接使用，</p>
<p>需要在<strong>方法内部创建对象</strong>并使用该类可以<strong>直接访问外部类的成员</strong>，也可以访问<strong>方法内的局部变量</strong> </p>
<h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230704210801749.png"
                      alt="image-20230704210801749"
                ></p>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p><strong>无输出</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230704211136543.png"
                      alt="image-20230704211136543"
                ></p>
<p><strong>对象调方法</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230704211747651.png"
                      alt="image-20230704211747651"
                ></p>
<h3 id="匿名内部类在开发中的使用"><a href="#匿名内部类在开发中的使用" class="headerlink" title="匿名内部类在开发中的使用"></a>匿名内部类在开发中的使用</h3><p>课程p193</p>
<p>减少类的书写</p>
<h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><h4 id="math常用方法"><a href="#math常用方法" class="headerlink" title="math常用方法"></a>math常用方法</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230704213248012.png"
                      alt="image-20230704213248012"
                ></p>
<h3 id="System"><a href="#System" class="headerlink" title="System"></a>System</h3><h4 id="system常用方法"><a href="#system常用方法" class="headerlink" title="system常用方法"></a>system常用方法</h4><table>
<thead>
<tr>
<th>方法名</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>public static void exit (int status)</td>
<td>终止当前运行的Java 虚拟机，非零表示异常终止</td>
</tr>
<tr>
<td>public static currentTimeMillis()</td>
<td>返回当前时间(以毫秒为单位)</td>
</tr>
</tbody></table>
<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><h4 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h4><p>Object是类层次结构的根，每个类都可以将 Object作为超类。所有类都直接或者间接的继承自该类<br>构造方法: public Object()<br>回想面向对象中，为什么说子类的构造方法默认访问的是父类的无参构造方法?因为它们的顶级父类只有无参构造方法</p>
<h5 id="to-String"><a href="#to-String" class="headerlink" title="to String()"></a>to String()</h5><p>返回对象的字符串表示形式。建议所有子类重写该方法，自动生成</p>
<p>建议每次重写Alt+Insert</p>
<h5 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h5><p>比较对象是否相等。默认比较地址，重写可以比较内容，自动生成</p>
<h4 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h4><h5 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h5><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public static String toString(int[] a)</td>
<td>返回指定数组的内容的字符串表示形式</td>
</tr>
<tr>
<td>public static void sort(int[] a)</td>
<td>按照数字顺序排列指定的数组</td>
</tr>
</tbody></table>
<p>工具类的设计思想</p>
<p>构造方法用private修饰</p>
<p>成员用 public static修饰</p>
<h3 id="基本类型包装类"><a href="#基本类型包装类" class="headerlink" title="基本类型包装类"></a>基本类型包装类</h3><h4 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h4><p>将基本数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据常用的操作之一:<strong>用于基本数据类型与字符串之间的转换</strong></p>
<table>
<thead>
<tr>
<th>基本数据类型</th>
<th>包装类</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody></table>
<h4 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230705082827654.png"
                      alt="image-20230705082827654"
                ></p>
<h4 id="int和String的相互转换"><a href="#int和String的相互转换" class="headerlink" title="int和String的相互转换"></a>int和String的相互转换</h4><h5 id="int——-String"><a href="#int——-String" class="headerlink" title="int——-String"></a>int——-String</h5><ol>
<li><p>“”+number 进行连接</p>
</li>
<li><p>public static String &#x3D; String.valueOf(number)</p>
<p>String s &#x3D; String.valueOf(number);</p>
</li>
</ol>
<h5 id="String——int"><a href="#String——int" class="headerlink" title="String——int"></a>String——int</h5><ol>
<li><p>String——-Integer—-int</p>
<p>Integer i &#x3D; Integer.valueOf(s);</p>
<p>int x &#x3D; i.intValue;</p>
</li>
<li><p>​       int y &#x3D; Integer.parseInt(s);</p>
</li>
</ol>
<h4 id="案例-字符串数组排序"><a href="#案例-字符串数组排序" class="headerlink" title="案例 字符串数组排序"></a>案例 字符串数组排序</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;11 66 45 77 33 8 3 7&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把字符串中的数字数据存储到一个int类型的数组中</span></span><br><span class="line">        String[] array = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[array.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = Integer.parseInt(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%4d&quot;</span>, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出排序完的数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%4d&quot;</span>, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                sb.append(arr[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(arr[i]).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ss</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        System.out.println(ss);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="自动装箱与拆箱"><a href="#自动装箱与拆箱" class="headerlink" title="自动装箱与拆箱"></a>自动装箱与拆箱</h4><p>装箱:把基本数据类型转换为对应的包装类类型</p>
<p>拆箱:把包装类类型转换为对应的基本数据类型</p>
<h6 id="装箱"><a href="#装箱" class="headerlink" title="装箱"></a>装箱</h6><p>Integer i &#x3D; Integer.valueOf(100);</p>
<h6 id="自动装箱"><a href="#自动装箱" class="headerlink" title="自动装箱"></a>自动装箱</h6><p>Integer ii &#x3D; 100；</p>
<p>注意：ii！&#x3D;null</p>
<h6 id="拆箱"><a href="#拆箱" class="headerlink" title="拆箱"></a>拆箱</h6><p>ii &#x3D; i.intValue()+200;</p>
<h6 id="自动拆箱"><a href="#自动拆箱" class="headerlink" title="自动拆箱"></a>自动拆箱</h6><p>ii+&#x3D;200；</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230705095829078.png"
                      alt="image-20230705095829078"
                ></p>
<h3 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h3><h4 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h4><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public Date()</td>
<td>分配一个 Date对象，并初始化，以便它代表它被分配的时间，精确到毫秒</td>
</tr>
<tr>
<td>public Date(long data)</td>
<td>分配一个 Date对象，并将其初始化为表示从标准基准时间起指定的毫秒数</td>
</tr>
</tbody></table>
<h5 id="Data常用方法"><a href="#Data常用方法" class="headerlink" title="Data常用方法"></a>Data常用方法</h5><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public long  getTime()</td>
<td>获取的是日期对象从1970年1月1日00:00:00到现在的毫秒值</td>
</tr>
<tr>
<td>public void setTime(long time)</td>
<td>设置时间，给的是毫秒值</td>
</tr>
</tbody></table>
<h4 id="SimpleDateFormat-类"><a href="#SimpleDateFormat-类" class="headerlink" title="SimpleDateFormat 类"></a>SimpleDateFormat 类</h4><h5 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h5><p>SimpleDateFormat是一个具体的类，用于以区域设置敏感的方式格式化和解析日期。我们重点学习日期格式化和解析</p>
<p>日期和时间格式由日期和时间模式字符串指定，在期和时间模式字符串中，从A到以及从a到引号的字母被解释为表示日期或时间字符串的组件的模式字母</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230705103144151.png"
                      alt="image-20230705103144151"
                ></p>
<h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230705103225255.png"
                      alt="image-20230705103225255"
                ></p>
<p><strong>例：从 Date 到 string和从 String 到 Date</strong></p>
<p><strong>从 Date 到 string</strong> </p>
<p>public final String format(Date date)    将日期格式化成日期&#x2F;时间字符串解析:</p>
<p><strong>从 String 到 Date</strong></p>
<p>public Date parse (String source)       从给定字符串的开始解析文本以生成日期</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230705103814462.png"
                      alt="image-20230705103814462"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230705103757194.png"
                      alt="image-20230705103757194"
                ></p>
<h5 id="日期工具类的编写"><a href="#日期工具类的编写" class="headerlink" title="日期工具类的编写"></a>日期工具类的编写</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230705110055604.png"
                      alt="image-20230705110055604"
                ></p>
<h4 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h4><h5 id="概述-8"><a href="#概述-8" class="headerlink" title="概述"></a>概述</h5><p>Calendar为某一时刻和一组日历字段之间的转换提供了一些方法，并为操作日历字段提供了一些方法</p>
<p>Calendar提供了一个类方法getlnstance 用于获取 Calendar对象，</p>
<p>其日历字段已使用当前日期和时间初始化:Calendar rightNow &#x3D;Calendar.getlnstance();</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230705111325386.png"
                      alt="image-20230705111325386"
                ></p>
<h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public int get(int filed)</td>
<td>返回给定日历字段的值</td>
</tr>
<tr>
<td>public abstract  void add(int filed,int amount)</td>
<td>根据日历的规则，将指定的时间量添加或减去给定的日历字段</td>
</tr>
<tr>
<td>public final  void set(int year,int month,int date)</td>
<td>设置当前日历的年月日</td>
</tr>
</tbody></table>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="概述-9"><a href="#概述-9" class="headerlink" title="概述"></a>概述</h3><p>异常:就是程序出现了不正常的情况</p>
<h3 id="异常体系"><a href="#异常体系" class="headerlink" title="异常体系"></a>异常体系</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230705151207927.png"
                      alt="image-20230705151207927"
                ></p>
<h3 id="JVM的默认处理方案"><a href="#JVM的默认处理方案" class="headerlink" title="JVM的默认处理方案"></a>JVM的默认处理方案</h3><p>如果程序出现了问题，我们<strong>没有做任何处理</strong>，</p>
<p>最终JVM会做默认的处理：</p>
<p>把异常的名称，异常原因及异常出现的位置等信息输出在了控制台</p>
<p>程序停止执行</p>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>try….catch</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230705152247845.png"
                      alt="image-20230705152247845"
                ></p>
<h4 id="三种异常处理的显示方法"><a href="#三种异常处理的显示方法" class="headerlink" title="三种异常处理的显示方法"></a>三种异常处理的显示方法</h4><p>多用e.printStackTrace();</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230705153617248.png"
                      alt="image-20230705153617248"
                ></p>
<h3 id="编译时异常和运行时异常的区别"><a href="#编译时异常和运行时异常的区别" class="headerlink" title="编译时异常和运行时异常的区别"></a>编译时异常和运行时异常的区别</h3><p>Java 中的异常被分为两大类: <font color=red><strong>编译时异常</strong></font>和<font color=red><strong>运行时异常</strong></font>也被称为<font color=red><strong>受检异常</strong></font>和<font color=red><strong>非受检异常</strong></font></p>
<p>所有的<strong>RuntimeException类及其子类</strong>被称为运行时异常，</p>
<p><strong>其他</strong>的异常都是编译时异常</p>
<h4 id="处理方案"><a href="#处理方案" class="headerlink" title="处理方案"></a>处理方案</h4><p><strong>编译时异常</strong>:必须显示处理，否则程序就会发生错误，无法通过编译</p>
<p><strong>运行时异常</strong>:无需显示处理，也可以和编译时异常一样处理</p>
<h3 id="异常处理之-throws"><a href="#异常处理之-throws" class="headerlink" title="异常处理之 throws"></a>异常处理之 throws</h3><p>格式：</p>
<p>throws 异常类名；</p>
<p><strong>注意</strong>:这个格式是跟在方法的括号后面的</p>
<p>只是抛出了异常，还是不能继续运行</p>
<p><strong>编译时异常必须要进行处理</strong>，两种外理方案:tvcatch或者throws，如果采用throws 这种方案，将来谁调，用谁处理</p>
<p><strong>运行时异常可以不处理</strong>，出现问题后，需要我们回来修改代码</p>
<h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>例子</p>
<p>1</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> myyichang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScoreException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ScoreException</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ScoreException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>2</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> myyichang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkScore</span><span class="params">(<span class="type">int</span> score)</span> <span class="keyword">throws</span> ScoreException &#123;</span><br><span class="line">        <span class="keyword">if</span>(score&lt;<span class="number">0</span>||score&gt;<span class="number">100</span>)&#123;</span><br><span class="line"><span class="comment">//            throw  new ScoreException();</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ScoreException</span>(<span class="string">&quot;分数有误&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;分数正常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>3</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> myyichang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLOutput;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teachertext</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;输入分数&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t.checkScore(score);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ScoreException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230705161536717.png"
                      alt="image-20230705161536717"
                ></p>
<h2 id="集合体系结构"><a href="#集合体系结构" class="headerlink" title="集合体系结构"></a>集合体系结构</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>集合类的特点:提供一种存储空间可变的存储模型，存储的数据容量可以随时发生改变</p>
<h3 id="集合类体系结构"><a href="#集合类体系结构" class="headerlink" title="集合类体系结构"></a>集合类体系结构</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230706072422605.png"
                      alt="image-20230706072422605"
                ></p>
<h3 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h3><h4 id="collection-常用方法"><a href="#collection-常用方法" class="headerlink" title="collection 常用方法"></a>collection 常用方法</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230706073453808.png"
                      alt="image-20230706073453808"
                ></p>
<h4 id="Collection-集合的遍历"><a href="#Collection-集合的遍历" class="headerlink" title="Collection 集合的遍历"></a>Collection 集合的遍历</h4><p>lterator:迭代器，集合的专用遍历方式</p>
<p>lterator &lt; E &gt;iterator(): 返回此集合中元素的迭代器，通过集合的iterator()方法得到</p>
<p>迭代器是通过集合的iterator()方法得到的，所以我们说它是依赖于集合而存在的</p>
<h5 id="lterator中的常用方法"><a href="#lterator中的常用方法" class="headerlink" title="lterator中的常用方法"></a>lterator中的常用方法</h5><p>E next(): 返回选代中的下一个元素</p>
<p>boolean hasNext(): 如果选代具有更多元素，则返回true </p>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h4 id="List集合概述"><a href="#List集合概述" class="headerlink" title="List集合概述"></a>List集合概述</h4><p>有序集合(也称为序列)，用户可以精确控制列表中每个元素的插入位置。用户可以通过整数索引访问元素并搜索列表中的元素与Set集合不同，列表通常允许重复的元素</p>
<p>List &lt; String &gt; list  &#x3D; new ArrayList&lt; String&gt;();cv  </p>
<h4 id="List集合特点"><a href="#List集合特点" class="headerlink" title="List集合特点"></a>List集合特点</h4><p>有序:<strong>存储和取出的元素顺序一致</strong></p>
<p>可重复:存储的元素<strong>可以重复</strong></p>
<h4 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法"></a>特有方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void add (int index E element)</td>
<td>在此集合中的指定位置插入指定的元素</td>
</tr>
<tr>
<td>E remove(int index)</td>
<td>删除指定索引处的元素，返回被删除的元素</td>
</tr>
<tr>
<td>E set (int index,E element)</td>
<td>修改指定索引处的元素，返回被修改的元素</td>
</tr>
<tr>
<td>E get(int  index)</td>
<td>返回指定索引处的元素</td>
</tr>
</tbody></table>
<h4 id="并发修改异常"><a href="#并发修改异常" class="headerlink" title="并发修改异常"></a>并发修改异常</h4><p>通过迭代器遍历的 过程中，通过集合获取元素，预期修改值与实际修改值不一样</p>
<h4 id="Listlterator列表迭代器"><a href="#Listlterator列表迭代器" class="headerlink" title="Listlterator列表迭代器"></a>Listlterator列表迭代器</h4><p>通过List集合的listlterator0方法得到，所以说它是List集合特有的迭代器用于允许程序员沿任一方向遍历列表的列表迭代器，在迭代期间修改列表，并获取列表中迭代器的当前位置 			 </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230706095745716.png"
                      alt="image-20230706095745716"
                ></p>
<h4 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230706102012271.png"
                      alt="image-20230706102012271"
                ></p>
<h4 id="使用情况"><a href="#使用情况" class="headerlink" title="使用情况"></a>使用情况</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230706103323967.png"
                      alt="image-20230706103323967"
                ></p>
<h4 id="常见数据结构"><a href="#常见数据结构" class="headerlink" title="常见数据结构"></a>常见数据结构</h4><h5 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230706103635241.png"
                      alt="image-20230706103635241"
                ></p>
<h5 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230706104438062.png"
                      alt="image-20230706104438062"
                ></p>
<h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230706104642601.png"
                      alt="image-20230706104642601"
                ></p>
<h5 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230706105435033.png"
                      alt="image-20230706105435033"
                ></p>
<h4 id="List集合子类特点"><a href="#List集合子类特点" class="headerlink" title="List集合子类特点"></a>List集合子类特点</h4><p>List集合常用子类: ArrayList，LinkedList</p>
<p><strong>ArrayList</strong>: 底层数据结构是数组，查询快，增删慢</p>
<p><strong>LinkedList</strong>: 底层数据结构是链表，查询慢，增删快</p>
<h4 id="LinkedLIst集合的特有功能"><a href="#LinkedLIst集合的特有功能" class="headerlink" title="LinkedLIst集合的特有功能"></a>LinkedLIst集合的特有功能</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230706112439692.png"
                      alt="image-20230706112439692"
                ></p>
<h3 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h3><h4 id="概述-10"><a href="#概述-10" class="headerlink" title="概述"></a>概述</h4><p>Set集合特点</p>
<p>不包含重复元素的集合</p>
<p>没有带索引的方法，所以不能使用普通for循环遍历</p>
<h4 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230706140333701.png"
                      alt="image-20230706140333701"
                ></p>
<h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p><strong>HashSet集合特点：</strong></p>
<ol>
<li><p>底层数据结构是哈希表</p>
</li>
<li><p>对集合的迭代顺序不作任何保证，也就是说不保证存储和取出的元素顺序一致没有带索的方法，所以不能使用普通for循环遍历</p>
</li>
<li><p>由于是Set集合，所以是不包含重复元素的集合</p>
</li>
</ol>
<h4 id="HashSet集合保证元素唯一性源码分析"><a href="#HashSet集合保证元素唯一性源码分析" class="headerlink" title="HashSet集合保证元素唯一性源码分析"></a>HashSet集合保证元素唯一性源码分析</h4><p>HashSet集合存储元素<br>要保证元素唯一性，需要重写hashCode()和equals()</p>
<p><strong>HashSet集合添加一个元素的过程</strong></p>
<p>   <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230706144012539.png"
                      alt="image-20230706144012539"
                ></p>
<h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p>JDK8之前，底层采用<font color=red>数组+链表</font>实现，可以说是一个元素为链表的数组</p>
<p>JDK8以后，在长度比较长的时候，底层实现了优化</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230706144630257.png"
                      alt="image-20230706144630257"
                ></p>
<h4 id="LinkedHashSet集合特点"><a href="#LinkedHashSet集合特点" class="headerlink" title="LinkedHashSet集合特点"></a>LinkedHashSet集合特点</h4><p>1:哈希表和链表实现的Set接口，具有可预测的迭代次序</p>
<p>2:由链表保证元素有序，也就是说元素的存储和取出顺序是一致的</p>
<p>3:由哈希表保证元素唯一，也就是说没有重复的元素 </p>
<h4 id="TreeSet集合特点"><a href="#TreeSet集合特点" class="headerlink" title="TreeSet集合特点"></a>TreeSet集合特点</h4><p>元素有序，这里的顺序不是指存储和取出的顺序，而是按照一定的规则进行排序，具体排序方式取决于构造方法<br>        TreeSet(): 根据其元素的自然排序进行排序<br>        TreeSet(Comparator comparaton): 根据指定的比较器进行排序</p>
<p>没有带索引的方法,所以<strong>不能使用普通for循环遍历</strong></p>
<p>由于是Set集合，所以<strong>不包含重复元素的集合</strong></p>
<h4 id="自然排序Comparable的使用"><a href="#自然排序Comparable的使用" class="headerlink" title="自然排序Comparable的使用"></a>自然排序Comparable的使用</h4><p><strong>存储学生对象并遍历，创建TreeSet集合使用无参构造方法要求:按照年龄从小到大排序，年龄相同时，按照姓名的字母顺序排序</strong><br><strong>结论</strong><br>用TreeSet集合存储自定义对象，无参构造方法使用的是自然排序对元素进行排序的自然排序，就是让元素所属的类实现Comparable接口，重写compareTo(To)方法重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写</p>
<h4 id="比较器排序Comparator的使用"><a href="#比较器排序Comparator的使用" class="headerlink" title="比较器排序Comparator的使用"></a>比较器排序Comparator的使用</h4><p><strong>存储学生对象并遍历，创建TreeSet集合使用带参构造方法要求:按照年龄从小到大排序，年龄相同时，按照姓名的字母顺序排序</strong><br><strong>结论</strong></p>
<ol>
<li><p>用TreeSet集合存储自定义对象，带参构造方法使用的是<strong>比较器排序</strong>对元素进行排序的</p>
</li>
<li><p>比较器排序，就是<strong>让集合构造方法接收Comparator的实现类对象</strong>，重写compare(To1,To2)方法</p>
</li>
<li><p>重写方法时一定要注意排序规则必须按照要求的主要条件和次要条件来写</p>
</li>
</ol>
<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h4 id="概述-11"><a href="#概述-11" class="headerlink" title="概述"></a>概述</h4><p>泛型:是JDK5中引入的特性，它提供了编译时类型安全检测机制，该机制允许在编译时检测到非法的类型它的<strong>本质是参数化类型</strong>，也就是说所操作的数据类型被指定为一个参数</p>
<p>提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢?</p>
<p>顾名思义，<strong>就是将类型由原来的具体的类型参数化，然后在使用&#x2F;调用时传入具体的类型</strong></p>
<p>这种参数类型可以用在类、方法和接口中，分别被称为<strong>泛型类</strong>、泛型方法、<strong>泛型接口</strong> </p>
<h4 id="格式及好处"><a href="#格式及好处" class="headerlink" title="格式及好处"></a>格式及好处</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230706211424720.png"
                      alt="image-20230706211424720"
                ></p>
<h4 id="泛型方法改进"><a href="#泛型方法改进" class="headerlink" title="泛型方法改进"></a>泛型方法改进</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230706213835277.png"
                      alt="image-20230706213835277"
                ></p>
<h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><h4 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h4><p>为了表示各种泛型List的父类，可以使用类型通配符</p>
<ol>
<li><p>类型通配符:&lt;?&gt;</p>
</li>
<li><p>List&lt;?&gt;:表示元素类型未知的List，它的元素可以匹配任何的类型这种带通配符的</p>
</li>
<li><p>List仅表示它是各种泛型List的父类，并不能把元素添加到其中</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230706214440880.png"
                      alt="image-20230706214440880"
                ></p>
</li>
</ol>
<h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>可变参数又称参数个数可变，用作方法的形参出现，那么方法参数个数就是可变的了</p>
<p><strong>格式:修饰符返回值类型方法名(数据类型…变量名)</strong></p>
<p><strong>范例: public static int sum(int…a){}</strong></p>
<p><strong>实际上封装到了数组a中</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230706215406297.png"
                      alt="image-20230706215406297"
                ></p>
<p><strong>有多个参数，可变参数放到后面</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230706215611119.png"
                      alt="image-20230706215611119"
                ></p>
<h4 id="可变参数的使用"><a href="#可变参数的使用" class="headerlink" title="可变参数的使用"></a>可变参数的使用</h4><h5 id="Arrays工具类中有一个静态方法"><a href="#Arrays工具类中有一个静态方法" class="headerlink" title="Arrays工具类中有一个静态方法:"></a><strong>Arrays工具类中有一个静态方法:</strong></h5><p>public static &lt; T &gt;List&lt; T &gt; asList (T…a): 返回由指定数组支持的固定大小的列表</p>
<p>不支持add,remove  因为会改变集合的大小</p>
<p>支持set(1,”lihuibear”);</p>
<h5 id="List接口中有一个静态方法"><a href="#List接口中有一个静态方法" class="headerlink" title="List接口中有一个静态方法:"></a><strong>List接口中有一个静态方法:</strong></h5><p>public static &lt; E &gt; List&lt; E &gt; of (E…elements): 返回包含任意数量元素的不可变列表</p>
<p>不支持增删改操作</p>
<h5 id="Set接口中有一个静态方法"><a href="#Set接口中有一个静态方法" class="headerlink" title="Set接口中有一个静态方法:"></a><strong>Set接口中有一个静态方法:</strong></h5><p>public static&lt; E &gt;Set&lt; E &gt; of (E…elements) : 返回一个包含任意数量元素的不可变集合</p>
<p>不支持增删，没有改的操作</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230707074403066.png"
                      alt="image-20230707074403066"
                ></p>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="概述-12"><a href="#概述-12" class="headerlink" title="概述"></a>概述</h4><p>Interface Map&lt;K，V&gt;</p>
<p>K:键的类型，V:值的类型</p>
<p>将键映射到值的对象；不能包含重复的键;每个键可以映射到最多一个值</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230707075422953.png"
                      alt="image-20230707075422953"
                ></p>
<h4 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230707075553811.png"
                      alt="image-20230707075553811"
                ></p>
<h4 id="Map集合的获取功能"><a href="#Map集合的获取功能" class="headerlink" title="Map集合的获取功能"></a>Map集合的获取功能</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230707080222435.png"
                      alt="image-20230707080222435"
                ></p>
<h4 id="Map集合的遍历"><a href="#Map集合的遍历" class="headerlink" title="Map集合的遍历"></a>Map集合的遍历</h4><p><strong>1</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230707083951761.png"
                      alt="image-20230707083951761"
                ></p>
<p><strong>2</strong></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8009/image-20230707084237523.png"
                      alt="image-20230707084237523"
                ></p>
<h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><h4 id="概述-13"><a href="#概述-13" class="headerlink" title="概述"></a>概述</h4><p>是针对集合操作的工具类</p>
<h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><p>publicstatic&lt;T extends Comparable&lt;? super T &gt;&gt; void sort（List&lt; T &gt; list): 将指定的列表按升序排序</p>
<p>publicstatic void reverse(List&lt;?&gt; list): 反转指定列表中元素的顺序</p>
<p>public static void shuffle(List&lt;?&gt;list): 使用默认的随机源随机排列指定的列表</p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
        <category>JAVASE</category>
      </categories>
      <tags>
        <tag>项目组</tag>
        <tag>黑马程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVASE基础10</title>
    <url>/2023/07/10/JAVASE%E5%9F%BA%E7%A1%8010/</url>
    <content><![CDATA[<h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>IO:输入&#x2F;输出(Input&#x2F;Output)</p>
<p>流:是一种抽象概念，是对数据传输的总称。也就是说数据在设备间的传输称为流，流的本质是数据传输</p>
<p>lO流就是用来处理设备间数据传输问题的</p>
<p><strong>常见的应用</strong>:文件复制;文件上传;文件下载</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230710171838076.png"
                      alt="image-20230710171838076"
                ></p>
<p>一般来说，我们说IO流的分类是按照数据类型来分的</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>那么这两种流都在什么情况下使用呢?<br>    如果数据通过Window自带的记事本软件打开，我们还可以读懂里面的内容否则使用字节流。如果你不知道该使用哪种类型的流，就使用字节流。</p>
<h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>File:它是文件和目录路径名的抽象表示<br>文件和目录是可以通过File封装成对象的<br>对于File而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名而已。它可以是存在的，也可以是不存在的.将来是要通过具体的操作把这个路径的内容转换为具体存在的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230710111307144.png"
                      alt="image-20230710111307144"
                ></p>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230710112157398.png"
                      alt="image-20230710112157398"
                ></p>
<h4 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230710161730192-16889770712261.png"
                      alt="image-20230710161730192"
                ></p>
<h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p><strong>递归概述:</strong></p>
<p>以编程的角度来看，递归指的是方法定义中调用方法本身的现象</p>
<p><strong>递归解决问题的思路:</strong></p>
<p>把一个复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解递归策</p>
<p>略只需少量的程序就可描述出解题过程所需要的多次重复计算</p>
<h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><h4 id="字节流写数据"><a href="#字节流写数据" class="headerlink" title="字节流写数据"></a>字节流写数据</h4><p><strong>字节流抽象基类</strong></p>
<p>InputStream: 这个抽象类是表示字节输入流的所有类的超类</p>
<p>OutputStream:这个抽象类是表示字节输出流的所有类的超类</p>
<p>子类名特点:子类名称都是以其父类名作为子类名的后缀</p>
<p>FileOutputStream: 文件输出流用于将数据写入File</p>
<p>FileOutputStream(Stringname): 创建文件输出流以指定的名称写入文件</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230710180637561.png"
                      alt="image-20230710180637561"
                ></p>
<h4 id="字节流写数据的3种方式"><a href="#字节流写数据的3种方式" class="headerlink" title="字节流写数据的3种方式"></a>字节流写数据的3种方式</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230710185409736.png"
                      alt="image-20230710185409736"
                ></p>
<h4 id="字节流写数据的两个小问题"><a href="#字节流写数据的两个小问题" class="headerlink" title="字节流写数据的两个小问题"></a>字节流写数据的两个小问题</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230710194356609.png"
                      alt="image-20230710194356609"
                ></p>
<h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230710194711617.png"
                      alt="image-20230710194711617"
                ></p>
<h4 id="字节流读数据"><a href="#字节流读数据" class="headerlink" title="字节流读数据"></a>字节流读数据</h4><p>一次读一个</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//标准格式</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;FILE\\lihuibear002.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> by;</span><br><span class="line">        <span class="keyword">while</span>((by=fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)by);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230710205502183.png"
                      alt="image-20230710205502183"
                ></p>
<h4 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h4><p><strong>字节缓冲流:</strong><br>BufferOutputStream:  该类实现缓冲输出流。通过设置这样的输出流，应用程序可以向底层输出流写入字节，而不必为写入的每个字节导致底层系统的调用</p>
<p>BuferedinputStream: 创建BufferedInputStream将创建一个内部缓冲区数组。当从流中读取或跳过字节时，内部缓冲区将根据需要从所包含的输入流中重新填充，一次很多字节</p>
<p><strong>构造方法:</strong><br>字节缓冲输出流: </p>
<p>BufferedOutputStream(OutputStream out)</p>
<p>字节缓冲输入流: </p>
<p>BufferedInputStream(InputStream in）</p>
<p>字节缓冲流<font color =red>仅仅提供缓冲区</font>,而真正的读写数据还得依靠基本的字节流对象进行操作</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230710213953404.png"
                      alt="image-20230710213953404"
                ></p>
<h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230710220906985.png"
                      alt="image-20230710220906985"
                ></p>
<h4 id="编码表"><a href="#编码表" class="headerlink" title="编码表"></a>编码表</h4><h5 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230711073631529.png"
                      alt="image-20230711073631529"
                ></p>
<h5 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h5><p>是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等计算机要准确的存储和识别各种字符集符号，就需要进行字符编码，一套字符集必然至少有一套字符编码.常见字符集有ASCII字符集、GBXXX字符集、Unicode字符集等</p>
<h4 id="编码解码问题"><a href="#编码解码问题" class="headerlink" title="编码解码问题"></a>编码解码问题</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230711075726562.png"
                      alt="image-20230711075726562"
                ></p>
<p>​    </p>
<h5 id="字符流抽象基本类"><a href="#字符流抽象基本类" class="headerlink" title="字符流抽象基本类"></a>字符流抽象基本类</h5><p>Reader:字符输入流的抽象类</p>
<p>Writer:字符输出流的抽象类</p>
<p><strong>字符流中和编码解码问题相关的两个类</strong></p>
<p>InputStreamReader</p>
<p>OutputStreamWriter</p>
<h4 id="字符流写数据的5种方式"><a href="#字符流写数据的5种方式" class="headerlink" title="字符流写数据的5种方式"></a>字符流写数据的5种方式</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230711082147384.png"
                      alt="image-20230711082147384"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230711083230734.png"
                      alt="image-20230711083230734"
                ></p>
<h4 id="字符流读数据的2种方法"><a href="#字符流读数据的2种方法" class="headerlink" title="字符流读数据的2种方法"></a>字符流读数据的2种方法</h4><p>和字节流一样</p>
<h4 id="字符缓冲流复制文件"><a href="#字符缓冲流复制文件" class="headerlink" title="字符缓冲流复制文件"></a>字符缓冲流复制文件</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230711094122993.png"
                      alt="image-20230711094122993"
                ></p>
<h4 id="字符缓冲流特有功能"><a href="#字符缓冲流特有功能" class="headerlink" title="字符缓冲流特有功能"></a>字符缓冲流特有功能</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230711095104741.png"
                      alt="image-20230711095104741"
                ></p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230711100144004.png"
                      alt="image-20230711100144004"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230711100209064.png"
                      alt="image-20230711100209064"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230711100302768.png"
                      alt="image-20230711100302768"
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//成绩文本</span></span><br><span class="line"><span class="keyword">package</span> lihuibear002;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import com.sun.org.apache.xpath.internal.operations.String;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stuedntscore</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student s1, Student s2)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> s2.getSum() - s1.getSum();</span><br><span class="line">                <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> num == <span class="number">0</span> ? s1.getScore_CH() - s2.getScore_CH() : num;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> num2 == <span class="number">0</span> ? s1.getScore_MA() - s2.getScore_MA() : num2;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num4</span> <span class="operator">=</span> num3 == <span class="number">0</span> ? s1.getName().compareTo(s2.getName()) : num3;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> num4;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();<span class="comment">//???</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;语文：&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">score_CH</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;数学：&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">score_MA</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;英语：&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">score_EN</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">            s.setName(name);</span><br><span class="line">            s.setScore_CH(score_CH);</span><br><span class="line">            s.setScore_MA(score_MA);</span><br><span class="line">            s.setScore_EN(score_EN);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            ts.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;FILE\\lihuibear004.txt&quot;</span>));</span><br><span class="line">        <span class="keyword">for</span> (Student s : ts) &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            sb.append(s.getName()).append(<span class="string">&quot;,&quot;</span>).append(s.getScore_CH()).append(<span class="string">&quot;,&quot;</span>).append(s.getScore_MA()).append(<span class="string">&quot;,&quot;</span>).append(s.getScore_EN()).append(<span class="string">&quot;,&quot;</span>).append(s.getSum());</span><br><span class="line">            bw.write(sb.toString());</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lihuibear002;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> score_CH;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> score_MA;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> score_EN;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> score_CH, <span class="type">int</span> score_MA, <span class="type">int</span> score_EN)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.score_CH = score_CH;</span><br><span class="line">        <span class="built_in">this</span>.score_MA = score_MA;</span><br><span class="line">        <span class="built_in">this</span>.score_EN = score_EN;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScore_CH</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score_CH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore_CH</span><span class="params">(<span class="type">int</span> score_CH)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.score_CH = score_CH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScore_MA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score_MA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore_MA</span><span class="params">(<span class="type">int</span> score_MA)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.score_MA = score_MA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScore_EN</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score_EN;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore_EN</span><span class="params">(<span class="type">int</span> score_EN)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.score_EN = score_EN;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.score_CH+<span class="built_in">this</span>.score_MA+<span class="built_in">this</span>.score_EN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="复制文件的异常处理"><a href="#复制文件的异常处理" class="headerlink" title="复制文件的异常处理"></a>复制文件的异常处理</h4><h5 id="标准写法"><a href="#标准写法" class="headerlink" title="标准写法"></a>标准写法</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230711173600559.png"
                      alt="image-20230711173600559"
                ></p>
<h5 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230711173506161.png"
                      alt="image-20230711173506161"
                ></p>
<h3 id="特殊操作流"><a href="#特殊操作流" class="headerlink" title="特殊操作流"></a>特殊操作流</h3><p>System类中有两个静态的成员变量:<br><strong>publicstatic finallnputStreamin:</strong> <u>标准输入流</u>。通常该流对应于键盘输入或由主机环境或用户指定的另一个输入源</p>
<p><strong>publicstatic final PrintStream out:</strong> <u>标准输出流</u>。通常该流对应于显示输出或由主机环境或用户指定的另一个输出目标</p>
<h4 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h4><h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230711192656375.png"
                      alt="image-20230711192656375"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230711193738515.png"
                      alt="image-20230711193738515"
                ></p>
<h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230711193945844.png"
                      alt="image-20230711193945844"
                ></p>
<h5 id="字节打印流"><a href="#字节打印流" class="headerlink" title="字节打印流"></a>字节打印流</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230711204341168.png"
                      alt="image-20230711204341168"
                ></p>
<h5 id="字符打印流"><a href="#字符打印流" class="headerlink" title="字符打印流"></a>字符打印流</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230711204257162.png"
                      alt="image-20230711204257162"
                ></p>
<h4 id="对象序列化流"><a href="#对象序列化流" class="headerlink" title="对象序列化流"></a>对象序列化流</h4><p><strong>对象序列化</strong>:就是将对象保存到磁盘中，或者在网络中传输对象这种机制就是使用一个字节序列表示一个对象，该字节序列包念:对象的类型、对象的数据和对象中存储的属性等信息字节序列写到文件之后，相当于文件中持久保存了一个对象的信息反之，该字节序列还可以从文件中读取回来，重构对象，对它进行反序列化</p>
<p><strong>要实现序列化和反序列化就要使用对象序列化流和对象反序列化流:</strong></p>
<p><strong>对象序列化流</strong>:ObiectOutputStream</p>
<p><strong>对象反序列化流</strong>:ObjectlnputStream</p>
<h5 id="对象序列化流-1"><a href="#对象序列化流-1" class="headerlink" title="对象序列化流"></a>对象序列化流</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230711210331783.png"
                      alt="image-20230711210331783"
                ></p>
<p><font color=red size =5 >注意</font></p>
<p>一个对象要想被序列化，该对象所属的类必须必须实现Serializable 接口</p>
<p>Serializable是一个<strong>标记接口</strong>，实现该接口，<strong>不需要重写任何方法</strong></p>
<h5 id="对象反序列化流"><a href="#对象反序列化流" class="headerlink" title="对象反序列化流:"></a><strong>对象反序列化流</strong>:</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230711212100733.png"
                      alt="image-20230711212100733"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230711212709648.png"
                      alt="image-20230711212709648"
                ></p>
<h4 id="seeriaVersionUID-transient"><a href="#seeriaVersionUID-transient" class="headerlink" title="seeriaVersionUID &amp;transient"></a>seeriaVersionUID &amp;transient</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230712080610639.png"
                      alt="image-20230712080610639"
                ></p>
<h4 id="Properties概述"><a href="#Properties概述" class="headerlink" title="Properties概述"></a>Properties概述</h4><p>是一个Map体系的集合类</p>
<p>Properties可以保存到流中或从流中加载</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230712081413989.png"
                      alt="image-20230712081413989"
                ></p>
<h5 id="properties特有方法"><a href="#properties特有方法" class="headerlink" title="properties特有方法"></a>properties特有方法</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230712081519903.png"
                      alt="image-20230712081519903"
                ></p>
<p><strong>例子：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230712083003175.png"
                      alt="image-20230712083003175"
                ></p>
<h5 id="properties与IO流结合"><a href="#properties与IO流结合" class="headerlink" title="properties与IO流结合"></a>properties与IO流结合</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230712084110408.png"
                      alt="image-20230712084110408"
                ></p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="实现多线程"><a href="#实现多线程" class="headerlink" title="实现多线程"></a>实现多线程</h3><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><p>进程:是<strong>正在运行</strong>的程序</p>
<ul>
<li>是系统进行资源分配和调用的独立单位</li>
<li>每一个进程都有它自己的内存空间和系统资源</li>
</ul>
<h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><p> 线程:是进程中的单个顺序控制流，<strong>是一条执行路径</strong></p>
<ul>
<li>单线程:一个进程如果只有一条执行路径，则称为单线程程序</li>
<li>多线程:一个进程如果有多条执行路径，则称为多线程程序</li>
</ul>
<h4 id="多线程的实现方法1"><a href="#多线程的实现方法1" class="headerlink" title="多线程的实现方法1"></a>多线程的实现方法1</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230712112859848.png"
                      alt="image-20230712112859848"
                ></p>
<h4 id="设置和获取线程名称"><a href="#设置和获取线程名称" class="headerlink" title="设置和获取线程名称"></a>设置和获取线程名称</h4><p>Thread类中设置和获取线程名称的方法</p>
<ul>
<li>void setName (String name): 将此线程的名称更改为等于参数name</li>
<li>String getName0:返回此线程的名称</li>
<li>通过构造方法也可以设置线程名称</li>
</ul>
<p>如何获取main0方法所在的线程名称?</p>
<p>public static Thread currentThread(): 返回对当前正在执行的线程对象的引用</p>
<h4 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h4><p>线程有两种调度模型</p>
<ul>
<li>**分时调度模型:**所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间片</li>
<li>**抢占式调度模型:**优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个，优先级高的线程获取的CPU时间片相对多一些</li>
</ul>
<p><strong>Java使用的是抢占式调度模型</strong></p>
<p>假如计算机只有一个CPU，那么CPU 在某一个时刻只能执行一条指令，线程只有得到CPU时间片，也就是使用权才可以执行指令。所以说多线程程序的执行是有<strong>随机性</strong>，因为谁抢到CPU的使用权是不一定的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230712144047074.png"
                      alt="image-20230712144047074"
                ></p>
<p>&#x2F;&#x2F;System.out.println(Thread.MAX PRIORITY);10</p>
<p> &#x2F;&#x2F;System.out.println(Thread.MIN PRIORITY);1</p>
<p> &#x2F;&#x2F;System.out.println(Thread.NORM PRIORITY); &#x2F;&#x2F;5默认<br>&#x2F;&#x2F;设置正确的优先级</p>
<p>tp1.setPriority(5);</p>
<p>tp2.setPriority(10)；</p>
<p>tp3.setPriority(1);</p>
<p>设置优先级仅仅表示抢占cpu的概率高，不是一定要是优先级最大的先执行</p>
<h4 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230712155349566.png"
                      alt="image-20230712155349566"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230712155329106.png"
                      alt="image-20230712155329106"
                ></p>
<h4 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230712155952003.png"
                      alt="image-20230712155952003"
                ></p>
<h4 id="多线程的实现方式2"><a href="#多线程的实现方式2" class="headerlink" title="多线程的实现方式2"></a>多线程的实现方式2</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230712162618792.png"
                      alt="image-20230712162618792"
                ></p>
<h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><h4 id="数据安全问题的解决"><a href="#数据安全问题的解决" class="headerlink" title="数据安全问题的解决"></a>数据安全问题的解决</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230712171102762.png"
                      alt="image-20230712171102762"
                ></p>
<h4 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230712194103318.png"
                      alt="image-20230712194103318"
                ></p>
<h5 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230712202007332.png"
                      alt="image-20230712202007332"
                ></p>
<h4 id="线程安全的类"><a href="#线程安全的类" class="headerlink" title="线程安全的类"></a>线程安全的类</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230712202310346.png"
                      alt="image-20230712202310346"
                ></p>
<h4 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h4><p>虽然我们可以理解同步代码块和同步方法的锁对象问题，但是我们并没有直接看到在哪里加上了锁，在哪里释放了锁为了更清晰的表达如何加锁和释放锁，JDK5以后提供了一个新的锁对象<strong>Lock</strong></p>
<p>Lock实现提供比使用synchronized方法和语句可以获得更广泛的锁定操作Lock中提供了获得锁和释放锁的方法</p>
<ul>
<li><strong>void lock(): 获得锁</strong></li>
<li><strong>void unlock():释放锁</strong></li>
</ul>
<p>Lock是接口不能直接实例化，这里采用它的实现类ReentrantLock来实例化</p>
<p>ReentrantLock的构造方法</p>
<p><strong>ReentrantLock()</strong>:创建一个ReentrantLock的实例</p>
<h3 id="生产者消费者"><a href="#生产者消费者" class="headerlink" title="生产者消费者"></a>生产者消费者</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230712205826542.png"
                      alt="image-20230712205826542"
                ></p>
<h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230712205912234.png"
                      alt="image-20230712205912234"
                ></p>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230712212647777.png"
                      alt="image-20230712212647777"
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    //定义一个成员变量，表述第x瓶奶</span></span><br><span class="line"><span class="comment">    private int milk;</span></span><br><span class="line"><span class="comment">    //定义一个成员变量表示奶箱的状态</span></span><br><span class="line"><span class="comment">    private boolean state = false;</span></span><br><span class="line"><span class="comment">    //提供存储牛奶和获取牛奶的操作</span></span><br><span class="line"><span class="comment">    public synchronized void putmilk(int milk)&#123;</span></span><br><span class="line"><span class="comment">        //如果有奶，等待</span></span><br><span class="line"><span class="comment">        if(state)&#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                wait();</span></span><br><span class="line"><span class="comment">            &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //如果没有奶，送</span></span><br><span class="line"><span class="comment">        this.milk = milk;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;生产送第&quot;+this.milk+&quot;奶&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //生产完，改变状态</span></span><br><span class="line"><span class="comment">        state =true;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //唤醒</span></span><br><span class="line"><span class="comment">        notifyAll();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    public synchronized void getmilk()&#123;</span></span><br><span class="line"><span class="comment">        //如果没有，等待生产</span></span><br><span class="line"><span class="comment">        if(!state)&#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                wait();</span></span><br><span class="line"><span class="comment">            &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //有就消费</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;用户拿到第&quot;+this.milk+&quot;奶&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //消费完改变状态</span></span><br><span class="line"><span class="comment">        state = false;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //唤醒</span></span><br><span class="line"><span class="comment">        notifyAll();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*private Box b;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Prodocer(Box b) &#123;</span></span><br><span class="line"><span class="comment">        this.b = b;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public void run() &#123;</span></span><br><span class="line"><span class="comment">        for (int i = 1; i &lt;= 5; i++) &#123;</span></span><br><span class="line"><span class="comment">            b.putmilk(i);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*private Box b;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Customer(Box b) &#123;</span></span><br><span class="line"><span class="comment">        this.b = b;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public void run() &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        while (true) &#123;</span></span><br><span class="line"><span class="comment">            b.getmilk();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Box b = new Box();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Prodocer p = new Prodocer(b);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Customer c = new Customer(b);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Thread t1 = new Thread(p);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Thread t2 = new Thread(c);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        t1.start();</span></span><br><span class="line"><span class="comment">        t2.start();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="网路编程"><a href="#网路编程" class="headerlink" title="网路编程"></a>网路编程</h2><h3 id="网络编程入门"><a href="#网络编程入门" class="headerlink" title="网络编程入门"></a>网络编程入门</h3><h4 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230713081247436.png"
                      alt="image-20230713081247436"
                ></p>
<ul>
<li>计算机网络<br>是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统 </li>
<li>网络编程<br>在网络通信协议下，实现网络互连的不同计算机上运行的程序间可以进行数据交换</li>
</ul>
<h4 id="网络编程三要素"><a href="#网络编程三要素" class="headerlink" title="网络编程三要素"></a>网络编程三要素</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230713082029084.png"
                      alt="image-20230713082029084"
                ></p>
<h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230713082610416.png"
                      alt="image-20230713082610416"
                ></p>
<h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><p>ipconfig:查看本机IP地址</p>
<p>ping IP 地址:检查网络是否连通</p>
<h5 id="特殊IP地址"><a href="#特殊IP地址" class="headerlink" title="特殊IP地址"></a>特殊IP地址</h5><p>127.0.0.1:是回送地址，可以代表本机地址，一般用来测试使用</p>
<h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><p>端口:设备上应用程序的唯一标识<br>端口号:用两个字节表示的整数，它的取值范围是0—65535。其中，0—1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败</p>
<h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><p>协议:计算机网络中，连接和通信的规则被称为网络通信协议</p>
<h5 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a><strong>UDP协议</strong></h5><ul>
<li>用户数据报协议(UserDatagram Protocol)</li>
<li>UDP是无连接通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。简单来说，当一台计算机向另外一台计算机发送数据时，发送端不会确认接收端是否存在，就会发出数据，同样接收端在收到数据时，也不会向发送端反馈是否收到数据<br>由于使用UDP协议消耗资源小，通信效率高，所以通常都会用于音频、视频和普通数据的传输</li>
</ul>
<h5 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a><strong>TCP协议</strong></h5><ul>
<li>传输控制协议(Transmission Control Protocol)</li>
<li>TCP协议是面向连接的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据它提供了两台计算机之间可靠无差错的数据传输。在TCP连接中必须要明确客户端与服务器端，由客户端向服务端发出连接请求，每次连接的创建都需要经过“三次握手”</li>
</ul>
<p>三次握手:TCP协议中，在发送数据的准备阶段，客户端与服务器之间的<strong>三次交互</strong>，以保证连接的可靠</p>
<ul>
<li>第一次握手，客户端向服务器端发出连接请求，等待服务器确认</li>
<li>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求</li>
<li>第三次握手，客户端再次向服务器端发送确认信息，确认连接</li>
</ul>
<p>完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性TCP协议可以保证传输数的安全，所以应用十分广泛。例如上传文件、下载文件、浏览网页等</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230713100538249.png"
                      alt="image-20230713100538249"
                ></p>
<h3 id="UDP通信程序"><a href="#UDP通信程序" class="headerlink" title="UDP通信程序"></a>UDP通信程序</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>UDP协议是一种<strong>不可靠</strong>的网络协议，它在通信的两端<strong>各建立一个Socket对象</strong>，但是这两个Socket只是发送，接收数据的对象因此对于基于UDP协议的通信双方而言，<strong>没有所谓的客户端和服务器的概念</strong>，Java提供了DatagramSocket类作为基于UDP协议的Socket</p>
<h4 id="UDP发送数据"><a href="#UDP发送数据" class="headerlink" title="UDP发送数据"></a>UDP发送数据</h4><p> 发送数据的步骤</p>
<ul>
<li>创建发送端的Socket对象(DatagramSocket)<br>DatagramSocket()</li>
<li>创建数据，并把数据打包<br>DatagramPacket(bytel] buf, int length, lnetAddress address, int port)调用</li>
<li>DatagrlmSocket对象的方法发送数据<br>void send(DatagramPacket p)</li>
<li>关闭发送端<br>void close()</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230713101614454.png"
                      alt="image-20230713101614454"
                ></p>
<h4 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230713202923623.png"
                      alt="image-20230713202923623"
                ></p>
<h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bear003;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">10001</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">byte</span>[] by = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(by, by.length);</span><br><span class="line"></span><br><span class="line">            ds.receive(dp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        byte[] data = dp.getData();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        int len = dp.getLength();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        String dataString = new String(data, 0, len);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;数据为：&quot;+dataString);</span></span><br><span class="line">            System.out.println(<span class="string">&quot;数据为：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(dp.getData(), <span class="number">0</span>, dp.getLength()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//        ds.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> bear003;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Senddemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;886&quot;</span>.equals(line))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] by = line.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(by, by.length, InetAddress.getByName(<span class="string">&quot;192.168.188.39&quot;</span>), <span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line">            ds.send(dp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="TCP通信程序"><a href="#TCP通信程序" class="headerlink" title="TCP通信程序"></a>TCP通信程序</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>TCP通信协议是一种可靠的网络协议，它在通信的两端各建立-个Socket对象，从而在通信的两端形成网络虚拟链路旦建立了虚拟的网络链路，两端的程序就可以通过虚拟链路进行通信Java对基于TCP协议的的网络提供了良好的封装，使用Socket对象来代表两端的通信端口，并通过Socket产生I0流来进行网络通信Java为客户端提供了Socket类，为服务器端提供了ServerSocket类</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230713202202033.png"
                      alt="image-20230713202202033"
                ></p>
<h4 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230713202838762.png"
                      alt="image-20230713202838762"
                ></p>
<h4 id="接收-1"><a href="#接收-1" class="headerlink" title="接收"></a>接收</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230714080754600.png"
                      alt="image-20230714080754600"
                ></p>
<h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230714104527722.png"
                      alt="image-20230714104527722"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230714104458701.png"
                      alt="image-20230714104458701"
                ></p>
<table>
<thead>
<tr>
<th>void</th>
<th>shutdownInput()  将此套接字的输入流放置在“流的末尾”。</th>
</tr>
</thead>
<tbody><tr>
<td>void</td>
<td>shutdownOutput()  禁用此套接字的输出流。</td>
</tr>
</tbody></table>
<h4 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230714080708442.png"
                      alt="image-20230714080708442"
                ></p>
<p>其他案例见<a class="link"   href="https://github.com/lihuibear4/NET.git" >https://github.com/lihuibear4/NET.git <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230714161840174.png"
                      alt="image-20230714161840174"
                ></p>
<h3 id="标准格式"><a href="#标准格式" class="headerlink" title="标准格式"></a>标准格式</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230714162845678.png"
                      alt="image-20230714162845678"
                ></p>
<p>Lambda表达式的格式</p>
<ul>
<li>格式:(形式参数)-&gt;代码块)</li>
<li>形式参数:如果有多个参数，参数之间用逗号隔开，如果没有参数，留空即可</li>
<li>-&gt;:由英文中画线和大于符号组成，固定写法。代表指向动作</li>
<li>代码块:是我们具体要做的事情，也就是以前我们写的方法体内容</li>
</ul>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>Lambda表达式的使用前提</p>
<ul>
<li>有一个接口</li>
<li>接口中有且仅有一个抽象方法</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230714170232303.png"
                      alt="image-20230714170232303"
                ></p>
<h3 id="省略模式"><a href="#省略模式" class="headerlink" title="省略模式"></a>省略模式</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230714171051735.png"
                      alt=" "
                ></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>使用Lambda必须要有接口，并且要求接口中有且仅有一个抽象方法</li>
<li>必须有上下文环境，才能推导出Lambda对应的接口</li>
</ul>
<p>根据局部变量的赋值得知Lambda对应的接口: Runnable r&#x3D; () -&gt;System.out.println(“Lambda表达式”);</p>
<p>根据调用方法的参数得知Lambda对应的接口: new Thread(() -&gt; System.out,println(“Lambda表达式”)).start();</p>
<h3 id="Lambda表达式和匿名内部类的区别"><a href="#Lambda表达式和匿名内部类的区别" class="headerlink" title="Lambda表达式和匿名内部类的区别"></a>Lambda表达式和匿名内部类的区别</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230714212715823.png"
                      alt="image-20230714212715823"
                ></p>
<h2 id="接口的组成更新"><a href="#接口的组成更新" class="headerlink" title="接口的组成更新"></a>接口的组成更新</h2><h3 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h3><p>接口的组成</p>
<ul>
<li>常量<br>   public static final</li>
<li>抽象方法<br>public abstract</li>
</ul>
<h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><p>接口中默认方法的定义格式:</p>
<p>格式:publicdefault返回值类型方法名(参数列表)</p>
<p>范例: public <strong>default</strong> void show30{}</p>
<p>接口中默认方法的注意事项默认方法不是抽象方法，所以不强制被重写。但是可以被重写，</p>
<p>写的时候去掉d<strong>efault关键字</strong>public可以省略，<strong>default不能省略</strong></p>
<h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230715082233108.png"
                      alt="image-20230715082233108"
                ></p>
<h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230715084012477.png"
                      alt="image-20230715084012477"
                ></p>
<h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230715092103844.png"
                      alt="image-20230715092103844"
                ></p>
<h3 id="方法引用符"><a href="#方法引用符" class="headerlink" title="方法引用符"></a>方法引用符</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230715092301493.png"
                      alt="image-20230715092301493"
                ></p>
<h3 id="Lambda表达式支持的方法引用"><a href="#Lambda表达式支持的方法引用" class="headerlink" title="Lambda表达式支持的方法引用"></a>Lambda表达式支持的方法引用</h3><p><strong>常见的引用方式</strong></p>
<ul>
<li>引用类方法</li>
<li>引用对象的实例方法</li>
<li>引用类的实例方法</li>
<li>引用构造器</li>
</ul>
<h3 id="引用类方法的使用"><a href="#引用类方法的使用" class="headerlink" title="引用类方法的使用"></a>引用类方法的使用</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230715103508264.png"
                      alt="image-20230715103508264"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230715144604612.png"
                      alt="image-20230715144604612"
                ></p>
<p><strong>&#x2F;&#x2F;Lambda表达式被类的实例方法替代的时候</strong></p>
<p><strong>&#x2F;&#x2F;第一个参数作为调用者</strong></p>
<p><strong>&#x2F;&#x2F;后面的参数全部传递给该方法作为参数</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230715151143470.png"
                      alt="image-20230715151143470"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230715153944938.png"
                      alt="image-20230715153944938"
                ></p>
<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><h3 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h3><p><strong>函数式接口:有且仅有一个抽象方法的接口</strong></p>
<p>Java中的函数式编程体现就是Lambda表达式，所以函数式接口就是可以适用于Lambda使用的接口只有确保接口中有且仅有一个抽象方法，Java中的Lambda才能顺利地进行推导</p>
<p><strong>如何检测一个接口是不是函数式接口呢?</strong></p>
<ul>
<li>@Functionallnterface</li>
<li>放在接口定义的上方:如果接口是函数式接口，编译通过;如果不是，编译失败</li>
</ul>
<p>注意<br>我们自己定义函数式接口的时候，@Functionallnterface是可选的，就算我不写这个注解，只要保证满足函数式接口定义的条件，也照样是函数式接口。<strong>但是，建议加上该注解</strong></p>
<h3 id="函数式接口作为方法的参数"><a href="#函数式接口作为方法的参数" class="headerlink" title="函数式接口作为方法的参数"></a>函数式接口作为方法的参数</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230715155529206.png"
                      alt="image-20230715155529206"
                ></p>
<h3 id="函数式接口作为方法的返回值"><a href="#函数式接口作为方法的返回值" class="headerlink" title="函数式接口作为方法的返回值"></a>函数式接口作为方法的返回值</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230715161744750.png"
                      alt="image-20230715161744750"
                ></p>
<h3 id="常用函数式接口"><a href="#常用函数式接口" class="headerlink" title="常用函数式接口"></a>常用函数式接口</h3><ul>
<li>Supplier接口</li>
<li>Consumer接口</li>
<li>Predicate接口</li>
<li>Function接口</li>
</ul>
<h4 id="Supplier接口"><a href="#Supplier接口" class="headerlink" title="Supplier接口"></a>Supplier接口</h4><p>Supplier<T>:包含一个无参的方法</p>
<ul>
<li>T get():获得结果</li>
<li>该方法不需要参数，它会按照某种实现逻辑(由Lambda表达式实现)返回一个数据</li>
<li>Supplier<T>接口也被称为生产型接口，如果我们指定了接口的泛型是什么类型，那么接口中的get方法就会生产什么类型的数据供我们使用</li>
</ul>
<h5 id="001"><a href="#001" class="headerlink" title="001"></a>001<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230715163729608.png"
                      alt="image-20230715163729608"
                ></h5><h5 id="002"><a href="#002" class="headerlink" title="002"></a>002</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230715163902837.png"
                      alt="image-20230715163902837"
                ></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230715164656931.png"
                      alt="image-20230715164656931"
                ></p>
<h4 id="Consumer接口"><a href="#Consumer接口" class="headerlink" title="Consumer接口"></a>Consumer接口</h4><p>Consumer<T>:包含两个方法</p>
<ul>
<li>void accept(T t):对给定的参数执行此操作</li>
<li>defaultConsumer<T>andThen(Consumer after): 返回一个组合的Consumer，依次执行此操作，然后执行after操作</li>
<li>Consumer<T>接口也被称为消费型接口，它消费的数据的数据类型由泛型指定</li>
</ul>
<h5 id="001-1"><a href="#001-1" class="headerlink" title="001"></a>001</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230715170249111.png"
                      alt="image-20230715170249111"
                ></p>
<h5 id="002-1"><a href="#002-1" class="headerlink" title="002"></a>002</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230717154342595.png"
                      alt="image-20230717154342595"
                ></p>
<h4 id="Predicate接口"><a href="#Predicate接口" class="headerlink" title="Predicate接口"></a>Predicate接口</h4><p> Predicate<T>:常用的四个方法</p>
<ul>
<li>boolean test(T t):对给定的参数进行判断(判断逻辑由Lambda表达式实现)，返回一个布尔值</li>
<li>default Predicate<T> negate(): 返回一个逻的否定，对应逻辑非default </li>
<li>Predicate<T>and(Predicate other): 返回一个组合判断，对应短路与default </li>
<li>Predicate<T>or(Predicate other): 返回一个组合判断，对应短路或Predicate<T>接口通常用于判断参数是否满足指定的条件</li>
</ul>
<h4 id="Function接口"><a href="#Function接口" class="headerlink" title="Function接口"></a>Function接口</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230717163938678.png"
                      alt="image-20230717163938678"
                ></p>
<ul>
<li>Rapply(Tt):将此函数应用于给定的参数</li>
<li>default <V> FunctionandThen(Function after): 返回一个组合函数，首先将该函数应用于输入，然后将after函数应用于结果</li>
<li>Function&lt;T,R&gt;接口通常用于对参数进行处理，转换处理逻辑由Lambda表达式实现)，然后返回一个新的值</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230717192115022.png"
                      alt="image-20230717192115022"
                ></p>
<h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><h3 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230717201519921.png"
                      alt="image-20230717201519921"
                ></p>
<h3 id="Stream流的生成方式"><a href="#Stream流的生成方式" class="headerlink" title="Stream流的生成方式"></a>Stream流的生成方式</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230717201836422.png"
                      alt="image-20230717201836422"
                ></p>
<ul>
<li><p>Stream流的常见生成方式<br>Collection体系的集合可以使用默认方法stream()生成流<br>​	default Stream<E> stream()</p>
</li>
<li><p>Map体系的集合间接的生成流</p>
</li>
<li><p>数组可以通过Stream接口的静态方法of(T…values)生成流</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230717202614622.png"
                      alt="image-20230717202614622"
                ></p>
<h3 id="Stream流的常见中间操作方法"><a href="#Stream流的常见中间操作方法" class="headerlink" title="Stream流的常见中间操作方法"></a>Stream流的常见中间操作方法</h3><ul>
<li><p>Stream<T> filter(Predicate predicate): 用于对流中的数据进行过滤</p>
<p>  Predicate接口中的方法 boolean test(T t):对给定的参数进行判断，返回一个布尔值</p>
</li>
<li><p>Stream<T>limit(long maxSize): 返回此流中的元素组成的流，截取前指定参数个数的数据</p>
</li>
<li><p>Stream<T>skip(long n):跳过指定参数个数的数据，返回由该流的剩余元素组成的流</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230717205108363.png"
                      alt="image-20230717205108363"
                ></p>
<ul>
<li><strong>static</strong> <T> Stream<T> concat(Stream a, Stream b):合并a和b两个流为一个流</li>
<li>Stream<T>distinct0: 返回由该流的不同元素(根Objectequals(Object)) 组成的流</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230717205610888.png"
                      alt="image-20230717205610888"
                ></p>
<ul>
<li>Stream<T>sorted0:返回由此流的元素组成的流，根据自然顺序排序</li>
<li>Stream<T>sorted(Comparatorcomparator): 返回由该流的元素组成的流，根据提供的Comparator进行排序</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230717210241224.png"
                      alt="image-20230717210241224"
                ></p>
<ul>
<li><R> Stream<R>map(Functionmapper):返回由给定函数应用于此流的元素的结果组成的流<br>Function接口中的方法    R apply(T t)</li>
<li>IntStream mapTolnt(TolntFunction mapper): 返回一NntStream其中包含将给定函数应用于此流的元素的结果<br>​	IntStream:表示原始int流<br>​	TolntFunction接口中的方法    int applyAslnt(T value)</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230717211346167.png"
                      alt="image-20230717211346167"
                ></p>
<h3 id="Stream流的常见终结操作方法"><a href="#Stream流的常见终结操作方法" class="headerlink" title="Stream流的常见终结操作方法"></a>Stream流的常见终结操作方法</h3><ul>
<li>void forEach(Consumeraction): 对此流的每个元素执行操作<br>    Consumer接中的方法    void accept(Tt):对给定的参数执行此操作</li>
<li>long count():返回此流中的元素数</li>
</ul>
<h3 id="Stream流的收集操作"><a href="#Stream流的收集操作" class="headerlink" title="Stream流的收集操作"></a>Stream流的收集操作</h3><p>Stream流的收集方法</p>
<ul>
<li>R collect(Collector collector)</li>
<li>但是这个收集方法的参数是一个Collector 接口</li>
</ul>
<p>工具类Collectors提供了具体的收集方式</p>
<ul>
<li>publicstatic<T> Collector toList0: 把元素收集到List集合中</li>
<li>publicstatic <T> Collector toSet0: 把元素收集到Set集合中</li>
<li>publicstatic CollectortoMap(Function keyMapper,FunctionvalueMapper): 把元素收集到Map集合中</li>
</ul>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230717214920032.png"
                      alt="image-20230717214920032"
                ></p>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><h4 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h4><p>当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过类的加载，类的连接，类的初始化这三个步骤来对类进行初始化。如果不出现意外情况，JVM将会连续完成三个步骤，所以有时也把这三个步骤统称为类加载或者类初始化</p>
<h5 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a><strong>类的加载</strong></h5><ul>
<li>就是指将class文件读入内存，并为之创建一个iava.lang.Class对象</li>
<li>任何类被使用时，系统都会为之建立一个iavalangClass对象</li>
</ul>
<h5 id="类的连接"><a href="#类的连接" class="headerlink" title="类的连接"></a><strong>类的连接</strong></h5><ul>
<li>验证阶段:用于检验被加载的类是否有正确的内部结构，并和其他类协调一致</li>
<li>准备阶段:负责为类的类变量分配内存，并设置默认初始化值</li>
<li>解析阶段:将类的二进制数据中的符号引用替换为直接引用</li>
</ul>
<h5 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a><strong>类的初始化</strong></h5><ul>
<li>在该阶段，主要就是对类变量进行初始化</li>
</ul>
<h5 id="类的初始化步骤"><a href="#类的初始化步骤" class="headerlink" title="类的初始化步骤"></a><strong>类的初始化步骤</strong></h5><ul>
<li>假如类还未被加载和连接，则程序先加载并连接该类</li>
<li>假如该类的直接父类还未被初始化，则先初始化其直接父类</li>
<li>假如类中有初始化语句，则系统依次执行这些初始化语句</li>
<li>注意:在执行第2个步骤的时候，系统对直接父类的初始化步骤也遵循初始化步骤1-3</li>
</ul>
<h5 id="类的初始化时机"><a href="#类的初始化时机" class="headerlink" title="类的初始化时机:"></a><strong>类的初始化时机:</strong></h5><ul>
<li>创建类的实例</li>
<li>调用类的类方法</li>
<li>访问类或者接口的类变量，或者为该类变量赋值</li>
<li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li>
<li>初始化某个类的子类</li>
<li>直接使用java.exe命令来运行某个主类</li>
</ul>
<h4 id="类加载器-1"><a href="#类加载器-1" class="headerlink" title="类加载器"></a>类加载器</h4><h5 id="类加载器的作用"><a href="#类加载器的作用" class="headerlink" title="类加载器的作用"></a><strong>类加载器的作用</strong></h5><ul>
<li>负责将.class文件加载到内存中，并为之生成对应的java.lang.Class对象</li>
<li>虽然我们不用过分关心类加载机制，但是了解这个机制我们就能更好的理解程序的运行</li>
</ul>
<h5 id="JVM的类加载机制"><a href="#JVM的类加载机制" class="headerlink" title="JVM的类加载机制"></a><strong>JVM的类加载机制</strong></h5><ul>
<li>全盘负责:就是当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入</li>
<li>父类委托:就是当一个类加载器负责加载某个Class时，先让父类加载器试图加载该Class，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类</li>
<li>缓存机制:保证所有加载过的Class都会被缓存，当程序需要使用某个Class对象时，类加载器先从缓存区中搜索该Class，只有当缓存区中不存在该Class对象时，系统才会读取该类对应的二进制数据，并将其转换成CIass对象，存储到缓存区</li>
</ul>
<h5 id="ClassLoader-是负责加载类的对象"><a href="#ClassLoader-是负责加载类的对象" class="headerlink" title="ClassLoader:是负责加载类的对象"></a><strong>ClassLoader:是负责加载类的对象</strong></h5><h5 id="Java运行时具有以下内置类加载器"><a href="#Java运行时具有以下内置类加载器" class="headerlink" title="Java运行时具有以下内置类加载器"></a><strong>Java运行时具有以下内置类加载器</strong></h5><ul>
<li><p>Bootstrap classloader: 它是虚拟机的内置类加载器，通常表示为null，并且没有父null</p>
</li>
<li><p>Platform classloader:平台类加载器可以看到所有平台类，平台类包括由平台类加载器或其祖先定义的Java SE平台API其实现类和JDK特定的运行时类</p>
</li>
<li><p>System classloader:它也被称为应用程序类加载器，与平台类加载器不同。系统类加载器通常用于定义应用程序类路径模块路径和JDK特定工具上的类</p>
</li>
<li><p><strong>类加载器的继承关系: System的父加载器为Platform，而Platform的父加载器为Bootstrap</strong></p>
</li>
</ul>
<h5 id="ClassLoader中的两个方法"><a href="#ClassLoader中的两个方法" class="headerlink" title="ClassLoader中的两个方法"></a><strong>ClassLoader中的两个方法</strong></h5><ul>
<li>static ClassLoadergetSystemClassLoader0: 返回用于委派的系统类加载器</li>
<li>ClassLoadergetParent0: 返回父类加载器进行委派</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230718152812200.png"
                      alt="image-20230718152812200"
                ></p>
<h3 id="反射-1"><a href="#反射-1" class="headerlink" title="反射"></a>反射</h3><h4 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230718153048132.png"
                      alt="image-20230718153048132"
                ></p>
<p>Java反射机制:</p>
<p>是指在运行时去获取一个类的变量和方法信息。然后通过获取到的信息来创建对象，调用方法的一种机制。由于这种动态性，可以极大的增强程序的灵活性，程序不用在编译期就完成确定，在运行期仍然可以扩展</p>
<h4 id="获取Class类的对象"><a href="#获取Class类的对象" class="headerlink" title="获取Class类的对象"></a>获取Class类的对象</h4><p>我们要想通过反射去使用一个类，首先我们要获取到该类的字节码文件对象，也就是类型为Class类型的对象这里我们提供三种方式获取Class类型的对象</p>
<ul>
<li><p>使用类的class属性来获取该类对应的Class对象。举例: Studentclass将会返回Student类对应的CIass对象</p>
</li>
<li><p>调用对象的getClass()方法，返回该对象所属类对应的Class对象<br>该方法是Obiect类中的方法，所有的Java对象都可以调用该方法</p>
</li>
<li><p>使用Class类中的静态方法forName(StringclassName)，该方法需要传入字符由参数，该字符串参数的值是某个类的全路径，也就是完整包名的路径</p>
</li>
</ul>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230718203137629.png"
                      alt="image-20230718203137629"
                ></p>
<h4 id="反射获取构造方法并使用"><a href="#反射获取构造方法并使用" class="headerlink" title="反射获取构造方法并使用"></a>反射获取构造方法并使用</h4><p><strong>Class类中用于获取构造方法的方法</strong></p>
<ul>
<li><p>Constructo r&lt; ?&gt; getConstfuctors(): 返回所有公共构造方法对象的数组</p>
</li>
<li><p>Constructor&lt; ? &gt;getDeclaredConstructors(): 返回所有构造方法对象的数组</p>
</li>
<li><p>Constructor&lt; T &gt;getConstructor(Class&lt; ? &gt;…parameterTypes): 返回单个公共构造方法对象</p>
</li>
<li><p>Constructor&lt; T &gt;getDeclaredConstructor(Class&lt;?&gt;…parameterTypes): 返回单个构造方法对象</p>
</li>
</ul>
<p><strong>Constructor类中用于创建对象的方法</strong></p>
<ul>
<li>Tnewlnstance(Object…initargs): 根据指定的构造方法创建对象</li>
</ul>
<h4 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230718222024461.png"
                      alt="image-20230718222024461"
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bear004;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Refectdemo001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;bear002.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor(String.class, <span class="type">int</span>.class, String.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> con.newInstance(<span class="string">&quot;李慧&quot;</span>, <span class="number">20</span>, <span class="string">&quot;sjz&quot;</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230719075057926.png"
                      alt="image-20230719075057926"
                ></p>
<h5 id="暴力反射"><a href="#暴力反射" class="headerlink" title="暴力反射"></a><strong>暴力反射</strong></h5><p>public void setAccessible (boolean flag):值为true，取消访问检查</p>
<p>con.setAccessible(true); </p>
<h4 id="反射获取成员变量并使用"><a href="#反射获取成员变量并使用" class="headerlink" title="反射获取成员变量并使用"></a>反射获取成员变量并使用</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230719081519138.png"
                      alt="image-20230719081519138"
                ></p>
<p>Class类中用于获取成员变量的方法</p>
<ul>
<li>Field[]  getFields(): 返回所有公共成员变量对象的数组</li>
<li>Field[]  getDeclaredFields(): 返回所有成员变量对象的数组Field getField (String name): 返回单个公共成员变量对象</li>
<li>Field getDeclaredField(String name): 返回单个成员变量对象</li>
<li>Field类中用于给成员变量赋值的方法</li>
<li>void set(Objectobi,Objectvalye): 给obi对象的成员变量赋值为value</li>
</ul>
<h4 id="反射获取成员方法并使用"><a href="#反射获取成员方法并使用" class="headerlink" title="反射获取成员方法并使用"></a>反射获取成员方法并使用</h4><p>Class类中用于获取成员方法的方法</p>
<ul>
<li>MethodlgtMethods0: 返回所有公共成员方法对象的数组，包括继承的</li>
<li>MethodlgetDeclaredMethods0: 返回所有成员方法对象的数组，不包括继承的</li>
<li>MethodgetMethod(Stringname, Class&lt; ? &gt;… parameterTypes): 返回单个公共成员方法对象</li>
<li>MethodgetDeclaredMethod(String name,Class&lt;?&gt;… parameterTypes): 返回单个成员方法对象</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230719085745600.png"
                      alt="image-20230719085745600"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230719092128827.png"
                      alt="image-20230719092128827"
                ></p>
<h4 id="越过泛型检查"><a href="#越过泛型检查" class="headerlink" title="越过泛型检查"></a>越过泛型检查</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230719092553373.png"
                      alt="image-20230719092553373"
                ></p>
<h4 id="配置文件运行类的方法"><a href="#配置文件运行类的方法" class="headerlink" title="配置文件运行类的方法"></a>配置文件运行类的方法</h4><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h3 id="概述-8"><a href="#概述-8" class="headerlink" title="概述"></a>概述</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230719103839618.png"
                      alt="image-20230719103839618"
                ></p>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230719105643431.png"
                      alt="image-20230719105643431"
                ></p>
<h3 id="模块服务的使用"><a href="#模块服务的使用" class="headerlink" title="模块服务的使用"></a>模块服务的使用</h3><p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVASE%E5%9F%BA%E7%A1%8010/image-20230719111856358.png"
                      alt="image-20230719111856358"
                ></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
        <category>JAVASE</category>
      </categories>
      <tags>
        <tag>项目组</tag>
        <tag>黑马程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVAWeb01</title>
    <url>/2023/07/19/JAVAWeb01/</url>
    <content><![CDATA[<h1 id="Junit测试"><a href="#Junit测试" class="headerlink" title="Junit测试"></a>Junit测试</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul>
<li><strong>黑盒测试</strong><br>不需要写代码，给输入值，看程序是否能输出期望的值</li>
<li><strong>白盒测试</strong><br>需要写代码，关注程序具体的执行流程</li>
</ul>
<h2 id="Junit的使用"><a href="#Junit的使用" class="headerlink" title="Junit的使用"></a>Junit的使用</h2><p><strong>白盒测试</strong></p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li><p>定义一个测试类，与junit同级 </p>
<p> test</p>
</li>
<li><p>定义测试方法：可以独立运行</p>
<p>方法名：testAdd;</p>
<p>返回值：void</p>
<p>参数列表：空参 </p>
</li>
<li><p>给方法加@Test</p>
</li>
<li><p>导入junit依赖环境</p>
</li>
</ol>
<h3 id="判定结果"><a href="#判定结果" class="headerlink" title="判定结果"></a>判定结果</h3><p>红色-&gt;失败</p>
<p>绿色-&gt;成功</p>
<p>一般我们会使用断言操作来处理结果</p>
<ul>
<li>​	Assert.assertEquals(期望的结果,运算的结果);</li>
</ul>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul>
<li>@Before<br>修饰的方法会在测试方法之前被自动执行</li>
<li>@After<br>修饰的方法会在测试方法执行之后自动被执行</li>
</ul>
<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p><strong>框架设计的灵魂</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb01/image-20230719145817222.png"
                      alt="image-20230719145817222"
                ></p>
<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>半成品软件。可以在框架的基础上进行软件开发，简化编码</p>
<h2 id="反射-1"><a href="#反射-1" class="headerlink" title="反射"></a>反射</h2><p>将类的名个组成部分封装为其他对象，这就是反射机制</p>
<h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ul>
<li>可以在程序运行过程中，操作这些对象</li>
<li>可以解耦，提高程序的可扩展性。</li>
</ul>
<h2 id="获取Class对象的方式"><a href="#获取Class对象的方式" class="headerlink" title="获取Class对象的方式"></a>获取Class对象的方式</h2><ol>
<li>class.forName(“全类名”): 将字节码文件加载进内存，返回class对象</li>
<li>类名.class: 通过类名的属性class获取\</li>
<li>对象.getclass(): getclass()方法在object类中定义着。</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb01/image-20230719161128093.png"
                      alt="image-20230719161128093"
                ></p>
<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念 :"></a>概念 :</h2><p>说明程序的。给计算机看的</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释 :"></a><em>注释 :</em></h2><p>用文字描述程序的。给程序员看的也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在定义:注解 (Annotation)包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行i明，注释。</p>
<h2 id="概念描述"><a href="#概念描述" class="headerlink" title="概念描述:"></a>概念描述:</h2><ul>
<li>JDK1.5之后的新特性</li>
<li>头说明程序的</li>
<li>使用注解 : @注解名称</li>
</ul>
<h2 id="作用分类"><a href="#作用分类" class="headerlink" title="作用分类"></a>作用分类</h2><ul>
<li>编写文档: 通过代码里标识的注解生成文档【生成文档doc文档】</li>
<li>代码分析: 通过代码里标识的注解对代码进行分析【使用反射】</li>
<li>编译检查:通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</li>
</ul>
<h2 id="JDK中预定义的一些注解"><a href="#JDK中预定义的一些注解" class="headerlink" title="JDK中预定义的一些注解"></a>JDK中预定义的一些注解</h2><p>@override : 检测被该注解标注的方法是否是继承自父类(接口)的</p>
<p>@Deprecated : 该注解标注的内容，表示已过时</p>
<p>@Suppresswarnings : 压制警告</p>
<p>​	一般传递参数all   @Suppresswarnings(“all”);</p>
<h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式:"></a>格式:</h3><p>元注解</p>
<p>public @interface 注解名称{}</p>
<h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>注解本质上就是一个接口，该接口默认继承Annotation接口</p>
<p>public interface MyAnno extends java.lang.annotation,Annotation{} </p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>接口中的抽象方法</p>
<h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><ol>
<li><h4 id="属性的返回值类型"><a href="#属性的返回值类型" class="headerlink" title="属性的返回值类型"></a>属性的返回值类型</h4><ul>
<li><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4></li>
<li><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4></li>
<li><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4></li>
<li><h4 id="注解-1"><a href="#注解-1" class="headerlink" title="注解"></a>注解</h4></li>
<li><h4 id="以及以上类型的数组"><a href="#以及以上类型的数组" class="headerlink" title="以及以上类型的数组"></a>以及以上类型的数组</h4></li>
</ul>
</li>
<li><p>定义了属性，在使用时需要给属性赋值</p>
<ol>
<li>如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。	</li>
<li>如果只有一个属性需要赋值，并且属性的名称是<strong>value</strong>，则value可以省略，直接定义值即可</li>
<li>数组赋值时，值使用{}包裹。如果数组中只有一个值，则{}省略</li>
</ol>
</li>
</ol>
<h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><ol>
<li><p>@Target：描述注解能够作用的位置</p>
<ol>
<li><p>ElementType取值 :</p>
<ul>
<li><p>TYPE : 可以作用子类上</p>
</li>
<li><p>METHOD:可以作用于方法上</p>
</li>
<li><p>FIELD : 可以作用于成员变量上</p>
</li>
</ul>
</li>
</ol>
</li>
<li><p>@Retention：描述注解被保留的阶段</p>
<ol>
<li>@Retention(RetentionPoliCV.RUNTIME )当前被描述的注解，会保留到class字节码文件中，并被JVM读取到</li>
</ol>
</li>
<li><p>@Documented: 描述注解是否被抽取到api文档中</p>
</li>
<li><p>@Inherited: 描述注解是否被子类继承</p>
</li>
</ol>
<h2 id="在程序使用（解析）注解"><a href="#在程序使用（解析）注解" class="headerlink" title="在程序使用（解析）注解"></a>在程序使用（解析）注解</h2><p>获取注解中定义的属性  </p>
<ol>
<li><p>获取注解定义的位置的对象(class，Method,Field)</p>
</li>
<li><p>获取指定的注解</p>
<p>getAnnotation(Class）</p>
<p>&#x2F;&#x2F;其实就是在内存中生成了一个该注解接口的子类实现对象</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb01/image-20230719211919381.png"
                      alt="image-20230719211919381"
                ></p>
</li>
</ol>
<p>3.调用注解中的抽象方法获取配置的属性值</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol>
<li><p>以后大多数时候，我们会使用注解，而不是自定义注解</p>
</li>
<li><p>注解给谁用 ?</p>
<ul>
<li><p>编译器</p>
</li>
<li><p>给解析程序用</p>
</li>
</ul>
</li>
</ol>
<p>  3.注解不是程序的一部分，可以理解为注解就是一个标签</p>
<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h2><ol>
<li><p>数据库的英文单词 : Database 简称DB</p>
</li>
<li><p>什么数据库 ？<br>用于存储和管理数据的仓库。</p>
</li>
<li><p>数据库的特点</p>
<ol>
<li>持久化存储数据的。其实数据库就是一个文件系统</li>
<li>方便存储和管理数据</li>
<li>使用了统一的方式操作数据库 – SOL</li>
</ol>
</li>
<li><p>常用数据库软件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb01/image-20230719220310095.png"
                      alt="image-20230719220310095"
                ></p>
</li>
</ol>
<h3 id="MySQL服务启动"><a href="#MySQL服务启动" class="headerlink" title="MySQL服务启动"></a>MySQL服务启动</h3><ol>
<li><p>手动。</p>
</li>
<li><p>cmd–&gt; services.msc 打开服务的窗口使用管理员打开cmd</p>
</li>
</ol>
<ul>
<li><p>net start mysql : 启动mysql的服务</p>
</li>
<li><p>net stop mysql:关闭mysq服务</p>
</li>
</ul>
<h3 id="MySQL登录"><a href="#MySQL登录" class="headerlink" title="MySQL登录"></a>MySQL登录</h3><ol>
<li>mysql -uroot -p密码</li>
<li>mysql -hip -uroot -p连接目标的密码</li>
<li>mysql –host&#x3D;ip –user&#x3D;root –password&#x3D;连接目标的密码</li>
</ol>
<h3 id="MySQL退出"><a href="#MySQL退出" class="headerlink" title="MySQL退出"></a>MySQL退出</h3><ol>
<li>exit</li>
<li>quit</li>
</ol>
<h3 id="MySQL目录结构"><a href="#MySQL目录结构" class="headerlink" title="MySQL目录结构"></a>MySQL目录结构</h3><ol>
<li><p>MySQL安装目录配置文件</p>
<ul>
<li>my.ini</li>
</ul>
</li>
<li><p>MySQL数据目录几个概念</p>
<ul>
<li><p>数据库:文件夹</p>
</li>
<li><p>表:文件</p>
</li>
<li><p>数据 :</p>
</li>
</ul>
</li>
</ol>
<h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><ol>
<li><p>什么是sql</p>
<p>structured Query Language:结构化查询语言</p>
<p>其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”</p>
</li>
<li><p>SQL通用语法</p>
<ol>
<li>SQL 语句可以单行或多行书写，以分号结尾。</li>
<li>可使用空格和缩进来增强语句的可读性。</li>
<li>MySQL 数据库的 SOL 语句不区分大小写，关键字建议使用大写</li>
<li>3 种注释<ul>
<li>单行注释:– 注释内容 </li>
<li>或 # 注释内容(mysql 特有)</li>
<li>多行注释:&#x2F;*注释 *</li>
</ul>
</li>
</ol>
</li>
<li><p>SQL分类</p>
<ul>
<li>DDL(Data Definition Language)数据定义语言用来定义<strong>数据库对象</strong> : 数据库，表，列等。关键字 : create，drop,alter 等</li>
<li>DML(Data Manipulation Language)数据操作语言用来对数据库中表的数据进行<strong>增删改</strong>。关键字 :insert，delete，update 等</li>
<li>DQL(Data Query Language)数据查询语言用来查询<strong>数据库中表</strong>的记录(数据)。关键字 : select，where 等</li>
<li>DCL(Data Control Language)数据控制语言(了解)用来定义数据库的访问<strong>权限和安全</strong>级别，及创建用户。关键字: GRANTREVOKE 等</li>
</ul>
</li>
</ol>
<h3 id="DDL：操作数据库、表"><a href="#DDL：操作数据库、表" class="headerlink" title="DDL：操作数据库、表"></a>DDL：操作数据库、表</h3><ol>
<li><p>操作数据库 :CRUD</p>
<ol>
<li><p>C(Create):创建</p>
<ol>
<li>创建数据库 :<ul>
<li>create database 数据库名称;</li>
</ul>
</li>
<li>创建数据库，判断不存在，再创建.<ul>
<li>create database if not exists</li>
</ul>
</li>
<li>数据库名称;创建数据库，并指定字符集<ul>
<li>create database 数据库名称 character set 字符集名</li>
</ul>
</li>
<li>练习 : 创建db4数据库，判断是否存在，并制定字符集为gbk<ul>
<li>create database if not exists db4 character set gbk;</li>
</ul>
</li>
</ol>
</li>
<li><p>R(Retrieve):查询</p>
<ol>
<li>查询所有数据库的名称:<ul>
<li>show databases;</li>
</ul>
</li>
<li>查询某个数据库的字符集:查询某个数据库的创建语句<ul>
<li>show create database 数据库名称;</li>
</ul>
</li>
</ol>
</li>
<li><p>U(Update):修改</p>
<ol>
<li>alter database 数据库名称 character set 字符集名称；</li>
</ol>
</li>
<li><p>D(Delete):删除</p>
<ol>
<li>删除数据库</li>
</ol>
<ul>
<li>drop database 数据库名称;</li>
</ul>
<ol start="2">
<li>判断数据库存在，存在再删除</li>
</ol>
<ul>
<li>drop database if exists 数据库名称;</li>
</ul>
</li>
<li><p>使用数据库</p>
<ol>
<li>查询当前正在使用的数据库名称<ul>
<li>select database();</li>
</ul>
</li>
<li>使用数据库<ul>
<li>use 数据库名称;</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
<li><p>操作表</p>
<ol>
<li><p>C(Create):创建</p>
<ol>
<li><p>语法</p>
<ul>
<li><p>create table 表名(<br>列名1 数据类型1,<br>列名2 数据类型2,<br>……</p>
<p>列名n 数据类型n</p>
<p>);</p>
<ul>
<li><p>注意 : 最后一列，不需要加逗号 (,)</p>
</li>
<li><p>数据库类型</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb01/image-20230720111531827.png"
                      alt="image-20230720111531827"
                ></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>创建表</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb01/image-20230720113311152.png"
                      alt="image-20230720113311152"
                ></p>
</li>
<li><p>复制表</p>
<ul>
<li>create table 表名 like 被复制的表名；</li>
</ul>
</li>
</ol>
</li>
<li><p>R(Retrieve):查询</p>
<ol>
<li><p>查询某个数据库中所有的表名称</p>
<ul>
<li>show tables;</li>
</ul>
</li>
<li><p>查询表结构</p>
<ul>
<li>desc 表名;</li>
</ul>
</li>
</ol>
</li>
<li><p>U(Update):修改</p>
<ol>
<li><p>修改表名</p>
<ul>
<li>alter table 表名 rename to 新的表名;</li>
</ul>
</li>
<li><p>修改表的字符集</p>
<ul>
<li>alter table 表名 character set 字符集名称；</li>
</ul>
</li>
<li><p>添加一列</p>
<ul>
<li>alter table 表名 add 列名 数据类型;</li>
</ul>
</li>
<li><p>修改列名称、类型</p>
<ul>
<li>alter table 表名 change 列名 新列名 新数据类型</li>
<li>alter table 表名 modify 列名 新数据类型;</li>
</ul>
</li>
<li><p>删除列</p>
<ul>
<li>alter table 表名 drop 列名;</li>
</ul>
</li>
</ol>
</li>
<li><p>D(Delete):删除</p>
<ul>
<li>drop table 表名;</li>
<li>drop table if exists 表名 ;</li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="DML：增删改表中数据"><a href="#DML：增删改表中数据" class="headerlink" title="DML：增删改表中数据"></a>DML：增删改表中数据</h3><ol>
<li><p>添加数据</p>
<ol>
<li><p>语法 :</p>
<ul>
<li>insert into 表名(列名1,列名2,…列名n) values(值1,值2,…值n);</li>
</ul>
</li>
<li><p>注意:</p>
<ol>
<li><p>列名和值要一一对应。</p>
</li>
<li><p>如果表名后，不定义列名，则默认给所有列添加值</p>
<ul>
<li>insert into 表名 values(值1,值2,…值n);</li>
</ul>
</li>
<li><p>除了数字类型，其他类型需要使用引号(单双都可以)引起来</p>
</li>
</ol>
</li>
</ol>
</li>
<li><p>删除数据</p>
<ol>
<li><p>语法:</p>
<ul>
<li>delete from 表名 [where 条件]</li>
</ul>
</li>
<li><p>注意 :</p>
<ul>
<li>如果不加条件，则删除表中所有记录。</li>
<li>如果要删除所有记录<ul>
<li>delete from 表名;– 不推荐使用。有多少条记录就会执行多少次删除操作</li>
<li>TRUNCATE TABLE 表名;–推荐使用，效率更高 先删除表，然后再创建一张样的表。</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li><p>修改数据</p>
<ol>
<li><p>语法 :</p>
<ul>
<li>update 表名 set 列名1 &#x3D; 值1，列名2 &#x3D; 值2,… [where条件];</li>
</ul>
</li>
<li><p>注意:</p>
<ul>
<li>如果不加任何条件，则会将表中所有记录全部修改</li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="DQL查询表中的记录"><a href="#DQL查询表中的记录" class="headerlink" title="DQL查询表中的记录"></a>DQL查询表中的记录</h3><p>select   from 表名;</p>
<ol>
<li><p>语法 :</p>
<ol>
<li>select<ul>
<li>字段列表</li>
</ul>
</li>
<li>from<ul>
<li>表名列表</li>
</ul>
</li>
<li>where<ul>
<li>条件列表</li>
</ul>
</li>
<li>group by<ul>
<li>分组字段</li>
</ul>
</li>
<li>having<ul>
<li>分组之后的条件</li>
</ul>
</li>
<li>order by<ul>
<li>排序</li>
</ul>
</li>
<li>limit<ul>
<li>分页限定</li>
</ul>
</li>
</ol>
</li>
<li><p>基础查询</p>
<ol>
<li><p>多个字段的查询</p>
<ul>
<li>select 字段名1，字段名2.…… from 表名；<ul>
<li>注意<ul>
<li>如果查询所有字段，则可以使用*来代替字段列表</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>去除重复</p>
<ol>
<li>distinct</li>
</ol>
</li>
<li><p>计算列</p>
<ol>
<li>一般可以使用四则运算计算一些列的值。 (一般只会进行数值型的计算)</li>
<li>ifnull(表达式1,表达式2): nul1参与的运算，计算结果都为null<ul>
<li>表达式1 : 哪个字段需要判断是否为null</li>
<li>如果该字段为nu11后的<strong>替换值</strong>。</li>
</ul>
</li>
</ol>
</li>
<li><p>起别名</p>
<ol>
<li>as :也可以省略</li>
</ol>
</li>
</ol>
</li>
<li><p>条件查询</p>
<ol>
<li>where子句后跟条件</li>
<li>运算符<ul>
<li><p>BETWEEN…AND</p>
</li>
<li><p>IN( 集合)    or …or…or…</p>
</li>
<li><p>LIKE 模糊查询</p>
<ul>
<li>占位符<ul>
<li>_单个任意字符</li>
<li>%多个任意字符</li>
</ul>
</li>
</ul>
</li>
<li><p>IS NULL</p>
</li>
<li><p>and.或 &amp;&amp;</p>
</li>
<li><p>or 或ll</p>
</li>
<li><p>not 或!</p>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="DQL的查询语句"><a href="#DQL的查询语句" class="headerlink" title="DQL的查询语句"></a>DQL的查询语句</h2><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><ol>
<li>语法：order by 子句；<ul>
<li>order by 排序字段1 排序方式1，排序字段2 排序方式2…</li>
</ul>
</li>
<li>排序    <ul>
<li>ASC:升序，默认的。</li>
<li>DESC :降序</li>
</ul>
</li>
<li>注意 :<ul>
<li>如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件</li>
</ul>
</li>
</ol>
<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p> 将一列数据作为一个整体，进行纵向的计算</p>
<ol>
<li><p>count :计算个数</p>
<ul>
<li>一般选择非空的列:主键</li>
<li>count(*)</li>
</ul>
</li>
<li><p>max: 计算最大值</p>
</li>
<li><p>min : 计算最小值</p>
</li>
<li><p>sum : 计算和</p>
</li>
<li><p>avg : 计算平均值</p>
</li>
</ol>
<ul>
<li>注意: 聚合函数的计算，排除null值。<ul>
<li>解决方案:<ol>
<li>选择不包含非空的列进行计算</li>
<li>IFNULL函数</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><ol>
<li>语法 : group by 分组字段 ;</li>
<li>注意:<ol>
<li>分组之后查询的字段:分组字段、聚合函数</li>
<li>where 和 having 的区别?<ol>
<li>where在分组之前进行限定，如果不满足条件，则不参与分组。havine在分组之后进行娘定，如果不满足结果，则不会被查询出来</li>
<li>where 后不可以跟聚合函数，having可以进行聚合函数的判断。</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><ol>
<li>语法：limit 开始的索引，每页查询的条数；</li>
<li>公式:开始的索引当前的页码-每页显示的条数每页显示3条记录<ul>
<li>SELECT * FROM student LIMIT 0,3;  – 第1页</li>
<li>SELECT * FROM student LIMIT 3,3;  – 第2页</li>
<li>SELECT * FROM student LIMIT 6,3;  – 第3页</li>
</ul>
</li>
</ol>
<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ol>
<li><p>概念：对表中的数据进行限定，保证数据的正确性、有效性和完整性。</p>
</li>
<li><p>分类:</p>
<ol>
<li>主键约束:primary key</li>
<li>非空约束 : not null</li>
<li>唯一约束:unique</li>
<li>外键约束 : foreign key</li>
</ol>
</li>
<li><p><strong>非空约束</strong>:某一列的值不能为nu11</p>
<ol>
<li><p>创建表时添加约束</p>
<ul>
<li><p>CREATE TABLE stu(<br> id INT，<br> NAME VARCHAR(20) NOT NULL – name为非空</p>
<p> );</p>
</li>
</ul>
</li>
<li><p>创建表完后，添加非空约束</p>
<ul>
<li>ALTER TABLE StU MODIFY NAME VARCHAR(20) NOT NULL;</li>
</ul>
</li>
<li><p>删除name的非空约束</p>
<ul>
<li>ALTER TABLE STU MODIFY NAME VARCHAR(20);</li>
</ul>
</li>
</ol>
</li>
<li><p>唯一约束：</p>
<ol>
<li><p>注意 ：</p>
<ul>
<li>唯一约束可以有NULL值但是只能有一条记录为null</li>
</ul>
</li>
<li><p>在创建表时，条件唯一约束</p>
<ul>
<li>CREATE TABLE Stu(<br> id INT,phone number VARCHAR(20) UNIQUE – 手机号<br> );</li>
</ul>
</li>
<li><p>删除唯一约束</p>
<ul>
<li>ALTER TABLE stu DROP INDEX phone number;</li>
</ul>
</li>
<li><p>在表创建完后，添加唯一约束</p>
<ul>
<li>ALTER TABLE stu MODIFY phone number VARCHAR(20) UNIQUE;</li>
</ul>
</li>
</ol>
</li>
<li><p>主键约束:primary key。</p>
<ol>
<li><p>注意 :</p>
<ol>
<li>含义 : 非空且唯一	</li>
<li>一张表只能有一个字段为主键</li>
<li>主键就是表中记录的唯一标识</li>
</ol>
</li>
<li><p>在创建表时添加主键约束</p>
<ul>
<li>create table stu(<br> id int primary key,– :给id添加主键约束<br> name varchar(20)<br> );</li>
</ul>
</li>
<li><p>删除主键</p>
<ul>
<li>– 错误 alter table stu modify id int ;</li>
<li>ALTER TABLE Stu DROP PRIMARY KEY;</li>
</ul>
</li>
<li><p>创建完表后，添加主键</p>
<ul>
<li>ALTER TABLE Stu MODIFY id INT PRIMARY KEY;</li>
</ul>
</li>
<li><p>自动增长</p>
<ol>
<li><p>概念：如果某一列是数值类型的，使用 auto increment 可以来完成值得自动增长 </p>
</li>
<li><p>在创建表时，添加主键约束，并且完成主键自增长</p>
<ol>
<li><p>在创建表时，添加主键约束，并且完成主键自增长</p>
<ul>
<li><p>create table stu(<br>id int primary key auto_increment,– 给id添加主键约束<br>name varchar(20)</p>
<p>);</p>
</li>
</ul>
</li>
</ol>
</li>
<li><p>删除自动增长</p>
<ul>
<li>ALTER TABLE Stu MODIFY id INT;</li>
</ul>
</li>
<li><p>添加自动增长</p>
<ul>
<li>ALTER TABLE Stu MODIFY Id INT AUTO_INCREMENT;</li>
</ul>
</li>
</ol>
</li>
<li><p>外键约束： foreign key 让表于表产生关系，从而保证数据的正确性。</p>
<ol>
<li><p>在创建表时，可以添加外键</p>
<ul>
<li><p>语法 :<br> create table 表名(<br> ……<br> 外键列<br> constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称)</p>
<p> );</p>
</li>
</ul>
</li>
<li><p>删除外键</p>
<ul>
<li>ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</li>
</ul>
</li>
<li><p>创建表之后，添加外键</p>
<ul>
<li>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称)</li>
</ul>
</li>
<li><p>级联操作</p>
<ol>
<li>添加级联操作<ol>
<li>语法 :ALTER TABLE 表名 ADD CONSTRAINT 外键名称<ul>
<li>FOREIGN KEY (外键字段称) REFERENCES 表名称(表列名称) ON UPDATE CASCADE ON DELETE CASCADE</li>
</ul>
</li>
<li>分类 :<ol>
<li>级联更新:ON UPDATE CASCADE</li>
<li>级联删除:ON DELETE CASCADE</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="多表之间的关系"><a href="#多表之间的关系" class="headerlink" title="多表之间的关系"></a>多表之间的关系</h2><ol>
<li><p>分类</p>
<ol>
<li><p>一对一</p>
<ul>
<li>如 :人和身份证</li>
<li>分析 : 一个人只有一个身份证，一个身份证只能对应一个人</li>
</ul>
</li>
<li><p>一对多（多对一）</p>
<ul>
<li>如: 部门和员工水</li>
<li>分析 : 一个部门有多个员工，一个员工只能对应一个部门</li>
</ul>
</li>
<li><p>多对多</p>
<ul>
<li>如 : 学生和课程</li>
<li>分析 : 一个学生可以选择很多门课程，一个课程也可以被很多学生选择</li>
</ul>
</li>
</ol>
</li>
<li><p>实现关系</p>
<ol>
<li><p>一对多(多对一) :</p>
<ol>
<li>如:部门和员工</li>
<li>实现方式: 在<strong>多</strong>的一方建立外键，指向<strong>一</strong>的一方的主键</li>
</ol>
</li>
<li><p>多对多:</p>
<ol>
<li>如 : 学生和课程</li>
<li>实现方式:多对多关系实现需要借助<strong>第三张中间表</strong>。中间表<strong>至少包含两个字段</strong>，这<strong>两个字段作为第三张表的外键</strong>，<strong>分别指向两张表的主键</strong></li>
</ol>
</li>
<li><p>一对一(了解):</p>
<ol>
<li>如:人和身份证</li>
<li>实现方式:一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键。一般直接添加到同一张表里</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><ol>
<li><p>概念 : <strong>设计数据库时，需要遵循的一些规范</strong>。要遵循后边的范式要求，必须先遵循前边的所有范式要求 </p>
<ol>
<li>设计关系数据库时，蹲从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。</li>
<li>目前关采数据库有六种范式:第一范式(1NF)、第二范式2NF)、第三范式(3NF)、巴斯-科德范式(BCNF)、第四范式(4NF)和第五范式(5NF,又称完美范式)。</li>
</ol>
</li>
<li><p>分类</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb01/image-20230721213048319.png"
                      alt="image-20230721213048319"
                ></p>
<ol>
<li><p><strong>第一范式</strong>：每一列都是不可分割的原子数据项</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb01/image-20230721213030019.png"
                      alt="image-20230721213030019"
                ></p>
</li>
<li><p><strong>第二范式</strong>：在1NF的基础上，<strong>非码属性必须完全依赖于码</strong>(在1NF基础上消除非主属性对主码的部分函数依赖）</p>
<ol>
<li>几个概念<ol>
<li><p>函数依赖:A–&gt;B,如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A</p>
<ul>
<li>例如 : 学号–&gt;姓名。(学号，课程名称) –&gt; 分数</li>
</ul>
</li>
<li><p>完全函数依赖: A–B， 如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值。</p>
<ul>
<li>例如 : (学号，课程名称) –&gt; 分数</li>
</ul>
</li>
<li><p>部分函数依赖:A–&gt;B， 如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值即可。</p>
<ul>
<li>例如 : (学号，课程名称) – &gt;姓名</li>
</ul>
</li>
<li><p>传函数依赖:A–&gt;B，B如果通过A(属性组)的值，可以确定唯一B属性的值，在通过B属性(属性)的值可以确定唯一C属性的值，则称 C 传递函数依赖于A</p>
<ul>
<li>例如 : 学号–&gt;系名，系名–&gt;系主任</li>
</ul>
</li>
<li><p>码:如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码</p>
<ul>
<li>例如   该表中码为 : (学号，课程名称)</li>
<li>主属性：码属性组中的所有属性    </li>
<li>非主属性：除过码属性组的属性</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb01/image-20230721213110596.png"
                      alt="image-20230721213110596"
                ></p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p><strong>第三范式</strong>：在2NF基础上，任何非主属性不依赖于其它非主属性 (在2NF基础上<strong>消除传递依赖</strong>）</p>
</li>
</ol>
<h2 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h2><ol>
<li>命令行<ul>
<li>语法<ul>
<li>备份  mysqldump - uroot -root  数据库名称 &gt;保存的路径</li>
</ul>
</li>
<li>还原<ol>
<li>登录数据库</li>
<li>创建数据库 create database db1;</li>
<li>使用数据库 use db1;</li>
<li>执行文件  source 备份的文件路径</li>
</ol>
</li>
</ul>
</li>
<li>图形化工具</li>
</ol>
<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><ol>
<li><p>查询语法</p>
<ul>
<li>selcet<br>列名列表<br>form<br>表名列表<br>where<br>……</li>
</ul>
</li>
<li><p>准备sql</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb01/image-20230721215110640.png"
                      alt="image-20230721215110640"
                ></p>
</li>
<li><p>笛卡尔积</p>
<ul>
<li>有两个集合A,B.取这两个集合的所有组成情况</li>
<li>要完成多表查询，需要消除无用的数据</li>
</ul>
</li>
<li><p>多表查询的分类</p>
<ol>
<li><p>内连接查询 :</p>
<ol>
<li><p>隐式内连接:使用where条件消除无用数据</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb01/image-20230721220736276.png"
                      alt="image-20230721220736276"
                ></p>
</li>
<li><p>显示内连接</p>
<ol>
<li><p>语法： select  字段列表 form 表名1 inner join 表名2  on 条件；      </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb01/image-20230722072134254.png"
                      alt="image-20230722072134254"
                ></p>
</li>
</ol>
</li>
<li><p>内连接查询</p>
</li>
<li><p>从哪些表中查询数据</p>
</li>
<li><p>条件是什么</p>
</li>
<li><p>查询那些字段</p>
</li>
</ol>
</li>
<li><p>外链接查询:</p>
<ol>
<li>左外连接：<ul>
<li>语法：select  字段列表 form 表1 left [outer] join 表2  on 条件；</li>
<li>查询的是左表所有数据以及其交集部分</li>
</ul>
</li>
<li>右外连接：<ul>
<li>select  字段列表 form 表1 right [outer] join 表2  on 条件；</li>
<li>查询的是右表所有数据以及其交集部分</li>
</ul>
</li>
</ol>
</li>
<li><p>子查询 :</p>
<ol>
<li><p>概念：查询中嵌套查询，嵌套的那个查询被称为子查询    </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb01/image-20230722074220132.png"
                      alt="image-20230722074220132"
                ></p>
</li>
<li><p>子查询的不同情况</p>
<ol>
<li><p>子查询的结果是单行单列的</p>
<ul>
<li>子查询可以作为条件，使用运算符去判断</li>
</ul>
</li>
<li><p>子查询的结果是多行单列的</p>
<ul>
<li>子查询的结果可以作为条件，使用in来判断</li>
</ul>
</li>
<li><p>子查询的结果是多行多列的</p>
<ul>
<li>子查询的结果是多行单列的</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ol>
<li><p>事务的基本介绍</p>
<ol>
<li><p>概念</p>
<ul>
<li>如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</li>
</ul>
</li>
<li><p>操作</p>
<ul>
<li>开启事务 : start transaction;</li>
<li>回滚:rollback;</li>
<li>提交:commit;</li>
</ul>
</li>
<li><p>例子</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb01/image-20230722111259409.png"
                      alt="image-20230722111259409"
                ></p>
</li>
<li><p>MySQL数据库中事务默认自动提交</p>
<ol>
<li>事务提交的两种方式<ol>
<li>自动提交<ul>
<li>mysql就是自动提交的</li>
<li>每条DML(增删改)语句会自动提交一次事务</li>
</ul>
</li>
<li>手动提交<ul>
<li>oracle 数据库默认是手动提交事务</li>
<li>需要先开启事务，再提交</li>
</ul>
</li>
</ol>
</li>
<li>修改事务的默认方式：<ol>
<li>查看事务的默认提交方式 SELECT @@autocommit;– 1 代表自动提交 0 代表手动提交</li>
<li>修改默认提交方式: set @@autocommit &#x3D; 0;</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>事务的四大特征</p>
</li>
<li><p>原子性：是不可分割的最小单位，要么同时成功，要么同时失败</p>
</li>
<li><p>持久性：当事务提交或者回滚后，数据库会持久化的保存数据</p>
</li>
<li><p>隔离性：多个事务之间，相互独立。</p>
</li>
<li><p>一致性：事务操作前后，数据总量不变 </p>
</li>
<li><p>事务的隔离级别(了解)</p>
<ol>
<li>概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题</li>
<li>存在问题<ol>
<li>脏读：一个事务，读取到另一个事务中没有提交的数据</li>
<li>不可重复度(虚读)：在同一个事务中，两次读取到的数据不一样</li>
<li>幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。</li>
</ol>
</li>
<li>隔离级别<ol>
<li>read uncommitted：读未提交<ul>
<li>产生的问题: 脏读、不可重复读、幻读</li>
</ul>
</li>
<li>read committed :读已提交 （oracle 数据库默认）<ul>
<li>产生的问题 : 不可重复读、幻读</li>
</ul>
</li>
<li>repeatable read :可重复读 （MySQL默认）<ul>
<li>产生的问题：幻读</li>
</ul>
</li>
<li>serializable:串行化<ul>
<li>可以解决所有的问题</li>
</ul>
</li>
</ol>
</li>
<li><strong>注意</strong>：隔离级别从小到大安全性越来越高，但是效率越来越低；</li>
<li>数据库查询隔离级别 :<ul>
<li>select @@tx_isolation;   老版本叫tx isolation,现在新版本叫transaction_isolation</li>
</ul>
</li>
<li>数据库设置隔离级别 :<ul>
<li>set global transaction isolation level 级别字符串;</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="DCL-管理用户，授权"><a href="#DCL-管理用户，授权" class="headerlink" title="DCL:管理用户，授权"></a>DCL:管理用户，授权</h2><ol>
<li><p>管理用户</p>
<ol>
<li><p>添加用户</p>
<ol>
<li>语法：<ul>
<li>CREATE USER ‘用户名‘@’主机名’IDENTIFIED BY ‘密码’;</li>
</ul>
</li>
</ol>
</li>
<li><p>删除用户</p>
<ol>
<li>语法：<ul>
<li>DROP USER ‘用户名’@‘主机名；</li>
</ul>
</li>
</ol>
</li>
<li><p>修改用户密码</p>
<ol>
<li><p>语法：</p>
<ul>
<li><p>UPDATE  USER SET PASSWORD &#x3D; PASSWORD(‘新密码’) WHERE USER &#x3D; ’用户名‘；</p>
<p>UPDATE  USER SET PASSWORD &#x3D; PASSWORD(‘lihuibear’) WHERE USER &#x3D;’bear’;<br>flush privileges;&#x2F;&#x2F;不加此句需要重启服务器；</p>
</li>
<li><p>SET PASSWORD FOR ‘root‘@’localhost’ &#x3D; PASSWORD(‘123’);</p>
</li>
<li><p>mysql中忘记了root用户的密码 ?</p>
</li>
</ul>
<ol>
<li>cmd – &gt; net stop mysql 停止mysq1服务<ul>
<li>需要管理员运行该cmd</li>
</ul>
</li>
<li>使用无验证方式启动mysql服务: mysqld –skip-grant-tables；</li>
<li>打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功</li>
<li>use mysql;</li>
<li>update user set password &#x3D; password(‘你的新密码’) where user &#x3D; ‘root’;</li>
<li>关闭两个窗口</li>
<li>打开任务管理器，手动结束mysqld.exe 的进程</li>
<li>启动mysql服务</li>
<li>使用新密码登录。</li>
</ol>
</li>
</ol>
</li>
<li><p>查询用户</p>
<ol>
<li>切换到mysql数据库<ul>
<li>use mysql;</li>
</ul>
</li>
<li>查询user表<ul>
<li>SELECT* FROM user；</li>
</ul>
</li>
<li>通配符：% 表示可以在任意主机使用用户登录数据库</li>
</ol>
</li>
</ol>
</li>
<li><p>授权</p>
<ol>
<li>查询权限<ul>
<li>SHOW GRANTS FOR ‘用户名‘@’主机名’; </li>
<li>SHOW GRANTS FOR ‘lisi‘@’%’;</li>
</ul>
</li>
<li>授予权限：<ul>
<li>grant 权限列表 on 数据库名.表名 to ‘用户名‘@’主机名’;</li>
<li>给张三用户授予所有权限，在任意数据库任意表上</li>
<li>GRANT ALL ON <em>.</em> TO ‘zhangsan‘@’localhost’;</li>
</ul>
</li>
<li>撤销权限：<ul>
<li>revoke 权限列表 on 数据库名.表名 from ‘用户名‘@’主机名’;            </li>
<li>REVOKE UPDATE ON db3.<code>account</code> FROM ‘lisi‘@’%’;</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ol>
<li><p>概念</p>
<ul>
<li><p>Java DataBase Connectivity	Java数据库连接，Java语言操作数据库</p>
</li>
<li><p>JDBC本质</p>
<ul>
<li>其实是官网(sun公司)定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商可以去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口(JDBC)编程，真正执行的代码是驱动jar包中的实现类</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb01/image-20230722151414973.png"
                      alt="image-20230722151414973"
                ></p>
</li>
</ul>
</li>
</ol>
<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol start="2">
<li><p>快速入门：</p>
<ol>
<li><p>步骤</p>
<ol>
<li><p>导入驱动jar包 mysql-connnector-java-x.x.x-bin.jar</p>
</li>
<li><p>复制mysql-connnector-java-x.x.x-bin.jar包到项目libs目录下</p>
</li>
<li><p>右键 Add as library</p>
</li>
<li><p>注册驱动</p>
</li>
<li><p>取数据库的连接对象 Connection</p>
</li>
<li><p>定义sql</p>
</li>
<li><p>取执行sql语句的对象 Statement</p>
</li>
<li><p>执行sql，接收返回结果</p>
</li>
<li><p>处理结果 </p>
</li>
<li><p>释放资源</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册驱动	</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取数据库的连接对象 Connection</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/db1&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"><span class="comment">//定义sql</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = 500 where id =1&quot;</span>;</span><br><span class="line"><span class="comment">//取执行sql语句的对象 Statement    </span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="comment">//执行sql，接收返回结果  </span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br><span class="line">System.out.println(count);</span><br><span class="line"><span class="comment">//释放资源  </span></span><br><span class="line">stmt.close();      </span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="详解各个部分"><a href="#详解各个部分" class="headerlink" title="详解各个部分"></a>详解各个部分</h3><ol start="3">
<li><p>详解各个部分</p>
<ol>
<li><p>DriverManager: 驱动管理对象</p>
<pre><code>* 功能：
    1. 注册驱动：告诉程序该使用哪一个数据库驱动jar包
        static void registerDriver(Driver driver): 注册给定的驱动程序 DriverManager
        写代码使用: Class.forName(&quot;com.mysql.jdbc.Driver&quot;);
        通过查看源码发现: 在com.mysql.jdbc.Driver类中存在静态代码块
        `static &#123;`
            `try &#123;`
                `DriverManager.registerDriver(new Driver());`
            `&#125; catch (SQLException var1) &#123;`
                `throw new RuntimeException(&quot;Can&#39;t register driver!&quot;);`
            `&#125;`
        `&#125;`
 
        注意：**mysql5之后的驱动jar包可以省略注册驱动的步骤**
    2. 获取数据库连接：
        * 方法: static Connerction getConnection(String url, String user, String password)
        * 参数：
            * url：指定连接的路径
                * 语法: jdbc:mysql://ip地址(域名):端口号/数据库名称
                * 例子: jdbc:mysql://localhost:3306/db1
                * 细节: 如果连接的是本机mysql服务器，并且mysql服务默认端口为3306，则url可以简写为jdbc:mysql:///数据库名称
            * user：用户名
            * password：密码
</code></pre>
</li>
<li><p>Connection: 数据库连接对象<br> 1. 功能：<br>     1. 获取执行sql的对象<br>         * Statement createStatement()<br>         * PreparedStatement prepareStatement(String sql)<br>     2. 管理事务：<br>         - 开启事务: void setAutoCommit(boolean autoCommit)	: 调用该方法设置参数为false，即开启事务<br>         - 提交事务: void commit()<br>          - 回滚事务: void rollback()</p>
</li>
<li><p>Statement: 执行sql的对象<br> 1. 执行sql<br>     1. booleann execute(String sql) : 可以执行任意的sql （了解）<br>     2. int executeUpdate(String sql) : 执行DML(insert、update、delete)语句、DDL(create、alter、drop)语句<br>         * 返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 <strong>返回值&gt;0执行成功</strong> 反之失败<br>      3. ResultSet executeQuery(String sql) : 执行DQL(select)语句 返回的结果与 executeUpdate 不一样<br>  2. 练习<br>      1. account表 添加一条记录<br>      2. account表 修改记录<br>      3. account表 删除一条记录</p>
</li>
<li><p>ResultSet: 结果集对象，封装查询结果</p>
<pre><code>  1. next()：游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，返回boolean值
     
  2. getXxx(参数)：获取数据
     
       * Xxx代表数据类型	如: int getInt()
     
       * 参数：
         1. int: 代表列的编号，从1开始
         2. String: 代表列名称
     
  3. 注意：
     
       * 使用步骤：
           1. 游标向下移动一行
           2. 判断是否有数据
           3. 获取数据
           while(rs.next())&#123;...&#125;
</code></pre>
   <div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">练习：</span><br><span class="line"><span class="bullet">    *</span> 定义一个方法，查询emp表的数据将其封装为对象，然后装载集合，返回。</span><br><span class="line"><span class="bullet">        1.</span> 定义Emp类</span><br><span class="line"><span class="bullet">        2.</span> 定义方法 public List<span class="language-xml"><span class="tag">&lt;<span class="name">Emp</span>&gt;</span></span> findAll()&#123;&#125;</span><br><span class="line"><span class="bullet">        3.</span> 实现方法 select * from emp;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>PreparedStatement: 执行sql的对象</p>
<ol>
<li><p>SQL注入问题: 在拼接SQL时，有一些sql的特殊关键字参与字符串的拼接，会造成安全性问题</p>
<ol>
<li>输入用户随便，输入密码：a’ or ‘a’ &#x3D; ‘a</li>
<li>sql : select * from USER where username &#x3D; ‘xxx’ and password &#x3D; ‘a’ or ‘a’ &#x3D; ‘a’;</li>
</ol>
</li>
<li><p>解决sql注入问题：使用PreparedStatement来解决</p>
</li>
<li><p>预编译的SQL：参数使用?作为占位符</p>
</li>
<li><p>步骤：</p>
<ol>
<li>导入驱动jar包 mysql-connnector-java-x.x.x-bin.jar</li>
<li>注册驱动</li>
<li>获取数据库的连接对象 Connection</li>
<li>定义sql<ul>
<li>注意：sql的参数使用?作为占位符。如: select * from user where username &#x3D; ? and password &#x3D; ?</li>
</ul>
</li>
<li>获取执行sql语句的对象 PreparedStatement Connection.preparedStatement(String sql)</li>
<li>给?赋值:<ol>
<li>方法：setXxx(参数1, 参数2)<ul>
<li>参数1: ?的位置编号 从1 开始</li>
<li>参数2: ?的值</li>
</ul>
</li>
</ol>
</li>
<li>执行sql，接收返回结果，不需要传递sql语句</li>
<li>处理结果</li>
<li>释放资源</li>
</ol>
</li>
<li><p>注意：后期都会使用PreparedStatement来完成增删改查的所有操作</p>
<ol>
<li>可以防止sql注入</li>
<li>效率更高</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="JDBC工具类"><a href="#JDBC工具类" class="headerlink" title="JDBC工具类"></a>JDBC工具类</h3><ol start="4">
<li><p>JDBC工具类</p>
<ol>
<li>目的：简化书写</li>
</ol>
<ul>
<li>分析：<ol>
<li>注册驱动也抽取</li>
<li>抽取一个方法获取连接对象<ul>
<li>需求：不想传递参数(麻烦)，还得保证工具类的通用性。</li>
<li>解决：配置文件<br>  jdbc.properties<br>  url&#x3D;<br>  user&#x3D;<br>  password&#x3D;</li>
</ul>
</li>
<li>抽取一个方法释放资源</li>
</ol>
</li>
</ul>
<ol start="3">
<li>练习：<br>    * 需求：<br>        1. 通过键盘录入用户名和密码<br>        2. 判断用户是否登录成功<br>            * select * from USER where username &#x3D; ‘’ and password &#x3D; ‘’;<br>            * 如果这个sql有查询结果，则成功，反之失败</li>
</ol>
<h3 id="JDBC管理事务"><a href="#JDBC管理事务" class="headerlink" title="JDBC管理事务"></a>JDBC管理事务</h3></li>
<li><p>JDBC管理事务</p>
<ol>
<li>事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则者多个步骤要么同时成功，要么同时失败。</li>
<li>操作：<ol>
<li>开启事务</li>
<li>提交事务</li>
<li>回滚事务</li>
</ol>
</li>
<li>使用Connection对象来管理事务<ol>
<li>开启事务: void setAutoCommit(boolean autoCommit)	: 调用该方法设置参数为false，即开启事务<ul>
<li>在执行sql之前开启事务(在获得连接后开启)</li>
</ul>
</li>
<li>提交事务: void commit()<ul>
<li>当所有sql都执行完提交事务</li>
</ul>
</li>
<li>回滚事务: void rollback()<ul>
<li>在catch中回滚事务</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><ol>
<li><p>概述</p>
<ol>
<li>其实就是一个容器(集合)，存放数据库连接的容器</li>
<li>当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</li>
</ol>
</li>
<li><p>好处：</p>
<ol>
<li>节约资源 </li>
<li>用户访问高效</li>
</ol>
</li>
<li><p>实现：<br>  1. 标准接口：DataSource	javax.sql包下的<br>       1. 方法：<br>        * 获取连接：getConnection()<br>           * 归还连接：Connection.close()<br>           如果连接对象Connection是从连接池中获取的，那么调用Connection.close()，则不会再关闭连接，而是归还连接。<br>       2. 一般我们不去实现它，有数据库厂商来实现<br>           1. C3P0：数据库连接池技术<br>           2. Druid：数据库连接池实现技术，由阿里巴巴提供的</p>
</li>
<li><p>C3P0数据库连接池技术</p>
<ol>
<li>步骤：<ol>
<li>导入jar包 （两个）<ul>
<li>不要忘记导入数据库的驱动jar包</li>
</ul>
</li>
<li>定义配置文件</li>
<li>名称：c3p0.properties或者c3p0-config.xml</li>
<li>路径：直接将文件放在src目录下即可</li>
<li>创建核心对象 :数据库连接池对象 ComboPooledDataSource </li>
<li>获取连接：getConnection()</li>
</ol>
</li>
</ol>
</li>
<li><p>Druid：数据库连接池实现技术，由阿里巴巴提供的</p>
<ol>
<li>步骤：<br>1. 导入jar包 druid-1.0.9.jar<br>2. 定义配置文件：<br>- 是properties形式的<br>- 可以叫任意名称，可以放在任意目录下<br>3. 加载配置文件 	Properties<br>4. 获取数据库连接池对象：通过工厂类来获取	DruidDataSourceFactory<br>5. 获取连接：getConnection()</li>
<li>定义工具类<br>1. 定义一个类 JDBCUtils<br>1. 提供静态代码块加载配置文件，初始化连接池对象<ol start="3">
<li>提供方法<ol>
<li>获取连接方法：通过数据库连接池获取连接</li>
<li>释放资源</li>
<li>获取连接池的方法</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><ol>
<li><p>S pring框架对JDBC的简单封装。提供了JDBC Template对象简化JDBC的开发</p>
</li>
<li><p>步骤：</p>
</li>
<li><p>导入jar包</p>
</li>
<li><p>创建JdbcTemplate对象。依赖于数据源DataSource</p>
<ul>
<li>JdbcTemplate template &#x3D; new JdbcTemplate(ds);</li>
</ul>
</li>
<li><p>调用JdbcTemplate的方法来完成CRUD的操作</p>
<ol>
<li>update(): 执行DML语句。增、删、改语句</li>
<li>queryForMap(): 查询结果，将结果集封装为Map集合，将列名作为key，将值作为value，将这条记录封装为value</li>
</ol>
<ul>
<li>注意：这个方法查询的结果集长度只能是1</li>
</ul>
<ol start="3">
<li>queryForList(): 查询结果，将结果集封装为list集合</li>
</ol>
<ul>
<li>注意：将每一条记录封装为Map集合，再将Map集合装载在List集合中</li>
</ul>
<ol start="4">
<li>query(): 查询结果，将结果封装为JavaBean对象</li>
</ol>
<ul>
<li>query方法的参数：RowMapper<ul>
<li>一般使用BeanPropertiyRowMapper实现类。可以完成数据到JavaBean的自动封装。</li>
<li>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</li>
</ul>
</li>
</ul>
<ol start="5">
<li>queryForObject(): 查询结果，将结果封装为对象</li>
</ol>
<ul>
<li>一般用于聚合函数的查询</li>
</ul>
</li>
<li><p>练习：</p>
<ul>
<li>需求：<ol>
<li>修改1号数据的 salary 为 10000</li>
<li>添加一条记录</li>
<li>删除刚才添加的记录</li>
<li>查询id为1的记录，将其封装为Map集合</li>
<li>查询所有的记录，将其封装为List集合</li>
<li>查询所有记录，将其封装为Emp对象的List集合</li>
<li>查询总的记录数</li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="web概念"><a href="#web概念" class="headerlink" title="web概念"></a>web概念</h2><ol>
<li><p>JavaWeb：</p>
<ol>
<li>使用Java语言开发基于互联网的项目</li>
</ol>
</li>
<li><p>软件的架构：</p>
<ol>
<li><p>C&#x2F;S：Client&#x2F;Server 客户端&#x2F;服务器端</p>
<ul>
<li>在用户本地有一个客户端程序，在远程有一个服务器端程序</li>
<li>如：QQ，迅雷…</li>
<li>优点：<ol>
<li>用户体验好</li>
</ol>
</li>
<li>缺点：<ol>
<li>开发、安装、部署、维护麻烦</li>
</ol>
</li>
</ul>
</li>
<li><p>B&#x2F;S：Browser&#x2F;Server 浏览器&#x2F;服务器端</p>
</li>
</ol>
<ul>
<li><p>只需要一个浏览器，用户通过不同的网址(URL)，可以访问远程不同的服务器端程序</p>
</li>
<li><p>优点：</p>
<ol>
<li>开发、安装、部署、维护简单</li>
</ol>
</li>
<li><p>缺点：</p>
<ol>
<li>如果应用过大，用户的体验可能会受到影响</li>
<li>对硬件要求过高</li>
</ol>
</li>
</ul>
<ol start="3">
<li>B&#x2F;S架构详解</li>
</ol>
<ul>
<li><p>资源分类：</p>
<ol>
<li><p>静态资源：<br>* 使用静态网页开发技术发布的资源<br>* 特点：</p>
<ul>
<li>所有用户访问，得到的结果是一样的</li>
<li>如：文本、图片、音频、视频，HTML,CSS,JavaScript</li>
<li>如果用户请求的是静态资源，那么服务器会直接将静态资源发送给浏览器，浏览器中内置了静态资源的解析引擎</li>
</ul>
</li>
<li><p>动态资源：<br>* 使用动态网页技术发布的资源<br>* 特点：</p>
<ul>
<li>所有用户访问，得到的结果可能不一样</li>
<li>如：jsp&#x2F;servlet,php,asp…</li>
<li>如果用户请求的是动态资源，那么服务器将会执行动态资源，转换为静态资源，再发送给浏览器</li>
</ul>
</li>
</ol>
<pre><code>**我们要学习动态资源，必须先学习静态资源！**
</code></pre>
<ol start="3">
<li>静态资源：</li>
</ol>
<pre><code>1. HTML：用于搭建基础网页，展示页面的内容
2. CSS：用于美化页面，布局页面
3. JavaScript：控制页面的元素，让页面有一些动态的效果
</code></pre>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
        <category>JAVAWeb</category>
      </categories>
      <tags>
        <tag>项目组</tag>
        <tag>黑马程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVAWeb03</title>
    <url>/2023/08/01/JAVAWeb03/</url>
    <content><![CDATA[<h1 id="Boostrap"><a href="#Boostrap" class="headerlink" title="Boostrap"></a>Boostrap</h1><ol>
<li><p>概念：一个前端开发的框架。Bootstrap是美国Twitter公司的设计师Mark Otto和Jacob Thornton合作基于HTML、CSS、JavaScript 开发的简洁、直观、强悍的前端开发框架，使得 Web 开发更加快捷。</p>
<ul>
<li>框架：一个半成品软件，开发人员可以在框架基础上，再进行开发，简化编码</li>
<li>好处<ol>
<li>定义了很多css样式和js插件。我们开发人员可以直接使用这些样式和插件得到丰富的页面效果。</li>
<li>响应式布局。<ul>
<li>同一套页面可以兼容不同分辨率的设备。</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><p>快速入门</p>
<ol>
<li>下载Bootstrap</li>
<li>在项目中将这三个文件夹复制</li>
<li>创建html页面，引入必要的资源文件</li>
</ol>
</li>
</ol>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">//基础模板</span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap_基础模板<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;bs/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bs/dist/jquery-3.2.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bs/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h1><ol>
<li><p>同一套页面可以兼容不同分辨率的设备。</p>
</li>
<li><p>实现：依赖于栅格系统——将一行平均分成12个格子，可以去指定元素占几个格子</p>
</li>
<li><p>步骤：</p>
</li>
</ol>
<ul>
<li>定义容器，相当于之前的table<ul>
<li>容器分类：<ol>
<li>container：两边留白</li>
<li>container-fluid：每一种设备都是100%宽度</li>
</ol>
</li>
</ul>
</li>
<li>定义行，相当于之前的tr		样式：row</li>
<li>定义元素。指定该元素在不同的设备上所占的格子数目。	样式：col-设备代号-格子数目<ul>
<li>设备代号:<ol>
<li>xs：超小屏幕 手机 (&lt;768px)：col-xs-12</li>
<li>sm：小屏幕 平板 (≥768px)</li>
<li>md：中等屏幕 桌面显示器 (≥992px)</li>
<li>lg：大屏幕 大桌面显示器 (≥1200px)</li>
</ol>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>注意：</p>
<ol>
<li><p>一行中如果格子数目超过12，则超出部分自动换行</p>
</li>
<li><p>栅格类属性可以<strong>向上兼容</strong>，栅格类适用于与<strong>屏幕宽度大于或等于分界点大小</strong>的设备 </p>
</li>
<li><p>如果真实设备宽度小于了设置栅格类属性的设备代码的最小值，会一个元素占满一整行</p>
</li>
</ol>
</li>
</ul>
<h1 id="css样式和js插件"><a href="#css样式和js插件" class="headerlink" title="css样式和js插件"></a>css样式和js插件</h1><p>黑马程序员javaweb p196-199</p>
<ol>
<li>全局CSS样式:<ul>
<li>按钮：class&#x3D;”btn btn-default”<ul>
<li>btn-default（默认样式）</li>
<li>btn-primary（首选项）</li>
<li>btn-success（成功）</li>
<li>btn-info（一般信息）</li>
<li>btn-warning （警告）</li>
<li>btn-danger（危险）</li>
<li>btn-link（链接）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb03/image-20230801161723685.png"
                      alt="按钮样式"
                ></li>
</ul>
</li>
<li>图片<ul>
<li>class&#x3D;”img-responsive”: 图片任意尺寸占100%</li>
<li>形状：<ul>
<li>class&#x3D;”img-rounded”：方形</li>
<li>class&#x3D;”img-cricle”：圆形</li>
<li>class&#x3D;”img-thumbnail”：相框</li>
</ul>
</li>
</ul>
</li>
<li>表格<ul>
<li>class&#x3D;”table” 表格</li>
<li>class&#x3D;”table-bordered” 边框</li>
<li>class&#x3D;”table-hover” 悬浮效果</li>
</ul>
</li>
<li>表单<ul>
<li>给表单项添加：class&#x3D;”form-control”</li>
</ul>
</li>
</ul>
</li>
<li>组件：<ul>
<li>导航条</li>
<li>分页条</li>
</ul>
</li>
<li>插件：<ul>
<li>轮播图</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
        <category>JAVAWeb</category>
      </categories>
      <tags>
        <tag>项目组</tag>
        <tag>黑马程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVAWeb02</title>
    <url>/2023/07/25/JAVAWeb02/</url>
    <content><![CDATA[<h1 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h1><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念：是最基础的网页开发语言</span><br><span class="line"><span class="bullet">	*</span> Hyper Text Markup Language 超文本标记语言</span><br><span class="line"><span class="bullet">		*</span> 超文本：</span><br><span class="line"><span class="bullet">			*</span> 超文本是用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本。</span><br><span class="line"><span class="bullet">		*</span> 标记语言：</span><br><span class="line"><span class="bullet">			*</span> 由标签构成的语言。&lt;标签名称&gt; 如html, xml</span><br><span class="line"><span class="bullet">			*</span> 标记语言不是编程语言</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 快速入门：</span><br><span class="line"><span class="bullet">	*</span> 语法：</span><br><span class="line"><span class="bullet">		1.</span> html文档后缀名 .html 或者 .htm</span><br><span class="line"><span class="bullet">		2.</span> 标签分为</span><br><span class="line"><span class="bullet">			1.</span> 围堵标签：有开始标签和结束标签。如 <span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span> <span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="bullet">			2.</span> 自闭和标签：开始标签和结束标签在一起。 如 <span class="language-xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="bullet">		3.</span> 标签可以嵌套：</span><br><span class="line"><span class="code">			需要正确嵌套，不能你中有我，我中有你</span></span><br><span class="line"><span class="code">			错误: &lt;a&gt;&lt;b&gt;&lt;/a&gt;&lt;/b&gt;</span></span><br><span class="line"><span class="code">			正确: &lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="code">			</span></span><br><span class="line"><span class="code">		4. 在开始标签中可以定义属性。属性是由键值对组成，值需要用引号(单双都可)引起来</span></span><br><span class="line"><span class="code">		5. html的标签不区分大小写，建议使用小写。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> 标签学习：</span><br><span class="line"><span class="bullet">	1.</span> 文件标签：构成html最基本的标签</span><br><span class="line"><span class="bullet">		*</span> html:html文档的根标签</span><br><span class="line"><span class="bullet">		*</span> head:头标签。用于指定html文档的一些属性。引入外部的资源</span><br><span class="line"><span class="bullet">		*</span> title:标题标签 </span><br><span class="line"><span class="bullet">		*</span> body：体标签</span><br><span class="line"><span class="bullet">		*</span> &lt;!DOCTYPE html&gt;:html5中定义改文档是html文档</span><br><span class="line"><span class="bullet">	2.</span> 文本标签：和文本有关的标签</span><br><span class="line"><span class="bullet">		*</span> 注释：&lt;!-- --&gt;</span><br><span class="line"><span class="bullet">		*</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span> to <span class="language-xml"><span class="tag">&lt;<span class="name">h6</span>&gt;</span></span>：标题标签</span><br><span class="line"><span class="bullet">			*</span> h1~h6字体大小主键递减</span><br><span class="line"><span class="bullet">		*</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>：段落标签</span><br><span class="line"><span class="bullet">		*</span> <span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span>：换行标签</span><br><span class="line"><span class="bullet">		*</span> <span class="language-xml"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span>：展示一条水平线</span><br><span class="line"><span class="bullet">			*</span> 属性：</span><br><span class="line"><span class="bullet">				*</span> color：颜色</span><br><span class="line"><span class="bullet">				*</span> width：宽度</span><br><span class="line"><span class="bullet">				*</span> size：高度</span><br><span class="line"><span class="bullet">				*</span> align：对齐方式</span><br><span class="line"><span class="bullet">					*</span> center：居中</span><br><span class="line"><span class="bullet">					*</span> left：左对齐</span><br><span class="line"><span class="bullet">					*</span> right：右对齐</span><br><span class="line"><span class="bullet">		*</span> <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>：字体加粗</span><br><span class="line"><span class="bullet">		*</span> <span class="language-xml"><span class="tag">&lt;<span class="name">i</span>&gt;</span></span>：字体斜体</span><br><span class="line"><span class="bullet">		*</span> <span class="language-xml"><span class="tag">&lt;<span class="name">font</span>&gt;</span></span>：字体标签</span><br><span class="line"><span class="bullet">			*</span> 属性：</span><br><span class="line"><span class="bullet">				*</span> color：颜色</span><br><span class="line"><span class="bullet">				*</span> size：大小</span><br><span class="line"><span class="bullet">				*</span> face：字体</span><br><span class="line"><span class="bullet">		*</span> <span class="language-xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span>：文本居中</span><br><span class="line"><span class="bullet">		*</span> 属性定义：</span><br><span class="line"><span class="bullet">			*</span> color：</span><br><span class="line"><span class="bullet">				1.</span> 英文单词：red,green,blue</span><br><span class="line"><span class="bullet">				2.</span> rgb(值1, 值2, 值3):值的范围：0~255	如 rgb(0,0,25 5)</span><br><span class="line"><span class="bullet">				3.</span> #值1值2值3：值的范围：00~FF。 如: #FF00FF</span><br><span class="line"><span class="bullet">			*</span> width:</span><br><span class="line"><span class="bullet">				1.</span> 数值：width=&#x27;20&#x27;，数值的单位，默认是 px(像素)</span><br><span class="line"><span class="bullet">				2.</span> 数值% ：占比相对于父元素的比例</span><br><span class="line"></span><br><span class="line"><span class="bullet">		*</span> 案例</span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="code">	3. 图片标签</span></span><br><span class="line"><span class="code">		* img：展示图片</span></span><br><span class="line"><span class="code">			* 属性：</span></span><br><span class="line"><span class="code">				* src：指定图片位置</span></span><br><span class="line"><span class="code">			* 相对路径：</span></span><br><span class="line"><span class="code">				* 以.开头的路径</span></span><br><span class="line"><span class="code">					* ./: 代表当前目录	./image/1.jpg</span></span><br><span class="line"><span class="code">					* ../: 代表上一级目录</span></span><br><span class="line"><span class="code">	4. 列表标签：</span></span><br><span class="line"><span class="code">		* 有序列表：</span></span><br><span class="line"><span class="code">			* ol</span></span><br><span class="line"><span class="code">			* li</span></span><br><span class="line"><span class="code">		* 无序标签：</span></span><br><span class="line"><span class="code">			* ul</span></span><br><span class="line"><span class="code">			* li </span></span><br><span class="line"><span class="code">	5. 链接标签</span></span><br><span class="line"><span class="code">		* a：定义一个超链接</span></span><br><span class="line"><span class="code">			* 属性：</span></span><br><span class="line"><span class="code">				* href：指定访问资源的URL(统一资源定位符)</span></span><br><span class="line"><span class="code">				* target：指定打开资源的方 式</span></span><br><span class="line"><span class="code">					* _self：默认值，在当前页面打开</span></span><br><span class="line"><span class="code">					* _blank：在空白页面打开</span></span><br><span class="line"><span class="code">	6. div和span：</span></span><br><span class="line"><span class="code">		* div：  </span></span><br><span class="line"><span class="code">		* span：文本信息在一行展示，行内标签，内联标签。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">	7.</span> 语义化标签：html5中为了提高程序的可读性，提供了一些标签</span><br><span class="line"><span class="bullet">		1.</span> <span class="language-xml"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span>: 页眉</span><br><span class="line"><span class="bullet">		2.</span> <span class="language-xml"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span>: 页脚</span><br><span class="line"><span class="code">	*6,7需要结合css一起使用</span></span><br><span class="line"><span class="code">	8. 表格标签</span></span><br><span class="line"><span class="code">		* table：定义表格</span></span><br><span class="line"><span class="code">			* width：宽度</span></span><br><span class="line"><span class="code"> 			* cellpadding：定义内容和单元格的距离</span></span><br><span class="line"><span class="code">			* cellspacing：定义单元格之间的距离。如果指定为0，则单元格的线会合为一条。</span></span><br><span class="line"><span class="code">			* bgcolor：背景色</span></span><br><span class="line"><span class="code">			* align：对齐方式</span></span><br><span class="line"><span class="code">		* tr：定义行</span></span><br><span class="line"><span class="code">			* bgcolor：背景色</span></span><br><span class="line"><span class="code">			* align：对齐方式</span></span><br><span class="line"><span class="code">		* td：定义单元格</span></span><br><span class="line"><span class="code">			* colspan：合并行</span></span><br><span class="line"><span class="code">			* rowspan：合并列 </span></span><br><span class="line"><span class="code">		* th：定义表头单元格</span></span><br><span class="line"><span class="code">		* &lt;caption&gt;：表格标题</span></span><br><span class="line"><span class="code">		* &lt;thead&gt;：表示表格的头部分</span></span><br><span class="line"><span class="code">		* &lt;tbody&gt;：表示表格的体部分</span></span><br><span class="line"><span class="code">		* &lt;tfoot&gt;：表示表格的脚部分</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure></div>

<h3 id="特殊字符表"><a href="#特殊字符表" class="headerlink" title="特殊字符表"></a>特殊字符表</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb02/image-20230726115448051.png"
                      alt="image-20230726115448051"
                ></p>
<h3 id="HTML标签：表单标签"><a href="#HTML标签：表单标签" class="headerlink" title="HTML标签：表单标签"></a>HTML标签：表单标签</h3><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 表单：</span><br><span class="line"><span class="bullet">	*</span> 概念：用于采集用户输入的数据的。用于和服务器进行交互。</span><br><span class="line"><span class="bullet">	*</span> form: 用于定义表单的。可以定义一个范围，范围代表用户采集数据的范围</span><br><span class="line"><span class="bullet">		*</span> 属性：</span><br><span class="line"><span class="bullet">			*</span> action：指定提交数据的URL</span><br><span class="line"><span class="bullet">            *</span> method：指定提交方式</span><br><span class="line"><span class="bullet">                *</span> 分类：一共七种，两种比较常用</span><br><span class="line"><span class="bullet">                    *</span> GET：</span><br><span class="line"><span class="bullet">                    	1.</span> 请求参数会在地址栏中显示，会封装到请求行中(HTTP协议后讲解)</span><br><span class="line"><span class="bullet">                    	2.</span> 请求参数的大小是有限制的</span><br><span class="line"><span class="bullet">                    	3.</span> 不太安全</span><br><span class="line"><span class="bullet">                    *</span> POST：</span><br><span class="line"><span class="bullet">                    	1.</span> 请求参数不会在地址栏中显示，会封装在请求体中(HTTP协议后讲解)</span><br><span class="line"><span class="bullet">                    	2.</span> 请求参数的大小没有限制</span><br><span class="line"><span class="bullet">                    	3.</span> 较为安全</span><br><span class="line"> 你</span><br><span class="line"><span class="bullet">        *</span> 表单项中的数据要想被提交，必须指定其name属性</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 表单项标签：</span><br><span class="line"><span class="bullet">	*</span> input：可以通过type属性值，改变元素展示的样式</span><br><span class="line"><span class="bullet">		*</span> type属性：</span><br><span class="line"><span class="bullet">			*</span> text：文本输入框，默认值</span><br><span class="line"><span class="bullet">				*</span> placeholder：指定输入框的提示信息，当输入框的内容发生变化，会自动清楚提示信息</span><br><span class="line"><span class="bullet">			*</span> password：密码输入框</span><br><span class="line"><span class="bullet">			*</span> radio：单选框</span><br><span class="line"><span class="bullet">				*</span> 注意：in</span><br><span class="line"><span class="bullet">					1.</span> 要想让多个单选框实现单选的效果，则多个单选框的name属性值必须一样</span><br><span class="line"><span class="bullet">					2.</span> 一般会给每一个单选框提供value属性，指定其被选中后提交的值</span><br><span class="line"><span class="bullet">					3.</span> checked属性，可以指定默认值，默认被选中</span><br><span class="line"><span class="bullet">			*</span> checkbox：复选框</span><br><span class="line"><span class="bullet">				*</span> 注意：</span><br><span class="line"><span class="bullet">					1.</span> 一般会给每一个单选框提供value属性，指定其被选中后提交的值</span><br><span class="line"><span class="bullet">					2.</span> checked属性，可以指定默认值，默认被选中</span><br><span class="line"><span class="bullet">			*</span> file：文件选择框</span><br><span class="line"><span class="bullet">			*</span> hidden：隐藏域，用于提交一些信息</span><br><span class="line"><span class="bullet">			*</span> color:取色器</span><br><span class="line"><span class="bullet">			*</span> data:年月日</span><br><span class="line"><span class="bullet">			*</span> datatime-local: 年月日 时分 </span><br><span class="line"><span class="bullet">            *</span> email:定义用于 e-mail 地址的字段。 请在电子邮件地址中包括“@”。 </span><br><span class="line"><span class="bullet">			*</span> 按钮：</span><br><span class="line"><span class="bullet">				*</span> submit： 提交按钮，用于提交表单</span><br><span class="line"><span class="bullet">				*</span> button：普通按钮</span><br><span class="line"><span class="bullet">				*</span> image：图片提交按钮</span><br><span class="line"><span class="bullet">				*</span> numbear:年龄</span><br><span class="line"><span class="bullet">		*</span> label：指定输入项的文字描述信息</span><br><span class="line"><span class="bullet">			*</span> 注意</span><br><span class="line"><span class="bullet">				*</span> label的for属性一般会和input的id属性值对应。如果对应了，则点击label区域，会让input输入框获取焦点  </span><br><span class="line"><span class="bullet">	*</span> select：下拉列表</span><br><span class="line"><span class="bullet">		*</span> 子元素option，指定列表项</span><br><span class="line"><span class="code">		 </span></span><br><span class="line"><span class="code">	* textarea：文本域</span></span><br><span class="line"><span class="code">		* cols：指定列数</span></span><br><span class="line"><span class="code">		* rows：指定行数</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure></div>

<h1 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h1><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念：Cascading Style Sheets 层叠样式表 </span><br><span class="line"><span class="bullet">	*</span> 层叠：多个样式可以作用在同一个html的元素上，同时生效</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 好处：</span><br><span class="line"><span class="bullet">	1.</span> 功能强大</span><br><span class="line"><span class="bullet">	2.</span> 将内容展示和样式控制分类</span><br><span class="line"><span class="bullet">		*</span> 降低耦合度，解耦</span><br><span class="line"><span class="bullet">		*</span> 让分工合作更容易</span><br><span class="line"><span class="bullet">		*</span> 提高开发效率</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> CSS的使用：CSS和HTML结合方式</span><br><span class="line"><span class="bullet">	1.</span> 内联样式</span><br><span class="line"><span class="bullet">		*</span> 在标签内使用style属性指定css代码</span><br><span class="line"><span class="bullet">		*</span> 如	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="bullet">	2.</span> 内部样式</span><br><span class="line"><span class="bullet">		*</span> 在head标签内部定义style标签，style的标签内容就是css代码</span><br><span class="line"><span class="bullet">		*</span> 如	</span><br><span class="line"><span class="code">		&lt;head&gt;</span></span><br><span class="line"><span class="code">			&lt;style&gt;</span></span><br><span class="line"><span class="code">				div&#123;</span></span><br><span class="line"><span class="code">					color:blue;</span></span><br><span class="line"><span class="code">				&#125; </span></span><br><span class="line"><span class="code">			&lt;/style&gt;</span></span><br><span class="line"><span class="code">		&lt;/head&gt;</span></span><br><span class="line"><span class="code">		&lt;body&gt;</span></span><br><span class="line"><span class="code">			&lt;div&gt;</span></span><br><span class="line"><span class="code">			你好</span></span><br><span class="line"><span class="code">			&lt;/div&gt;</span></span><br><span class="line"><span class="code">        &lt;/body&gt;</span></span><br><span class="line"><span class="code">	3. 外部样式</span></span><br><span class="line"><span class="code">		1. 定义css资源文件</span></span><br><span class="line"><span class="code">		2. 在head标签内定义link标签，引入外部资源文件</span></span><br><span class="line"><span class="code">		&lt;head&gt;</span></span><br><span class="line"><span class="code">			&lt;style&gt;</span></span><br><span class="line"><span class="code">			&lt;link rel=&quot;stylesheet&quot; href=&quot;css/a.css&quot;&gt; </span></span><br><span class="line"><span class="code">			&lt;/style&gt;</span></span><br><span class="line"><span class="code">		&lt;/head&gt;</span></span><br><span class="line"><span class="code">		&lt;body&gt;</span></span><br><span class="line"><span class="code">			&lt;div&gt;</span></span><br><span class="line"><span class="code">			你好</span></span><br><span class="line"><span class="code">			&lt;/div&gt;</span></span><br><span class="line"><span class="code">        &lt;/body&gt;		</span></span><br><span class="line"><span class="code">	* 注意：</span></span><br><span class="line"><span class="code">		* 1、2、3种方式，作用范围越来越大</span></span><br><span class="line"><span class="code">		* 1方式不常用，后期常用2、3</span></span><br><span class="line"><span class="code">		* 第3种格式可以写为：</span></span><br><span class="line"><span class="code">			&lt;style&gt;</span></span><br><span class="line"><span class="code">				@import &quot;css/a.css&quot;;</span></span><br><span class="line"><span class="code">			&lt;/style&gt;</span></span><br><span class="line"><span class="code">			</span></span><br><span class="line"><span class="code">4. css语法：</span></span><br><span class="line"><span class="code">	* 格式：</span></span><br><span class="line"><span class="code">		选择器 &#123;</span></span><br><span class="line"><span class="code">			属性名1:属性值1;</span></span><br><span class="line"><span class="code">			属性名2:属性值2;</span></span><br><span class="line"><span class="code">			...</span></span><br><span class="line"><span class="code">		&#125;</span></span><br><span class="line"><span class="code">	* 选择器：筛选具有相似特征的元素</span></span><br><span class="line"><span class="code">	* 注意：</span></span><br><span class="line"><span class="code">		* 每一对属性需要用分号隔开，最后一对属性可以不加</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">5.</span> 选择器：</span><br><span class="line"><span class="bullet">	*</span> 分类：</span><br><span class="line"><span class="bullet">		1.</span> 基础选择器</span><br><span class="line"><span class="bullet">			1.</span> id选择器：选择具体的id属性值的元素，建议在一个html界面中id值<span class="strong">**唯一**</span></span><br><span class="line"><span class="bullet">				*</span> 语法：#id属性值&#123;&#125;</span><br><span class="line"><span class="bullet">			2.</span> 元素选择器：选择具有相同标签的元素</span><br><span class="line"><span class="bullet">				*</span> 语法：标签名称&#123;&#125; </span><br><span class="line"><span class="bullet">				*</span> 注意：id选择器优先级高于元素选择器</span><br><span class="line"><span class="bullet">			3.</span> 类选择器：选择具有相同的class属性的元素</span><br><span class="line"><span class="bullet">				*</span> 语法：.class属性值&#123;&#125;</span><br><span class="line"><span class="bullet">				*</span> 注意：类选择器优先级高于元素选择器</span><br><span class="line"><span class="code">				id&gt;类&gt;元素</span></span><br><span class="line"><span class="code">		2. 扩展选择器：</span></span><br><span class="line"><span class="code">			1. 选择所有元素</span></span><br><span class="line"><span class="code">				* 语法： * &#123;&#125;</span></span><br><span class="line"><span class="code">			2. 并集选择器</span></span><br><span class="line"><span class="code">				* 语法：选择器1,选择器2 &#123;&#125;</span></span><br><span class="line"><span class="code">			3. 子选择器：筛选选择器1元素下的选择器2</span></span><br><span class="line"><span class="code">				* 语法：选择器1 选择器2 &#123;&#125;</span></span><br><span class="line"><span class="code">			4. 父选择器：筛选选择器2父元素选择器1</span></span><br><span class="line"><span class="code">				* 语法：选择器1 &gt; 选择器2 &#123;&#125;</span></span><br><span class="line"><span class="code">			5. 属性选择器：选择元素名称，属性名=属性值的元素</span></span><br><span class="line"><span class="code">				* 语法：元素名称[属性名=&quot;属性值&quot;] &#123;&#125; </span></span><br><span class="line"><span class="code">				一般用来选择input类型的  </span></span><br><span class="line"><span class="code">			6. 伪类选择器：选择一些元素具有的状态</span></span><br><span class="line"><span class="code">				* 语法：元素:状态 &#123;&#125;</span></span><br><span class="line"><span class="code">				* 如：&lt;a&gt;</span></span><br><span class="line"><span class="code">					* 状态：</span></span><br><span class="line"><span class="code">						* link：初始化的状态</span></span><br><span class="line"><span class="code">						* visited：被访问过的状态</span></span><br><span class="line"><span class="code">						* active：正在访问状态</span></span><br><span class="line"><span class="code">						* hover：鼠标悬浮状态</span></span><br><span class="line"><span class="code">						</span></span><br><span class="line"><span class="code">			</span></span><br><span class="line"><span class="code">6. 属性</span></span><br><span class="line"><span class="code">	1. 字体、文本</span></span><br><span class="line"><span class="code">		* font-size：字体大  小</span></span><br><span class="line"><span class="code">		* color：文本颜色</span></span><br><span class="line"><span class="code">		* text-alion：对齐方式</span></span><br><span class="line"><span class="code">		* line-height：行高</span></span><br><span class="line"><span class="code">	2. 背景</span></span><br><span class="line"><span class="code">		* background：复合属性</span></span><br><span class="line"><span class="code">	3. 边框</span></span><br><span class="line"><span class="code">		* border：设置边框，复合属性</span></span><br><span class="line"><span class="code">	4. 尺寸</span></span><br><span class="line"><span class="code">		* width：宽度</span></span><br><span class="line"><span class="code">		* height：高度</span></span><br><span class="line"><span class="code">	5. 盒子模型：控制布局,相对概念</span></span><br><span class="line"><span class="code">		* margin：外边距</span></span><br><span class="line"><span class="code">		* padding：内边距 </span></span><br><span class="line"><span class="code">			* 默认情况下内边距会影响整个盒子的大小</span></span><br><span class="line"><span class="code">			* box-sizing: border-box; 设置盒子的属性，让width和height就是最终盒子的大小</span></span><br><span class="line"><span class="code">		* float：浮动</span></span><br><span class="line"><span class="code">			* left</span></span><br><span class="line"><span class="code">			* right</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb02/image-20230727002143386.png"
                      alt="image-20230727002143386"
                ></p>
<h1 id="JavaScript部分"><a href="#JavaScript部分" class="headerlink" title="JavaScript部分"></a>JavaScript部分</h1><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 概念：一门客户端脚本语言</span><br><span class="line"><span class="bullet">	*</span> 运行在客户端浏览器中。每一个浏览器都有JavaScript的解析引擎</span><br><span class="line"><span class="bullet">	*</span> 脚本语言：不需要编译，直接就可以被浏览器解析执行了</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 功能：</span><br><span class="line"><span class="bullet">	*</span> 可以来增强用户和HTML页面的交互过程，可以来控制HTML元素，让页面有一些动态的效果，增强用户的体验。</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> JavaScript发展史：</span><br><span class="line"><span class="bullet">	1.</span> 1992年，Nombase公司，开发出第一门客户端脚本语言，专门用于表单的校验。命名为：C--，后来更名为：ScriptEase</span><br><span class="line"><span class="bullet">	2.</span> 1995年，Netscape(网景)公司，开发了一门客户端脚本语言：LiveScript。请来SUN公司的专家，修改LiveScript，命名为JavaScript</span><br><span class="line"><span class="bullet">	3.</span> 1996年，微软抄袭JavaScript开发出JScript语言</span><br><span class="line"><span class="bullet">	4.</span> 1997年，ECMA(欧洲计算机制造商协会)，ECMAScript，就是所有客户端脚本语言的标准。</span><br><span class="line"></span><br><span class="line"><span class="bullet">	*</span> JavaScript = ECMAScript + JavaScript自己特有的东西(BOM + DOM)</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> ECMAScript：客户端脚本语言的标准</span><br><span class="line"><span class="bullet">	1.</span> 基本语法：</span><br><span class="line"><span class="bullet">		1.</span> 与HTML结合方式</span><br><span class="line"><span class="bullet">			1.</span> 内部JS：</span><br><span class="line"><span class="bullet">				*</span> 定义&lt; script&gt;，标签体内容就是js代码</span><br><span class="line"><span class="code">				&lt;script&gt;</span></span><br><span class="line"><span class="code">				var a = 1;</span></span><br><span class="line"><span class="code">				alert(a);</span></span><br><span class="line"><span class="code">				&lt;/script&gt;</span></span><br><span class="line"><span class="code">				document.write(a) //可以直接输出在页面上</span></span><br><span class="line"><span class="code">			2. 外部JS：</span></span><br><span class="line"><span class="code">				* 定义&lt; script&gt;，通过src属性引入外部的js文件吧</span></span><br><span class="line"><span class="code">			* 注意：</span></span><br><span class="line"><span class="code">				1. &lt; script&gt;可以定义在html页面的任何地方，但是定义的位置会影响执行的顺序。</span></span><br><span class="line"><span class="code">				2. &lt; script&gt;可以定义多个。</span></span><br><span class="line"><span class="code">		2. 注释</span></span><br><span class="line"><span class="code">			1. 单行注释：// 注释内容  </span></span><br><span class="line"><span class="code">			2. 多行注释：/* 注释内容 */</span></span><br><span class="line"><span class="code">		3. 数据类型：</span></span><br><span class="line"><span class="code">			1. 原始数据类型(基本数据类型)：</span></span><br><span class="line"><span class="code">				1. number：数字。 整数/小数/NaN(not a number ( 一个不是数字的数字类型)</span></span><br><span class="line"><span class="code">				2. string：字符串。 字符串 &#x27;abc&#x27; &quot;a&quot;</span></span><br><span class="line"><span class="code">				3. boolean：true和false</span></span><br><span class="line"><span class="code">				4. null：一个对象为空的占位符</span></span><br><span class="line"><span class="code">				5. undefined：未定义。如果一个变量没有给初始化值，则会被默认为undefined</span></span><br><span class="line"><span class="code">			2. 引用数据类型：对象</span></span><br><span class="line"><span class="code">		4. 变量</span></span><br><span class="line"><span class="code">			* 变量：一小块存储数据的内存空间</span></span><br><span class="line"><span class="code">			* Java语言是强类型语言，而JavaScript是弱类型语言</span></span><br><span class="line"><span class="code">				* 强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据。</span></span><br><span class="line"><span class="code">				* 弱类型：在开辟变量存储空间时，不定义空间将来存储的数据的数据类型。可以存储任意类型的数据。</span></span><br><span class="line"><span class="code">			* 语法：</span></span><br><span class="line"><span class="code">				* var 变量名 = 初始化值;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">			*</span> typeof运算符：获取变量的类型</span><br><span class="line"><span class="bullet">				*</span> 注：null运算符后得到的时object,被认为占位符</span><br><span class="line"><span class="bullet">		5.</span> 运算符</span><br><span class="line"><span class="bullet">			1.</span> 一元运算符：只有一个运算数的运算符</span><br><span class="line"><span class="code">				++ -- </span></span><br><span class="line"><span class="code">				+(正号) -(负号 )</span></span><br><span class="line"><span class="code">				* 注意</span></span><br><span class="line"><span class="code">				在JS中，如果运算数不是运算符所要求的类型，那么js引警会自动的将运算数进行类型转换</span></span><br><span class="line"><span class="code">				# 其他类型转number:#         </span></span><br><span class="line"><span class="code">				1.string转number: 按照字面值转换。如果字面值不是数字，则转为NaN(不是数字的数字)</span></span><br><span class="line"><span class="code">				2. boolean转number: true转为1，false转为0</span></span><br><span class="line"><span class="code">				3.NaN</span></span><br><span class="line"><span class="code">				4.NaN</span></span><br><span class="line"><span class="code">			2. 算数运算符</span></span><br><span class="line"><span class="code">				+ - * / % </span></span><br><span class="line"><span class="code">			3. 赋值运算符</span></span><br><span class="line"><span class="code">				= += -= ...</span></span><br><span class="line"><span class="code">			4. 比较运算符</span></span><br><span class="line"><span class="code">				&gt; &lt; &gt;= &lt;= == ===(全等于)</span></span><br><span class="line"><span class="code">				* 比较方式</span></span><br><span class="line"><span class="code">					1. 类型相同，直接比较</span></span><br><span class="line"><span class="code">						* 字符串，按照字典顺序比较，按位逐一比较，直到得出大小为止。</span></span><br><span class="line"><span class="code">					2. 类型不同，先进行类型转换，再比较</span></span><br><span class="line"><span class="code">						* ===，全等于，在比较前先判断类型，如果类型不一样，则直接返回false</span></span><br><span class="line"><span class="code">			5. 逻辑运算符</span></span><br><span class="line"><span class="code">				&amp;&amp; || !</span></span><br><span class="line"><span class="code">				* 其他类型转boolean</span></span><br><span class="line"><span class="code">					1. number：0或NaN为假，其他为真</span></span><br><span class="line"><span class="code">					2. string：除了空字符串(&quot;&quot;)，其他都是true</span></span><br><span class="line"><span class="code">					3. null&amp;undefined：false</span></span><br><span class="line"><span class="code">					4. 对象：所有对象都为true</span></span><br><span class="line"><span class="code">				* # 可用if(obj)判断#</span></span><br><span class="line"><span class="code">					1. obj为空字符串</span></span><br><span class="line"><span class="code">					2. obj为null或者undefined</span></span><br><span class="line"><span class="code">			6. 三元运算符</span></span><br><span class="line"><span class="code">				? :</span></span><br><span class="line"><span class="code">		6. 流程控制语句：</span></span><br><span class="line"><span class="code">			1. if...else...</span></span><br><span class="line"><span class="code">			2. swtich</span></span><br><span class="line"><span class="code">				* 在java种，switch语句可以接受的数据类型： byte int short char enum(1.5) String(1.7)</span></span><br><span class="line"><span class="code">				* # 在JS种，swtich语句可以接受任意的原始数据类型#</span></span><br><span class="line"><span class="code">			3. while</span></span><br><span class="line"><span class="code">			4. do...while</span></span><br><span class="line"><span class="code">			5. for</span></span><br><span class="line"><span class="code">		7. JS特殊语法：</span></span><br><span class="line"><span class="code">			1. 语句以;结尾，如果一行只有一条语句，则可以省略</span></span><br><span class="line"><span class="code">			2. 变量的定义使用var关键字，也可以不使用</span></span><br><span class="line"><span class="code">				* 用，定义的变量是局部变量</span></span><br><span class="line"><span class="code">				* 不用，定义的变量是全局变量</span></span><br><span class="line"><span class="code">	2. 基本对象：</span></span><br><span class="line"><span class="code">		* Function：函数对象</span></span><br><span class="line"><span class="code">			1. 创建</span></span><br><span class="line"><span class="code">				1. var 方法名 = new Function(形式参数列表, 方法体);</span></span><br><span class="line"><span class="code">				2. function 方法名(形式参数列表) &#123;方法体&#125;</span></span><br><span class="line"><span class="code">				3. var 方法名 = function(形式参数列表) &#123;方法体&#125;</span></span><br><span class="line"><span class="code">			2. 方法</span></span><br><span class="line"><span class="code">			3. 属性</span></span><br><span class="line"><span class="code">				length:代表形参的个数</span></span><br><span class="line"><span class="code">			4. 特点</span></span><br><span class="line"><span class="code">				1. 方法定义是，形参的类型不用写，返回值类型也不写</span></span><br><span class="line"><span class="code">				2. # 方法是一个对象，如果定义名称相同的方法，会覆盖#</span></span><br><span class="line"><span class="code">				3. 在JS中，方法的调用只与方法的名称有关，和参数列表无关</span></span><br><span class="line"><span class="code">				4. 在方法声明中有一个隐藏的内置对象(数组)，arguments，封装所有的实际参数</span></span><br><span class="line"><span class="code">			5. 调用</span></span><br><span class="line"><span class="code">				方法名称(实际参数列表);</span></span><br><span class="line"><span class="code">				</span></span><br><span class="line"><span class="code">		* Array：数组对象</span></span><br><span class="line"><span class="code">			1. 创建：</span></span><br><span class="line"><span class="code">				1. var arr = new Array(元素列表);</span></span><br><span class="line"><span class="code">				2. var arr = new Array(默认长度);//只输入一个数字</span></span><br><span class="line"><span class="code">				3. var arr = [元素列表];</span></span><br><span class="line"><span class="code">			2. 方法</span></span><br><span class="line"><span class="code">				join(参数)：将数组中的元素按照指定的分隔符拼接为字符串</span></span><br><span class="line"><span class="code">				push(参数)：往数组最后添加一个元素</span></span><br><span class="line"><span class="code">			3. 属性</span></span><br><span class="line"><span class="code">				length：数组长度</span></span><br><span class="line"><span class="code">			4. 特点</span></span><br><span class="line"><span class="code">				1. JS中，数组元素的类型可变的。</span></span><br><span class="line"><span class="code">				2. JS中，数组的长度是可变的。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">		*</span> Boolean</span><br><span class="line"><span class="bullet">		*</span> Date：日期对象</span><br><span class="line"><span class="bullet">			1.</span> 创建</span><br><span class="line"><span class="code">				var date  = new Date();</span></span><br><span class="line"><span class="code">			2. 方法</span></span><br><span class="line"><span class="code">				toLocaleString()：返回当前Date对象对应的实际本地字符串格式,返回本地时间，与当前操作系统相符 </span></span><br><span class="line"><span class="code">				getTime():获取毫秒值，返回当前日期对象描述的时间和1970年1月1日零点的毫秒值差</span></span><br><span class="line"><span class="code">				//一般作为时间戳</span></span><br><span class="line"><span class="code">		* Math：数学对象</span></span><br><span class="line"><span class="code">			1. 创建：</span></span><br><span class="line"><span class="code">				* 特点：Math对象不用创建直接使用。	Math.方法名();</span></span><br><span class="line"><span class="code">			2. 方法：</span></span><br><span class="line"><span class="code">				random()：返回0~1之间的随机数。包含0不包含1 --&gt;伪随机数</span></span><br><span class="line"><span class="code">				cell(x)：向上取整</span></span><br><span class="line"><span class="code">				floor(x)：向下取整</span></span><br><span class="line"><span class="code">				round(x)：四舍五入</span></span><br><span class="line"><span class="code">			3. 属性</span></span><br><span class="line"><span class="code">				PI 圆周率</span></span><br><span class="line"><span class="code">		* NUmber</span></span><br><span class="line"><span class="code">		* String</span></span><br><span class="line"><span class="code">		</span></span><br></pre></td></tr></table></figure></div>

<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> RegExp：正则表达式对象</span><br><span class="line"><span class="bullet">		  1.</span> 正则表达式：定义字符串的组成规则。</span><br><span class="line"><span class="bullet">				1.</span> 单个字符:[]</span><br><span class="line"><span class="code">					如：[a] [ab](a或者b) [a- zA-Z0-9 _ ]</span></span><br><span class="line"><span class="code">					* 特殊符合代表特殊含义的单个字符*</span></span><br><span class="line"><span class="code">						\d:单个数字字符[0-9]</span></span><br><span class="line"><span class="code">						\w:单个单词字符[a-zA-Z0-9_]  </span></span><br><span class="line"><span class="code">				2. 量词符号：</span></span><br><span class="line"><span class="code">					?:表示出现0次或1次</span></span><br><span class="line"><span class="code">					*:表示出现0次或多次</span></span><br><span class="line"><span class="code">					+:出现一次或多次</span></span><br><span class="line"><span class="code">					&#123;m,n&#125;:表示数量 m&lt;=数量&lt;=n</span></span><br><span class="line"><span class="code">						* m如果缺少或省略：&#123;,n&#125;:最多n次</span></span><br><span class="line"><span class="code">						* n如果缺少或省略：&#123;m,&#125;:最少m次</span></span><br><span class="line"><span class="code">				3. 开始结束符号</span></span><br><span class="line"><span class="code">					* ^：开始</span></span><br><span class="line"><span class="code">					* $：结束</span></span><br><span class="line"><span class="code">			2. 正则对象：</span></span><br><span class="line"><span class="code">				1. 创建：</span></span><br><span class="line"><span class="code">					1. var reg = new RegExp(&quot;正则表达式&quot;); 注意反斜线的转义\\</span></span><br><span class="line"><span class="code">					2. var reg = /正则表达式/;</span></span><br><span class="line"><span class="code">				2. 方法</span></span><br><span class="line"><span class="code">					1. test(参数)：验证指定的字符串是否符合正则表达式</span></span><br><span class="line"><span class="code">		* Global</span></span><br><span class="line"><span class="code">			1. 特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。	方法名();</span></span><br><span class="line"><span class="code">			2. 方法：  </span></span><br><span class="line"><span class="code">				encodeURI():url编码</span></span><br><span class="line"><span class="code">				decodeURI():url解码</span></span><br><span class="line"><span class="code">				</span></span><br><span class="line"><span class="code">				encodeURIComponent():url编码，编码的字符更多</span></span><br><span class="line"><span class="code">				decodeURIComponent():url解码</span></span><br><span class="line"><span class="code">				</span></span><br><span class="line"><span class="code">				parseInt():将字符串转为数字</span></span><br><span class="line"><span class="code">					* 逐一判断每一个字符是否是数字，直到不是数字为止，将前面数字的部分转为number</span></span><br><span class="line"><span class="code">					* 没有数字转 为NaN</span></span><br><span class="line"><span class="code">				isNaN():判断一个值是否为NaN</span></span><br><span class="line"><span class="code">					* 参与的==比较都为false 包括其自身参与的比较</span></span><br><span class="line"><span class="code">				eval():将JS字符串转换为脚本运行</span></span><br><span class="line"><span class="code">			3. URL编码</span></span><br><span class="line"><span class="code">				* GBK编码：一个汉字两个字节</span></span><br><span class="line"><span class="code">				* UTF-8编码：一个汉字三个字节</span></span><br></pre></td></tr></table></figure></div>

<h2 id="DOM演示"><a href="#DOM演示" class="headerlink" title="DOM演示"></a>DOM演示</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 功能：控制HTML文档的内容</span><br><span class="line"><span class="bullet">*</span> 代码：获取页面标签(元素)对象	Element</span><br><span class="line"><span class="bullet">	*</span> document.getElementById(&quot;id值&quot;);	通过元素id获取元素对象</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 操作Element对象：</span><br><span class="line"><span class="bullet">	1.</span> 修改属性值：</span><br><span class="line"><span class="bullet">		1.</span> 明确获取的对象是哪一个</span><br><span class="line"><span class="bullet">		2.</span> 查看API文档，找其中有哪些属性可以设置</span><br><span class="line"><span class="bullet">	2.</span> 修改标签体内容：</span><br><span class="line"><span class="bullet">		*</span> 属性：innerHTML b  </span><br></pre></td></tr></table></figure></div>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">*</span> 功能：某些组件被执行了某些操作后，触发某些代码的执行。</span><br><span class="line"><span class="bullet">*</span> 如何绑定事件</span><br><span class="line"><span class="bullet">	1.</span> 直接在HTML标签上，指定事件的属性，属性值就是JS代码</span><br><span class="line"><span class="bullet">		1.</span> 事件：onclick---  单击事件</span><br><span class="line"></span><br><span class="line"><span class="bullet">	2.</span> 通过JS获取元素对象，指定事件属性，设置一个函数</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb02/image-20230728114657511.png"
                      alt="image-20230728114657511"
                ></p>
<h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念：Browser Object Model 浏览器对象模型</span><br><span class="line"><span class="bullet">	*</span> 将浏览器的各个部分封装成对象。</span><br><span class="line"><span class="bullet">2.</span> 组成</span><br><span class="line"><span class="bullet">	*</span> Window：窗口对象</span><br><span class="line"><span class="bullet">	*</span> Navigator：浏览器对象</span><br><span class="line"><span class="bullet">	*</span> Screen：显示器屏幕对象</span><br><span class="line"><span class="bullet">	*</span> History：历史记录对象</span><br><span class="line"><span class="bullet">	*</span> Location：地址栏对象</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> Window：窗口对象</span><br><span class="line"><span class="bullet">	1.</span> 创建</span><br><span class="line"><span class="bullet">	2.</span> 方法</span><br><span class="line"><span class="bullet">		1.</span> 与弹出框有关的方法</span><br><span class="line"><span class="code">			alert()	弹出警告框</span></span><br><span class="line"><span class="code">			confirm()	弹出对话框(确认或者取消)</span></span><br><span class="line"><span class="code">				* 如果点击确定 返回true</span></span><br><span class="line"><span class="code">				* 点击取消 返回false</span></span><br><span class="line"><span class="code">			prompt()	弹出可输入的对话框</span></span><br><span class="line"><span class="code">				* 返回值，获取用画输入的内容</span></span><br><span class="line"><span class="code">		2. 与打开关闭有关的方法</span></span><br><span class="line"><span class="code">			close() 关闭浏览器窗口</span></span><br><span class="line"><span class="code">				* 谁调用关谁</span></span><br><span class="line"><span class="code">			open() 打开一个浏览器窗口</span></span><br><span class="line"><span class="code">				* 返回新的Window对象</span></span><br><span class="line"><span class="code">                &lt;body&gt;</span></span><br><span class="line"><span class="code">                &lt;input id=&quot;open1&quot; type=&quot;button&quot; value=&quot;打开新窗口&quot;&gt;</span></span><br><span class="line"><span class="code">                &lt;input id=&quot;close1&quot; type=&quot;button&quot; value=&quot;关闭新窗口&quot;&gt;</span></span><br><span class="line"><span class="code">                &lt;script&gt;</span></span><br><span class="line"><span class="code">                    var lihuibear;</span></span><br><span class="line"><span class="code">                    var open1 = document.getElementById(&quot;open1&quot;);</span></span><br><span class="line"><span class="code">                    open1.onclick = function () &#123;</span></span><br><span class="line"><span class="code">                        lihuibear = open(&quot;http://myblog.lihuibear.asia&quot;);</span></span><br><span class="line"><span class="code">                    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">                    var close = document.getElementById(&quot;close1&quot;);</span></span><br><span class="line"><span class="code">                    close.onclick = function () &#123;</span></span><br><span class="line"><span class="code">                        lihuibear.close();</span></span><br><span class="line"><span class="code">                    &#125;</span></span><br><span class="line"><span class="code">                &lt;/script&gt;</span></span><br><span class="line"><span class="code">                &lt;/body&gt;	</span></span><br><span class="line"><span class="code">				</span></span><br><span class="line"><span class="code">		3. 与定时器有关的方法</span></span><br><span class="line"><span class="code">			setTimeout()	在指定的毫秒数后调用函数或计算表达式。</span></span><br><span class="line"><span class="code">				* 参数：</span></span><br><span class="line"><span class="code">					1. js代码或者方法对象</span></span><br><span class="line"><span class="code">					2. 毫秒值</span></span><br><span class="line"><span class="code">				* 返回值：唯一标识，用于取消定时器</span></span><br><span class="line"><span class="code">			clearTimeout()	取消由setTimeout()方法设置的timeout。</span></span><br><span class="line"><span class="code">			</span></span><br><span class="line"><span class="code">			setInterval()	按照指定的周期（以毫秒计）来调用函数或计算表达式。</span></span><br><span class="line"><span class="code">			clearInterval()	取消由setInterval()设置的timeout。</span></span><br><span class="line"><span class="code">	3. 属性</span></span><br><span class="line"><span class="code">		1. 获取其他BOM对象</span></span><br><span class="line"><span class="code">			history</span></span><br><span class="line"><span class="code">			location</span></span><br><span class="line"><span class="code">			Navigator</span></span><br><span class="line"><span class="code">			Screen</span></span><br><span class="line"><span class="code">		2. 获取DOM对象</span></span><br><span class="line"><span class="code">			document</span></span><br><span class="line"><span class="code">	4. 特点</span></span><br><span class="line"><span class="code">		* Window对象不需要创建可以直接使用 window来使用 window.方法名();</span></span><br><span class="line"><span class="code">		* window引用可以省略。	方法名();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4.</span> Location：地址栏对象</span><br><span class="line"><span class="bullet">	1.</span> 创建(获取)：</span><br><span class="line"><span class="bullet">		1.</span> window.location</span><br><span class="line"><span class="bullet">		2.</span> location</span><br><span class="line"><span class="bullet">	2.</span> 方法</span><br><span class="line"><span class="bullet">		*</span> reload() 重新加载当前文档 刷新</span><br><span class="line"><span class="bullet">	3.</span> 属性</span><br><span class="line"><span class="bullet">		*</span> href 设置或返回完整的URL</span><br><span class="line"><span class="code">         &lt;head&gt;</span></span><br><span class="line"><span class="code">            &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="code">            &lt;title&gt;自动跳转&lt;/title&gt;</span></span><br><span class="line"><span class="code">            &lt;style&gt;</span></span><br><span class="line"><span class="code">                p &#123;</span></span><br><span class="line"><span class="code">                    text-align: center;</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">                span &#123;</span></span><br><span class="line"><span class="code">                    color: red;</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            &lt;/style&gt;</span></span><br><span class="line"><span class="code">        &lt;/head&gt;</span></span><br><span class="line"><span class="code">        &lt;body&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;p&gt;&lt;span id=&quot;time&quot;&gt;5&lt;/span&gt;秒后，自动跳转到首页&lt;/p&gt;</span></span><br><span class="line"><span class="code">        &lt;script&gt;</span></span><br><span class="line"><span class="code">            var second = 5;</span></span><br><span class="line"><span class="code">            var time = document.getElementById(&quot;time&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            function showtime() &#123;</span></span><br><span class="line"><span class="code">                second--;</span></span><br><span class="line"><span class="code">                if (second &lt;= 0) &#123;</span></span><br><span class="line"><span class="code">                    location.href = &quot;https://www.baidu.com&quot;</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code">                time.innerHTML = second + &quot;&quot;;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            setInterval(showtime, 1000);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;/script&gt;</span></span><br><span class="line"><span class="code">        &lt;/body&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">5.</span> History：历史记录对象</span><br><span class="line"><span class="bullet">	1.</span> 创建(获取):</span><br><span class="line"><span class="bullet">		1.</span> window.history</span><br><span class="line"><span class="bullet">		2.</span> history</span><br><span class="line"></span><br><span class="line"><span class="bullet">	2.</span> 方法：</span><br><span class="line"><span class="bullet">		*</span> back()	加载history列表中的前一个 URL。</span><br><span class="line"><span class="bullet">		*</span> forward()	加载history列表中的下一个 URL。</span><br><span class="line"><span class="bullet">		*</span> go(参数)	加载history列表中的某个具体页面。</span><br><span class="line"><span class="bullet">			*</span> 参数</span><br><span class="line"><span class="bullet">				*</span> 正数：前进几个历史记录</span><br><span class="line"><span class="bullet">				*</span> 负数：后退几个历史记录</span><br><span class="line"></span><br><span class="line"><span class="bullet">	3.</span> 属性</span><br><span class="line"><span class="bullet">		*</span> length	返回浏览器历史列表中的 URL 数量。</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb02/image-20230728221840214.png"
                      alt="image-20230728221840214"
                ></p>
<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 概念：Document Object Model 文档对象模型</span><br><span class="line"><span class="bullet">	*</span> 将标记语言文档的各个部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作</span><br><span class="line"><span class="bullet">*</span> W3C DOM 标准被分为3个不同的部分：</span><br><span class="line"><span class="bullet">	*</span> # 核心DOM - 针对任何结构化文档的标准模型</span><br><span class="line"><span class="bullet">		*</span> Document：文档对象</span><br><span class="line"><span class="bullet">		*</span> Element：元素对象</span><br><span class="line"><span class="bullet">		*</span> Attribute：属性对象</span><br><span class="line"><span class="bullet">		*</span> Text：文本对象</span><br><span class="line"><span class="bullet">		*</span> Comment：注释对象</span><br><span class="line"><span class="bullet">		*</span> Node：节点对象，其他5个的父对象</span><br><span class="line"><span class="bullet">	*</span> # XML DOM - 针对XML文档的标准模型</span><br><span class="line"><span class="bullet">	*</span> # HTML DOM - 针对HTML文档的标准模型 </span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 核心DOM模型：</span><br><span class="line"><span class="bullet">	*</span> Document：文档对象</span><br><span class="line"><span class="bullet">		1.</span> 创建(获取)，在html dom模型中可以使用window对象来获取</span><br><span class="line"><span class="bullet">			1.</span> window.document</span><br><span class="line"><span class="bullet">			2.</span> document</span><br><span class="line"><span class="bullet">		2.</span> 方法</span><br><span class="line"><span class="bullet">			1.</span> 获取Element对象：</span><br><span class="line"><span class="bullet">				1.</span> getElementById()：根据id属性值获取元素对象，id属性值一般唯一</span><br><span class="line"><span class="bullet">				2.</span> getElementByTagName()：根据元素名称获取元素对象们，返回值是一个数组</span><br><span class="line"><span class="bullet">				3.</span> getElementByClassName()：根据Class属性值获取元素对象们，返回值是一个数组</span><br><span class="line"><span class="bullet">				4.</span> getElementByName()：根据name属性值获取元素对象们，返回值是一个数组</span><br><span class="line"><span class="bullet">			2.</span> 创建其他DOM对象</span><br><span class="line"><span class="code">				createAttribute(name)</span></span><br><span class="line"><span class="code">				createComment()</span></span><br><span class="line"><span class="code">				createElement()</span></span><br><span class="line"><span class="code">				createTextNode()</span></span><br><span class="line"><span class="code">	* Element：元素对象</span></span><br><span class="line"><span class="code">		1. 创建(获取)，通过document来获取和创建</span></span><br><span class="line"><span class="code">		2. 方法：</span></span><br><span class="line"><span class="code">			1. removeAttribute()：删除属性</span></span><br><span class="line"><span class="code">			2. setAttribute()：设置属性</span></span><br><span class="line"><span class="code">	* Node：节点对象，其他5个的父对象</span></span><br><span class="line"><span class="code">		* 特点：所有dom对象都可以被认为是一个节点</span></span><br><span class="line"><span class="code">		* 方法：</span></span><br><span class="line"><span class="code">			* CRUD dom树</span></span><br><span class="line"><span class="code">				* appendChild()：向节点的子节点列表的结尾添加新的子节点。</span></span><br><span class="line"><span class="code">				* removeChild()：删除（并返回）当前节点的指定子节点。</span></span><br><span class="line"><span class="code">				* replaceChild()：用新节点替换一个子节点。</span></span><br><span class="line"><span class="code">		* 属性</span></span><br><span class="line"><span class="code">			* parentNode：返回节点的父节点。</span></span><br><span class="line"><span class="code">			</span></span><br><span class="line"><span class="code">* HTML DOM</span></span><br><span class="line"><span class="code">	1. 标签体的设置和获取：innerHTML</span></span><br><span class="line"><span class="code">	2. 使用html元素对象和属性</span></span><br><span class="line"><span class="code">	3. 控制样式</span></span><br><span class="line"><span class="code">		1. 使用元素的style属性来设置 </span></span><br><span class="line"><span class="code">			如： div.style.fontSize = &quot;20px&quot;;</span></span><br><span class="line"><span class="code">		2. 提前定义好类选择器的样式，通过元素的className属性来设置其class属性值</span></span><br><span class="line"><span class="code">			 div2.className = &quot;d1&quot;;</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure></div>

<h3 id="小例1"><a href="#小例1" class="headerlink" title="小例1"></a>小例1</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;dom_node_remove&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        div &#123;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">        &#125;</span><br><span class="line">        #div1 &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">        #div2 &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">        #div3 &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;div1&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;div2&quot;&gt;</span><br><span class="line">        我是子节点1</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    我是主干</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!--超链接解决可以被点击，执行功能1，但是不执行功能2 不重新到该页面方法--&gt;</span><br><span class="line">&lt;!--javascrip:void(0)--&gt;</span><br><span class="line">&lt;!--&lt;a href=&quot;javascrip:void(0)&quot; id=&quot;del1&quot;&gt;删除子节点&lt;/a&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;删除子节点&quot; id=&quot;del1&quot;&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;添加子节点&quot; id=&quot;add1&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var element1 = document.getElementById(&quot;del1&quot;);</span><br><span class="line">    element1.onclick = function () &#123;</span><br><span class="line">        var div11 = document.getElementById(&quot;div1&quot;);</span><br><span class="line">        var div22 = document.getElementById(&quot;div2&quot;);</span><br><span class="line">        div11.removeChild(div22);</span><br><span class="line">    &#125;</span><br><span class="line">    var element2 = document.getElementById(&quot;add1&quot;);</span><br><span class="line">    element2.onclick = function () &#123;</span><br><span class="line">        var div11 = document.getElementById(&quot;div1&quot;)</span><br><span class="line">        var div33 = document.createElement(&quot;div&quot;);</span><br><span class="line">        div33.setAttribute(&quot;id&quot;, &quot;div3&quot;);</span><br><span class="line">        div11.appendChild(div33);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="小例2：动态学生信息表"><a href="#小例2：动态学生信息表" class="headerlink" title="小例2：动态学生信息表"></a>小例2：动态学生信息表</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>动态学生信息表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入编号&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入性别&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn_add&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学生信息表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>令狐冲<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;delTr(this);&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>爱咋咋<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;delTr(this);&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>傻网页<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;delTr(this);&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*添加*/</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn_add&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> id = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> name = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> gender = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;gender&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> td_id = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text_id = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(id);</span></span><br><span class="line"><span class="language-javascript">        td_id.<span class="title function_">appendChild</span>(text_id);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> td_name = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text_name = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(name);</span></span><br><span class="line"><span class="language-javascript">        td_name.<span class="title function_">appendChild</span>(text_name);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> td_gender = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text_gender = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(gender);</span></span><br><span class="line"><span class="language-javascript">        td_gender.<span class="title function_">appendChild</span>(text_gender);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> td_a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ele_a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        ele_a.<span class="title function_">setAttribute</span>(<span class="string">&quot;href&quot;</span>, <span class="string">&quot;javascript:void(0);&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        ele_a.<span class="title function_">setAttribute</span>(<span class="string">&quot;onclick&quot;</span>, <span class="string">&quot;delTr(this);&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text_a = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;删除&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        ele_a.<span class="title function_">appendChild</span>(text_a);</span></span><br><span class="line"><span class="language-javascript">        td_a.<span class="title function_">appendChild</span>(ele_a);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> tr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;tr&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        tr.<span class="title function_">appendChild</span>(td_id);</span></span><br><span class="line"><span class="language-javascript">        tr.<span class="title function_">appendChild</span>(td_name);</span></span><br><span class="line"><span class="language-javascript">        tr.<span class="title function_">appendChild</span>(td_gender);</span></span><br><span class="line"><span class="language-javascript">        tr.<span class="title function_">appendChild</span>(td_a);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> table = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;table&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        table.<span class="title function_">appendChild</span>(tr);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*删除*/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">delTr</span>(<span class="params">obj</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> table = obj.<span class="property">parentNode</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> tr = obj.<span class="property">parentNode</span>.<span class="property">parentNode</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        table.<span class="title function_">removeChild</span>(tr);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="小例3-动态表格优化-innerHTML"><a href="#小例3-动态表格优化-innerHTML" class="headerlink" title="小例3:动态表格优化(innerHTML)"></a>小例3:动态表格优化(innerHTML)</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>动态表格优化<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入编号&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入性别&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn_add&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学生信息表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn_add&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> id = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> name = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> gender = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;gender&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> table = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;table&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        table.<span class="property">innerHTML</span> += <span class="string">&quot; &lt;tr&gt;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;        &lt;td&gt;&quot;</span> + id + <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;        &lt;td&gt;&quot;</span> + name + <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;        &lt;td&gt;&quot;</span> + gender + <span class="string">&quot;&lt;/td&gt;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;        &lt;td&gt;&lt;a href=\&quot;javascript:void(0);\&quot; onclick=\&quot;delTr(this);\&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;    &lt;/tr&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">delTr</span>(<span class="params">obj</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> table = obj.<span class="property">parentNode</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> tr = obj.<span class="property">parentNode</span>.<span class="property">parentNode</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        table.<span class="title function_">removeChild</span>(tr);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 概念:某些组件被执行了某些操作后，触发某些代码的执行。</span><br><span class="line"><span class="bullet">	*</span> 事件: 某些操作。如 : 单击，双击，键盘按下了，鼠标移动了</span><br><span class="line"><span class="bullet">	*</span> 事件源:组件。如 : 按钮 文本输入框...</span><br><span class="line"><span class="bullet">    *</span> 监听器:代码。不</span><br><span class="line"><span class="bullet">    *</span> 注册监听: 将事件，事件源，监听器结合在一起。 当事件源上发生了某个事件，则触发执行某个监听器代码。 </span><br><span class="line"><span class="bullet">*</span> 常见的事件:</span><br><span class="line"><span class="code">	1.点击事件 :</span></span><br><span class="line"><span class="code">		onclick:单击事件</span></span><br><span class="line"><span class="code">		ondblclick:双击事件</span></span><br><span class="line"><span class="code">	2.焦点事件</span></span><br><span class="line"><span class="code">		onblur:失去焦点</span></span><br><span class="line"><span class="code">			* 一般用于表单校验</span></span><br><span class="line"><span class="code">        onfocus:元素获得焦点 </span></span><br><span class="line"><span class="code">    3.加载事件</span></span><br><span class="line"><span class="code">    	onload:一张页面或一幅图像完成加载。</span></span><br><span class="line"><span class="code">    		一般用于&lt;body&gt;</span></span><br><span class="line"><span class="code">			* window.onload  = function()&#123;</span></span><br><span class="line"><span class="code">			</span></span><br><span class="line"><span class="code">			&#125;</span></span><br><span class="line"><span class="code">    4.鼠标事件</span></span><br><span class="line"><span class="code">    	onmousedown 鼠标按钮被按下。</span></span><br><span class="line"><span class="code">			*定义方法时，定义一个形参，接受event对象</span></span><br><span class="line"><span class="code">			*event对象的button属性可以获取鼠标按钮键</span></span><br><span class="line"><span class="code">		onmouseup 	鼠标按键被松开。</span></span><br><span class="line"><span class="code">		onmousemove 鼠标被移动。</span></span><br><span class="line"><span class="code">		onmouseover 鼠标移到某元素之上</span></span><br><span class="line"><span class="code">		onmouseout  鼠标从某元素移开。</span></span><br><span class="line"><span class="code">	5.键盘事件</span></span><br><span class="line"><span class="code">		onkeydown	某个键盘按键被按下  </span></span><br><span class="line"><span class="code">		onkeyup 	某个键盘按键被松开。</span></span><br><span class="line"><span class="code">		onkeypress  某个键盘按键被按下并松开</span></span><br><span class="line"><span class="code">	6.选择改变</span></span><br><span class="line"><span class="code">    	onchange	域的内容被改变</span></span><br><span class="line"><span class="code">    	onselect 	文本被选中</span></span><br><span class="line"><span class="code">    7.表单事件</span></span><br><span class="line"><span class="code">    	onsubmit	确认按钮被点击</span></span><br><span class="line"><span class="code">    		*可以阻止表单的提交</span></span><br><span class="line"><span class="code">    			* onsubmit方法返回false;</span></span><br><span class="line"><span class="code">    			* return checkForm();</span></span><br><span class="line"><span class="code">    	onreset		重置按钮被点击</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb02/image-20230801221619083.png"
                      alt="绑定鼠标单击事件"
                ></p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb02/image-20230801221934130.png"
                      alt="键盘点击使用"
                ></p>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
        <category>JAVAWeb</category>
      </categories>
      <tags>
        <tag>项目组</tag>
        <tag>黑马程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVAWeb04</title>
    <url>/2023/08/02/JAVAWeb04/</url>
    <content><![CDATA[<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>Extensible Markup Language 可扩展标记语言</p>
<ol>
<li>可扩展：标签都是自定义的。	如&lt; user &gt; &lt; student &gt;  </li>
<li>功能：<ul>
<li>存储数据<ol>
<li>配置文件</li>
<li>在网络中传输</li>
</ol>
</li>
</ul>
</li>
<li>xml和html的区别：<ol>
<li>xml标签都是自定义的，html的标签是预定义。</li>
<li>xml的语法严格，html语法松散。</li>
<li>xml是存储数据，html是展示数据的。</li>
</ol>
</li>
<li>w3c：万维网联盟</li>
</ol>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul>
<li>基本语法：<br> 1. xml后缀名 .xml<br> 2. xml第一行必须定义为文档声明<br> 3. xml文档中有且仅有一个根标签<br> 4. 属性值必须使用引号引起来(单双都可)<br> 5. 标签必须正确关闭<br> 6. xml标签名称区分大小写</li>
</ul>
<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ul>
<li><p>快速入门</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml versionm=&#x27;1.0&#x27;?&gt;</span><span class="comment">&lt;!--文档声明必须在第一行--&gt;</span></span><br><span class="line">&lt; users&gt;              <span class="comment">&lt;!--//有且仅有一个根标签--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&#x27;1&#x27;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">gender</span>&gt;</span>male<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">	<span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&#x27;2&#x27;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>lisi<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">age</span>&gt;</span>22<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">gender</span>&gt;</span>female<span class="tag">&lt;/<span class="name">gender</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><ul>
<li><p>组成部分：</p>
<ol>
<li>文档声明<ol>
<li>格式：<code>&lt;?xml 属性列表 ?&gt;</code></li>
<li>属性列表<ul>
<li>version：版本号，必须的属性</li>
<li>encoding：编码方式，告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1<br>encoding &#x3D; “gbk”,告知什么字符集就必须用什么字符集编码</li>
<li>standalone：是否独立<ul>
<li>取值：<ul>
<li>yes：不依赖其他文件 </li>
<li>no：依赖其他文件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li>指令(了解)：结合css<ul>
<li><code>&lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;a.css&quot; ?&gt;</code></li>
</ul>
</li>
<li>标签：标签名称是自定义的<ul>
<li>规则<ol>
<li>名称可以包含字母、数字以及其他的字符 			</li>
<li>名称<strong>不能</strong>以数字或者标点符号开始 			</li>
<li>名称<strong>不能</strong>以字母xml或者(XML、Xml等等)开始 </li>
<li>名称<strong>不能</strong>包含空格</li>
</ol>
</li>
</ul>
</li>
<li>属性：<ul>
<li>id属性值唯一</li>
</ul>
</li>
<li>文本<ul>
<li>CDATA区：在该区域中的数据会被原样展示</li>
<li>格式:<code>&lt;![CDATA[数据]]&gt;</code></li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><ul>
<li>约束：规定xml文档的书写规则 	<ul>
<li>作为框架的使用者(程序员) 		<ol>
<li>能够在xml中引入约束文档 </li>
<li>能够简单读懂约束文档</li>
</ol>
</li>
<li>分类： 		<ol>
<li>DTD：一种简单的约束技术 </li>
<li>Schema：一种复杂的约束技术</li>
</ol>
</li>
<li>DTD<ul>
<li>引入dtd文档到xml文档中<ul>
<li>内部dtd，将约束规则定义在xml文档中</li>
<li>外部dtd，将约束规则定义在外部dtd文件中<ul>
<li>本地：<code>&lt;!DOCTYPE 根标签名 SYSTEM &quot;dtd文件的位置&quot;&gt;</code></li>
<li>网络：<code>&lt;!DOCTYPE 根标签名 PUBLIC &quot;dtd文件的名字&quot; &quot;dtd文件的位置url&quot;&gt;</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Schema 后缀：xsd<ul>
<li>引入：<ul>
<li>填写xml文档的根元素</li>
<li>引入xsi前缀 xmlns:xsi&#x3D;”<a class="link"   href="http://www.w3.org/201/XMLSchema-instance" >http://www.w3.org/201/XMLSchema-instance <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>“</li>
<li>引入xsd文件命名空间 xsi:schemaLocation&#x3D;”<a class="link"   href="http://www.itcast.cn/xml" >http://www.itcast.cn/xml <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  student.xsd”(键值对的形式 前面代表名称 后面代表路径)</li>
<li>为每一个xsd约束声明一个前缀作为标识 xmlns:(自定义前缀)&#x3D;”<a class="link"   href="http://www.itcast.cn/xml" >http://www.itcast.cn/xml <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>“<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb04/image-20230802165205879.png"
                      alt="演示"
                ></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>解析：操作xml文档，将文档中的数据读取到内存中</p>
<ul>
<li><p>操作xml文档</p>
<ol>
<li>解析(读取)：将文档中的数据读取到内存中</li>
<li>写入：将内存中的数据保存到xml文档中，持久化的存储</li>
</ol>
</li>
<li><p>解析xml的方式</p>
<ol>
<li>DOM：将标记语言文档一次性加载进内存，在内存中形成DOM树 &#x2F;&#x2F;服务端<ul>
<li>优点：操作方便，可以对文档进行CRUD的所有操作</li>
<li>缺点：占内存</li>
</ul>
</li>
<li>SAX：逐行读取，基于事件驱动的。&#x2F;&#x2F;移动端<ul>
<li>优点：几乎不占内存。</li>
<li>缺点：只能读取，不能增删改</li>
</ul>
</li>
</ol>
</li>
<li><p>xml常见的解析器：</p>
<ol>
<li>JAXP:sun公司提供的解析器，支持dom和sax两种思想</li>
<li>DOM4J:一款非常优秀的解析器</li>
<li>Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</li>
<li>PULL：Android操作系统内置的解析器，SAX方式的。</li>
</ol>
</li>
</ul>
<h3 id="Jsoup"><a href="#Jsoup" class="headerlink" title="Jsoup"></a>Jsoup</h3><ul>
<li><p>Jsoup</p>
<ul>
<li><p>快速入门</p>
<ul>
<li><p>步骤</p>
<ol>
<li><p>导入jar包 </p>
</li>
<li><p>获取Document对象</p>
</li>
<li><p>获取对应的标签Element对象</p>
</li>
<li><p>获取数据</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.获取Document对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> Jsoupdemo1.class.getClassLoader().getResource(<span class="string">&quot;student.xml&quot;</span>).getPath();</span><br><span class="line">         </span><br><span class="line"><span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">File</span>(path), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">//3.获取元素对象 Elements</span></span><br><span class="line"><span class="type">Elements</span> <span class="variable">elements</span> <span class="operator">=</span> document.getElementsByTag(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">         </span><br><span class="line">System.out.println(elements.size());</span><br><span class="line"><span class="comment">//3.1获取第一个name的Element对象</span></span><br><span class="line"><span class="type">Element</span> <span class="variable">element</span> <span class="operator">=</span> elements.get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//3.2获取数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> element.text();</span><br><span class="line">System.out.println(name);</span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p>对象的使用</p>
<ol>
<li><p>Jsoup：工具类，可以解析html或xml文档，返回Document</p>
<ul>
<li>parse：解析html或xml文档，返回Document<ul>
<li>parse(File in, String charsetName)：解析html或xml文件的</li>
<li>parse(String html)：解析xml或xml字符串</li>
<li>parse(URL url, int timeoutMillis)：通过网络路径获取指定的html或xml的文档对象</li>
</ul>
</li>
</ul>
</li>
<li><p>Document：文档对象，代表内存中的dom树</p>
<ul>
<li>获取Element对象<ul>
<li>getElementById(string id) :根据id属性值获取唯一的element对象</li>
<li>getElementsByTag(string tagName): 根据标签名称获取元素对象集合</li>
<li>getElementsByAttribute(string key): 根据属性名称获取元素对象集合</li>
<li>getElementsByAttributeValue(string key，String value): 根据对应的属性名和属性值获取元素对象集合</li>
</ul>
</li>
</ul>
</li>
<li><p>Elements：元素Element对象的集合。可以当作<code>ArrayList&lt;Element&gt;</code>来使用</p>
</li>
<li><p>Element：元素对象</p>
<ol>
<li>获取Element对象</li>
</ol>
<ul>
<li>getElementById(string id) :根据id属性值获取唯一的element对象</li>
<li>getElementsByTag(string tagName): 根据标签名称获取元素对象集合</li>
<li>getElementsByAttribute(string key): 根据属性名称获取元素对象集合</li>
<li>getElementsByAttributeValue(string key，String value): 根据对应的属性名和属性值获取元素对象集合</li>
</ul>
<ol start="2">
<li>获取属性值<ul>
<li>String attr(String key)：根据属性名称获取属性值</li>
</ul>
</li>
<li>获取文本内容<ul>
<li>String text()：获取所有子标签的纯文本内容</li>
<li>String html()：获取标签体的所有内容，包括子标签的标签和文本内容</li>
</ul>
</li>
</ol>
</li>
<li><p>Node：节点对象</p>
</li>
<li><p>是Document和Element的父类</p>
</li>
</ol>
</li>
</ul>
<h3 id="快捷查询方式"><a href="#快捷查询方式" class="headerlink" title="快捷查询方式"></a>快捷查询方式</h3><ul>
<li><p>快捷查询方式</p>
<ol>
<li><p>selector：选择器</p>
<ul>
<li><p>使用的方法：Elements select(String cssQuery)</p>
<ul>
<li><p>语法：参考Selector类中定义的语法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.获取Document对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> Jsoupdemo2.class.getClassLoader().getResource(<span class="string">&quot;student.xml&quot;</span>).getPath();</span><br><span class="line"></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">File</span>(path), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3查询name标签</span></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">names</span> <span class="operator">=</span> document.select(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(names);</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4查询为love1的元素</span></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">ids</span> <span class="operator">=</span> document.select(<span class="string">&quot;#love1&quot;</span>);</span><br><span class="line">        System.out.println(ids);</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5获取student标签并且number属性为lihuibear_001的age子标签</span></span><br><span class="line">        <span class="comment">//5.1获取student标签并且number属性为lihuibear_001</span></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">elements1</span> <span class="operator">=</span> document.select(<span class="string">&quot;student[number=&#x27;lihuibear_001&#x27;]&quot;</span>);</span><br><span class="line">        System.out.println(elements1);</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        <span class="comment">//5.2获取student标签并且number属性为lihuibear_001的age子标签</span></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">elements2</span> <span class="operator">=</span> document.select(<span class="string">&quot;student[number=&#x27;lihuibear_001&#x27;] &gt; age&quot;</span>);</span><br><span class="line">        System.out.println(elements2);</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
</li>
<li><p>Xpath：XPath即为XML路径语言（XML Path Language），它是一种用来确定XML文档中某部分位置的语言。</p>
<ul>
<li>使用Jsoup的Xpath需要额外导入jar包 </li>
<li>查询w3cschool的参考手册，使用xpath语法完成查询<br><a class="link"   href="https://www.w3school.com.cn/xpath/xpath_functions.asp" >XPath参考手册 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
        <category>JAVAWeb</category>
      </categories>
      <tags>
        <tag>项目组</tag>
        <tag>黑马程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVAWeb05</title>
    <url>/2023/08/03/JAVAWeb05/</url>
    <content><![CDATA[<h1 id="Web部分"><a href="#Web部分" class="headerlink" title="Web部分"></a>Web部分</h1><h2 id="web相关概念回顾"><a href="#web相关概念回顾" class="headerlink" title="web相关概念回顾"></a>web相关概念回顾</h2><h3 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h3><ol>
<li>C&#x2F;S：客户端&#x2F;服务器端</li>
<li>B&#x2F;S：浏览器&#x2F;服务器端</li>
</ol>
<h3 id="资源分类"><a href="#资源分类" class="headerlink" title="资源分类"></a>资源分类</h3><ol>
<li>静态资源:所有用户访问后，得到的结果都是一样的，称为静态资源<ul>
<li>如：html，css,JavaScript</li>
</ul>
</li>
<li>动态资源:每个用户访问相同资源后，得到的结果可能不一样。称为动态资源,动态资源被访问后，需要先转换为静态资源，在返回给浏览器.<ul>
<li>如 : servlet&#x2F;jsp,php,asp….</li>
</ul>
</li>
</ol>
<h3 id="网络通信三要素"><a href="#网络通信三要素" class="headerlink" title="网络通信三要素"></a>网络通信三要素</h3><ol>
<li>IP：电子设备(计算机)在网络中的唯一标识。</li>
<li>端口：应用程序在计算机中的唯一标识。 0~65536（不建议1024之内的。可能被操作系统占用）</li>
<li>传输协议：规定了数据传输的规则<ol>
<li>基础协议<ul>
<li>tcp:安全协议，三次握手。 速度稍慢</li>
<li>udp : 不安全协议。 速度快</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="web服务器软件："><a href="#web服务器软件：" class="headerlink" title="web服务器软件："></a>web服务器软件：</h2><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器:"></a>服务器:</h3><p>安装了服务器软件的计算机</p>
<h3 id="服务器软件"><a href="#服务器软件" class="headerlink" title="服务器软件:"></a>服务器软件:</h3><p>接收用户的请求，处理请求做出响应</p>
<h3 id="web服务器软件"><a href="#web服务器软件" class="headerlink" title="web服务器软件"></a>web服务器软件</h3><p>接收用户的请求，处理请求，做出响应。</p>
<ul>
<li>在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目</li>
<li>web容器</li>
</ul>
<h3 id="常见的java相关的web服务器软件"><a href="#常见的java相关的web服务器软件" class="headerlink" title="常见的java相关的web服务器软件 :"></a>常见的java相关的web服务器软件 :</h3><ul>
<li>webLogic:oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li>
<li>websphere: IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li>
<li>JBOSS:JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li>
<li>Tomcat : Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet&#x2F;jsp。开源的，免费的。</li>
</ul>
<h3 id="JavaEE"><a href="#JavaEE" class="headerlink" title="JavaEE:"></a>JavaEE:</h3><p> Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范</p>
<h3 id="Tomcat：web服务器软件"><a href="#Tomcat：web服务器软件" class="headerlink" title="Tomcat：web服务器软件"></a>Tomcat：web服务器软件</h3><ol>
<li>下载:官网<a class="link"   href="https://tomcat.apache.org/" >https://tomcat.apache.org/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>安装:解压压缩包<ul>
<li>注意:安装目录建议不要有中文和空格</li>
</ul>
</li>
<li>卸载:删除目录</li>
<li>启动:<ul>
<li>bin&#x2F;startup.bat,运行该文件</li>
<li>访问:浏览器输人 :<a class="link"   href="http://localhost:8080/" >http://localhost:8080 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 回车访问</li>
<li>可能遇到的问题 :<ol>
<li>黑窗口一闪而过 :<ul>
<li>原因: 没有正确配置JAVA HOME环境变量</li>
<li>解决方案:正确配置JAVA HOME环境变量</li>
</ul>
</li>
<li>启动报错 :<ul>
<li>暴力:找到占用的端口号并目找到对应的进程，杀死该进程<ul>
<li>netstat -ano</li>
<li>找到pid,结束进程</li>
</ul>
</li>
<li>温柔:修改自身的端口号<ul>
<li>conf&#x2F;server.xml</li>
<li>&lt;Connector port&#x3D;”8080”……&gt;</li>
<li>修改为其他</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li>关闭<ol>
<li>正常关闭<ul>
<li>bin&#x2F;shutdown.bat</li>
<li>ctrl+c</li>
</ul>
</li>
<li>强制关闭<ul>
<li>关闭窗口</li>
</ul>
</li>
</ol>
</li>
<li>配置<ul>
<li>部署项目的方式<ol>
<li>直接将项目放到webapps目录下即可<ul>
<li>&#x2F;hello：项目的访问路径–&gt;虚拟目录，&#x2F;helloworld资源文件</li>
<li>简化部署：将项目打包成war包，再将war包放在webapps目录下<ul>
<li>war包会自动解压缩，删除也会自动删除</li>
</ul>
</li>
</ul>
</li>
<li>配置conf&#x2F;server.xml文件<ul>
<li>在<code>&lt;Host&gt;</code>标签体中配置</li>
<li><code>&lt;Contxt docBase=&quot;D:\hello&quot; path=&quot;/hehe&quot;/&gt;</code></li>
<li>docBace: 项目存放的路径</li>
<li>path:虚拟目录</li>
</ul>
</li>
<li>在conf&#x2F;catalina&#x2F;localhost创建任意名称的xml文件,在文件中编写<br><code>&lt;Contxt docBase=&quot;D:\hello&quot;&gt;</code><br>虚拟目录: xm1文件的名称</li>
</ol>
</li>
<li>静态项目和动态项目 <ol>
<li>目录结构：<ul>
<li>项目的根目录<ul>
<li>WEB-INF目录<ul>
<li>web.xml : web项目的核心配置文件</li>
<li>classes目录:放置字节码文件的目录</li>
<li>lib目录:放置依赖的jar包</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li>将Tomcat集成到IDEA中，并且创建JavaEE的项目，部署项目</li>
</ul>
</li>
</ol>
<h1 id="Servlet入门学习"><a href="#Servlet入门学习" class="headerlink" title="Servlet入门学习"></a>Servlet入门学习</h1><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>运行在服务端的小程序</p>
<ul>
<li>Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则。</li>
<li>将来我们自定义一个类，:实现servlet接口，复写方法。</li>
</ul>
<h3 id="快速入门："><a href="#快速入门：" class="headerlink" title="快速入门："></a>快速入门：</h3><ol>
<li><p>创建JavaEE项目</p>
</li>
<li><p>定义一个类，实现servlet接口</p>
</li>
<li><p>实现接口中的抽象方法</p>
</li>
<li><p>配置servlet</p>
<ul>
<li><p>在web.xml里</p>
</li>
<li><pre><code class="xml">&lt;servlet&gt;
    &lt;servlet-name&gt;demo1&lt;/servlet-name&gt;
    &lt;servlet-class&gt;myservlet.demo&lt;/servlet-class&gt;
&lt;/servlet&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;demo1&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/demo1&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</code></pre>
</li>
</ul>
</li>
</ol>
<h3 id="执行原理："><a href="#执行原理：" class="headerlink" title="执行原理："></a>执行原理：</h3><ol>
<li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源</li>
<li>路径查找web.xm1文件，是否有对应的<code>&lt;url-pattern&gt;</code>标签体内容。</li>
<li>如果有，则在找到对应的<code>&lt;servlet-class&gt;</code>全类名</li>
<li>tomcat会将字节码文件加载进内存，并且创建其对象</li>
<li>调用其方法</li>
</ol>
<h3 id="Servlet："><a href="#Servlet：" class="headerlink" title="Servlet："></a>Servlet：</h3><h4 id="Servlet中生命周期："><a href="#Servlet中生命周期：" class="headerlink" title="Servlet中生命周期："></a>Servlet中生命周期：</h4><ol>
<li>被创建：执行init方法，只执行一次<ul>
<li>servlet什么时候被创建 ?<ul>
<li>默认情况下，第一次被访问时，servlet被创建*可以配置执行servlet的创建时机。</li>
<li>可以配置执行servlet的创建时机。<ul>
<li>在<code>&lt;servlet&gt;</code>标签下配置。<ol>
<li>第一次被访问时，创建<br><code>&lt;load-on-startup&gt;</code>的值为负数</li>
<li>在服务器启动时，创建<br><code>&lt;load-on-startup&gt;</code>的值为0或正整数</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li>servlet的init方法，只执行一次，说明一个servlet在内存中只存在一个对象，Servlet是单例的<ul>
<li>多个用户同时访问时，可能存在线程安全问题。</li>
<li>解决:尽量不要在servlet中定义成员变量。即使定义了成员变量，也不要对修改值</li>
</ul>
</li>
</ul>
</li>
<li>提供服务：执行service方法，执行多次<ul>
<li>每次访问servlet时，service方法都会被调用一次</li>
</ul>
</li>
<li>被销毁：执行destory方法，只能执行一次<ul>
<li>servlet被销毁时执行。服务器关闭时，servlet被销毁</li>
<li>只有服务器正常关闭时，才会执行destroy方法。</li>
<li>destroy方法在servlet被销毁之前执行，一般用于释放资源</li>
</ul>
</li>
</ol>
<h4 id="Servlet3-0-的注解配置"><a href="#Servlet3-0-的注解配置" class="headerlink" title="Servlet3.0 的注解配置:"></a>Servlet3.0 的注解配置:</h4><p>好处：支持注解配置，可以不需要web.xml</p>
<ol>
<li>步骤：创建JavaEE项目，选择servlet的版本3.o以上，可以不创建web.xml</li>
<li>定义一个类，实现servlet接口</li>
<li>复写方法</li>
<li>在类上使用<code>@WebServlet</code>注解<ul>
<li><code>@WebServlet(&quot;/资源路径&quot;)</code></li>
</ul>
</li>
</ol>
<h4 id="相关配置："><a href="#相关配置：" class="headerlink" title="相关配置："></a>相关配置：</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb05/image-20230804213146626-16911559272611.png"
                      alt="不想打字了"
                ></p>
<h4 id="Servlet结构体系："><a href="#Servlet结构体系：" class="headerlink" title="Servlet结构体系："></a>Servlet结构体系：</h4><p>servlet –接口<br>     |<br>GenericServlet –抽象类<br>     |<br>Httpservlet   –抽象类</p>
<p>Genericservlet:将servlet接口中其他的方法做了默认空实现，只将service()方法作为抽象</p>
<ul>
<li>将来定义servlet类时，可以继承GetdericServlet，实现service()方法即可</li>
</ul>
<p>Httpservlet :对http协议的一种封装，简化操作</p>
<ol>
<li>定义类继承Httpservlet</li>
<li>复写doGet&#x2F;doPost方法</li>
</ol>
<p>servlet相关配置</p>
<p>servlet相关配置</p>
<ol>
<li>urlpartten:servlet访问路径<ol>
<li>一个servlet可以定义多个访问路径 @webservlet([“&#x2F;d4”,”&#x2F;dd4”, “&#x2F;ddd4”})</li>
<li>路径定义规则 </li>
<li>&#x2F;xxx</li>
<li>&#x2F;xxx&#x2F;xxx 目录结构 <code>/xxx/*</code><ol>
<li><code>/*</code>优先级最低，如果是随便输入， 其他访问完没有才访问 <code>/*</code></li>
</ol>
</li>
<li>*.do :访问时为demo.do</li>
</ol>
</li>
</ol>
<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念:"></a>概念:</h2><p>Hyper Text Transfer Protocol 超文本传输协议</p>
<ul>
<li>传输协议：定义了，客户端和服务器端通信时，发送数据的格式</li>
<li>特点：<ol>
<li>基于TCP&#x2F;IP的高级协议</li>
<li>默认端口：80</li>
<li>基于请求&#x2F;响应模型的：一次请求对应一次响应</li>
<li>无状态的 :每次请求之间相互独立，不能交互数据</li>
</ol>
</li>
<li>历史版本：<ul>
<li>1.0每一次请求响应都会建立新的连接</li>
<li>1.1复用连接</li>
</ul>
</li>
</ul>
<h2 id="请求消息数据格式"><a href="#请求消息数据格式" class="headerlink" title="请求消息数据格式"></a>请求消息数据格式</h2><ol>
<li>请求行<ul>
<li>请求方式 请求url 请求协议版本</li>
<li>GET &#x2F;login.html HTTP&#x2F;1.1</li>
<li>请求方式<ul>
<li>HTTP协议有7种请求方式，常用的有2种<ul>
<li>GET：<ol>
<li>请求参数在请求行中，在url后</li>
<li>请求的url长度<strong>有</strong>限制</li>
<li>不太安全</li>
</ol>
</li>
<li>POST:<ol>
<li>请求参数在请求体中 </li>
<li>请求的url长度<strong>没有</strong>限制</li>
<li>相对安全</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>请求头<ul>
<li>请求头名称: 请求头值</li>
<li>常见的请求头：<ol>
<li><strong>USER-Agent</strong>：浏览器告诉服务器，我访问你使用的浏览器版本<ul>
<li>可以在服务器端获取该头的信息，解决浏览器的兼容性问题</li>
</ul>
</li>
<li>Accept：可以接收的某某格式的信息响应</li>
<li>Accept-Language：支持的语言环境</li>
<li>Accept-Encoding：支持的压缩格式</li>
<li><strong>Referer</strong> : <code>http://localhost/login.html</code><ul>
<li>告诉服务器，我(当前请求)从哪里来 ?<ul>
<li>作用<ol>
<li>防盗链</li>
<li>统计工作</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li>Connection：连接是否可以被复用</li>
</ol>
</li>
</ul>
</li>
<li>请求空行<ul>
<li>空行,就是用于分割POST请求的请求头，和请求体的</li>
</ul>
</li>
<li>请求体（正文）<ul>
<li>封装POST请求消息的请求体的</li>
</ul>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb05/image-20230805162238677.png"
                      alt="请求消息数据格式"
                ></p>
<h2 id="响应消息数据格式"><a href="#响应消息数据格式" class="headerlink" title="响应消息数据格式"></a>响应消息数据格式</h2><h1 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h1><ol>
<li><p>request对象和response对象的原理</p>
<ul>
<li>request和response对象是由服务器创建的。我们来使用它们</li>
<li>request对象是来获取请求消息，response对象是来设置响应消息</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/JAVAWeb05/image-20230805163044451.png"
                      alt="流程"
                ></li>
</ul>
</li>
<li><p>request对象继承体系结构 </p>
<ul>
<li>ServletRequest   – 接口<br>  |  继承</li>
<li>HttpServletRequest –接口<br>  | 实现</li>
<li>org.apache.catalina.connector.RequestFacade  类（tomcat）</li>
</ul>
</li>
<li><p>request: 获取请求消息</p>
<ol>
<li>获取请求消息数据<ol>
<li>获取请求行数据<ul>
<li>GET &#x2F;day14&#x2F;demo1?name&#x3D;zhangsan HTTP&#x2F;1.1</li>
<li>方法:<ol>
<li>获取请求方式:GET<ul>
<li>string getMethod()</li>
</ul>
</li>
<li><strong>获取虚拟目录</strong>:&#x2F;day14<ul>
<li>string getContextPath()</li>
</ul>
</li>
<li>获取Servlet路径: &#x2F;demo1<ul>
<li>string getservletPath()</li>
</ul>
</li>
<li>获取get方式请求参数:name&#x3D;zhangsan<ul>
<li>string getQueryString()</li>
</ul>
</li>
<li><strong>获取请求URI</strong>:&#x2F;day14&#x2F;demo1<ul>
<li>string getRequestURI(): &#x2F;day14&#x2F;demo1</li>
<li>stringBuffer getRequestURL():<code>http://localhost/day14/demo1</code><ul>
<li>URL:统一资源定位符:<code>http://localhost/day14/demo1</code></li>
<li>URI:统一资源标识行 : &#x2F;day14&#x2F;demo1(范围更大)</li>
</ul>
</li>
</ul>
</li>
<li>获取协议及版本:HTTP&#x2F;1.1<ul>
<li>string getProtocol()</li>
</ul>
</li>
<li>获取客户机的IP地址 :<ul>
<li>string getRemoteAddr()</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li>获取请求头数据<ol>
<li>方法<ol>
<li><code>String getHeader(String name)</code>:通过请求头的名称获取请求头的值(多用)</li>
<li><code>Enumeration&lt;string&gt; getHeaderNames()</code>:获取所有的请求头名称</li>
</ol>
</li>
</ol>
</li>
<li>获取请求体数据   <ul>
<li>请求体:只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数</li>
<li>步骤<ol>
<li>获取流对象</li>
<li>再从流对象中获取数据</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li>其他功能<ol>
<li>获取请求参数通用方式：不论是get还是post请求方式，都可以用下列方法来获取请求参数<ol>
<li><code>String getParameter(String name)</code>:根据参数名称获取<strong>参数值</strong></li>
<li><code>String getParameterValues(String name)</code>:根据参数名称获取参数值的<strong>数组</strong> hobby&#x3D;xx&amp;hobby&#x3D;game</li>
<li><code>Enumeration&lt;string&gt; getParameterNames()</code>:获取所有请求的参数名称</li>
<li><code>Map&lt;String,String[]&gt; getParameterMap()</code>:获取所有参数的map集合<ul>
<li>中文乱码问题<ul>
<li>get方式：在tomcat 8已经将get方式乱码问题解决了</li>
<li>post方法：在获取参数前，设置request的编码<code>request,setCharacterEncoding(&quot;utf-8”);</code></li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li>请求转发:一种在服务器内部的资源跳转方式<ol>
<li>步骤：<ol>
<li>通过request对象获取请求转发器对象: RequestDispatcher     getRequestDispatcher(string path)</li>
<li>使用RequestDispatcher对象来进行转发: forward(ServletRequest request，ServletResponse response)</li>
</ol>
</li>
<li>特点：<ol>
<li>浏览器地址栏路径不发生变化</li>
<li>只能转发到当前服务器内部资源中。</li>
</ol>
</li>
</ol>
</li>
<li>共享数据<ul>
<li>域对象：一个有作用范围的对象，可以在范围内共享数据</li>
<li>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据removeAttribute(String name): 通过键移除键值对</li>
</ul>
</li>
<li>获取servletContext <ul>
<li>ServletContext getservletContext()</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
        <category>后端</category>
        <category>JAVAWeb</category>
      </categories>
      <tags>
        <tag>项目组</tag>
        <tag>黑马程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux的介绍及安装方式</title>
    <url>/2023/08/26/Linux/</url>
    <content><![CDATA[<h1 id="介绍🐧"><a href="#介绍🐧" class="headerlink" title="介绍🐧"></a>介绍🐧</h1><blockquote>
<p> 常见的操作系统(windows、IOS、Android、Macos,Linux, Unix)</p>
</blockquote>
<h2 id="1-Linux简单简介"><a href="#1-Linux简单简介" class="headerlink" title="1.Linux简单简介"></a>1.Linux简单简介</h2><p>Linux，全称GNU&#x2F;Linux，是一套免费使用和自由传播的类UNIX操作系统，其内核由林纳斯·本纳第克特·托瓦兹(Linus Torvalds)于<strong>1991</strong>年第一次释出，它主要受到Minix和Unix思想的启发，是一个基于POSIX和Unix的<strong>多用户、多任务、支持多线程和多CPU的操作系统</strong>。它能运行主要的Unix工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。Linux有上百种不同的<strong>发行版</strong>，如基于社区开发的debian、archlinux，和基于商业开发的Red Hat、Enterprise Linux、SUSE、oracle linux等。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Linux/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230827010233.png"
                      alt="linux分支"
                ></p>
<h2 id="2-Linux发展简史"><a href="#2-Linux发展简史" class="headerlink" title="2.Linux发展简史"></a>2.Linux发展简史</h2><p>Linux操作系统的诞生、发展和成长过程始终依赖着五个重要支柱：Unix操作系统、MINIX操作系统、GNU计划、POSIX标准和Internet网络。20世纪80年代，计算机硬件的性能不断提高，PC的市场不断扩大，当时可供计算机选用的操作系统主要有Unix、DOS和MacOS这几种。Unix价格昂贵，不能运行于PC；DOS显得简陋，且源代码被软件厂商严格保密；MacOS是一种专门用于苹果计算机的操作系统。此时，计算机科学领域迫切需要一个更加完善、强大、廉价和完全开放的操作系统。由于供教学使用的典型操作系统很少，因此当时在荷兰当教授的美国人AndrewS.Tanenbaum编写了一个操作系统，名为MINIX，为了向学生讲述操作系统内部工作原理。MINIX虽然很好，但只是一个用于教学目的的简单操作系统，而不是一个强有力的实用操作系统，然而最大的好处就是公开源代码。全世界学计算机的学生都通过钻研MINIX源代码来了解电脑里运行的MINIX操作系统，芬兰赫尔辛基大学大学二年级的学生Linus Torvalds就是其中一个，在吸收了MINIX精华的基础上，Linus于1991年写出了属于自己的Linux操作系统，版本为Linux0.01，是Linux时代开始的标志。他利用Unix的核心，去除繁杂的核心程序，改写成适用于一般计算机的x86系统，并放在网络上供大家下载，1994年推出完整的核心Version1.0，至此，Linux逐渐成为功能完善、稳定的操作系统，并被广泛使用。</p>
<h2 id="3-Linux的应用"><a href="#3-Linux的应用" class="headerlink" title="3.Linux的应用"></a>3.Linux的应用</h2><p>与Windows操作系统软件一样，Linux也是一个操作系统软件。但与Windows不同的是，Linux是一套开放源代码程序的，并可以自由传播的类UNIX操作系统软件，随着信息技术的更新变化，Linux应用领域已趋于广泛。</p>
<h3 id="1、IT服务器Linux系统应用领域"><a href="#1、IT服务器Linux系统应用领域" class="headerlink" title="1、IT服务器Linux系统应用领域"></a>1、IT服务器Linux系统应用领域</h3><blockquote>
<p>最主要的领域</p>
</blockquote>
<p>如今的IT服务器领域是Linux、UNIX、Windows三分天下，Linux系统可谓是后起之秀，尤其是近几年，服务器端Linux操作系统不断地扩大着市场份额，每年增长势头迅猛，并对Windows及UNIX服务器市场的地位构成严重的威胁。</p>
<p>Linux作为企业级服务器的应用十分广泛，利用Linux系统可以为企业构架WWW服务器、数据库服务器、负载均衡服务器、邮件服务器、DNS服务器、代理服务器(透明网关)、路由器等，不但使企业降低了运营成本，同时还获得了Linux系统带来的高稳定性和高可靠性。</p>
<p>随着Linux在服务器领域的广泛应用，从近几年的发展来看，该系统已经渗透到了电信、金融、政府、教育、银行、石油等各个行业，同时各大硬件厂商也相继支持Linux操作系统。这一切都在表明，Linux在服务器市场的前景是光明的。大型、超大型互联网企业(腾讯、淘宝、百度、新浪等)都在使用Linux系统作为其服务器端的程序运行平台，全球及国内排名前十的网站使用的几乎都是Linux系统，Linux已经逐步渗透到各个领域的企业里。</p>
<h3 id="2、嵌入式Linux系统应用领域"><a href="#2、嵌入式Linux系统应用领域" class="headerlink" title="2、嵌入式Linux系统应用领域"></a>2、嵌入式Linux系统应用领域</h3><blockquote>
<p>limux 运行稳定、对网络的良好支持性、低成本，且可以根据需要进行软件裁剪，内核最小可以达到几百 KB 等特点使其近些年来在嵌入式领域的应用得到非常大的提高</p>
</blockquote>
<p>由于Linux系统开放源代码，功能强大、可靠、稳定性强、灵活，而且具有极大的伸缩性，再加上它广泛支持大量的微处理器体系结构、硬件设备、图形支持和通信协议，因此，在嵌入式应用的领域里，从因特网设备(路由器、交换机、防火墙、负载均衡器等)到专用的控制系统(自动售货机、手机、PDA、各种家用电器等)</p>
<h3 id="3、个人桌面Linux应用领域"><a href="#3、个人桌面Linux应用领域" class="headerlink" title="3、个人桌面Linux应用领域"></a>3、个人桌面Linux应用领域</h3><p>所谓个人桌面系统，其实就是我们在办公室使用的个人计算机系统， 例如： Windows XP、Windows 7、MAC等。华为荣耀magicbookpro Linux版搭载的国产的深度操作系统deepin也是基于Linux开发的，Linux系统在这方面的支持也已经非常好了，完全可以满足日常的办公及家用需求，例如：</p>
<ul>
<li>　　浏览器上网浏览(例如：Firefox浏览器)。</li>
<li>　　办公室软件(OpenOffice，兼容微软Office软件)处理数据。</li>
<li>　　收发电子邮件(例如：ThunderBird 软件)。</li>
<li>　　实时通信(例如：QQ 等)。</li>
<li>　　文字编辑(例如：vi、vim、emac)。</li>
<li>　　多媒体应用。</li>
</ul>
<p>虽然Linux个人桌面系统的支持已经很广泛了，但是在当前的桌面市场份额还远远无法与Windows系统竞争，这其中的障碍可能不在于Linux桌面系统产品本身，而在于用户的使用观念、操作习惯和应用技能，以及曾经在Windows上开发的软件的移植问题。</p>
<h1 id="安装🐧"><a href="#安装🐧" class="headerlink" title="安装🐧"></a>安装🐧</h1><p>目前安装操作系统方式主要有3种：真机安装、虚拟机安装、VPS虚拟服务器安装。</p>
<p>如果是学习或者测试使用，建议使用虚拟机安装方式和VPS服务器安装方式。</p>
<h3 id="1-真机安装方式"><a href="#1-真机安装方式" class="headerlink" title="1.真机安装方式"></a>1.真机安装方式</h3><p>使用真实的电脑进行安装，像安装Windows操作系统一样，真机安装的结果就是替换掉当前的Windows操作系统。</p>
<h3 id="2-虚拟机安装方式"><a href="#2-虚拟机安装方式" class="headerlink" title="2.虚拟机安装方式"></a>2.虚拟机安装方式</h3><p>虚拟机目前有2个比较有名的产品：vmware出品的vmware workstation、oracle 出品的virtual Box。</p>
<p>通过一些特定的手段，来进行模拟安装，并不会影响当前计算机的真实操作系统。</p>
<h3 id="3-Linux云服务器安装方式"><a href="#3-Linux云服务器安装方式" class="headerlink" title="3.Linux云服务器安装方式"></a>3.Linux云服务器安装方式</h3><p>VPS（Virtual Private Server 虚拟专用服务器）可选配独立公网IP地址、独立操作系统、实现不同VPS间磁盘空间、内存、CPU资源、进程和系统配置的隔离，为用户和应用程序模拟出“独占”使用计算资源的体验。VPS可以像独立服务器一样，重装操作系统，安装程序，单独重启服务器。</p>
<p>一般情况下，VPS服务器都安装的Linux系统（包括Ubuntu、Debian、CentOS等），直接购买VPS服务器，安装Linux，可以用SSH工具进行远程连接登录使用。</p>
<hr>

<p>下一篇将提供在虚拟机上的安装方式</p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>专业课</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>韩顺平</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux笔记</title>
    <url>/2023/09/05/Linux-1/</url>
    <content><![CDATA[<h1 id="VMware网络连接的三种模式"><a href="#VMware网络连接的三种模式" class="headerlink" title="VMware网络连接的三种模式"></a>VMware网络连接的三种模式</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Linux-1/image-20230906075741489.png"
                      alt="image-20230906075741489"
                ></p>
<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>VMWare会虚拟一块网卡和真正的物理网卡就行桥接，这样，发到物理网卡的所有数据包就到了VMWare虚拟机，而由VMWare发出的数据包也会通过桥从物理网卡的那端发出。桥接网络是指本地物理网卡和虚拟网卡通过VMnet0虚拟交换机进行桥接。相当于在一个局域网内创立了一个单独的主机，他可以访问这个局域网内的所有的主机</p>
<p>该模式下主机网卡和虚拟机网卡的IP地址处于同一个网段，子网掩码、网关、DNS等参数都相同</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Linux-1/image-20230905155815031.png"
                      alt="image-20230905155815031"
                ></p>
<blockquote>
<p>桥接模式，虚拟系统可以和外部系统通讯，但是容易造成IP冲突</p>
<p>桥接模式下虚拟机和主机在网络上地位相等，可以理解为一台新的电脑</p>
</blockquote>
<h2 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a>NAT模式</h2><p>虚拟系统会通过真实主机的网络来访问外网，而真实主机相当于有两个网卡：真实网卡和虚拟网卡，真实网卡相当于链接了现实世界的真实路由器，而虚拟网卡相当于链接一个虚拟交换机&#x2F;路由器（这个虚拟交换机同时链接虚拟机和真实主机）,此时虚拟机想访问外网就必须通过真实主机IP地址，而外面看来也确实是真实主机的IP地址，实则是虚拟机访问的，完全看不到虚拟网络局域的内部形式。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Linux-1/image-20230906075631835.png"
                      alt="image-20230906075631835"
                ></p>
<blockquote>
<p>网络地址转换模式。虚拟机系统可以和外部系统通讯，不造成IP冲突</p>
</blockquote>
<h2 id="主机模式"><a href="#主机模式" class="headerlink" title="主机模式"></a>主机模式</h2><blockquote>
<p>他就是一个独立的系统，不和外界发生联系</p>
</blockquote>
<h1 id="虚拟机克隆"><a href="#虚拟机克隆" class="headerlink" title="虚拟机克隆"></a>虚拟机克隆</h1><p>如果你已经安装了一台linux操作系统，你还想再更多的，没有必要再重新安装，你只需要克隆就可以</p>
<ul>
<li>方式一:直接拷贝一份安装好的虚拟机文件</li>
<li>方式二:使用vmware的克隆操作,注意，克隆时，需要先关闭linux 系统</li>
</ul>
<h1 id="虚拟机快照"><a href="#虚拟机快照" class="headerlink" title="虚拟机快照"></a>虚拟机快照</h1><p>如果你在使用虚拟机系统的时候(比如linux)，你想<strong>回到原先的某一个状态</strong>，也就是说你担心可能有些误操作造成系统异常，需要回到原先某个正常运行的状态，vmware也提供了这样的功能，就叫<strong>快照管理</strong></p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Linux-1/image-20230906080757105.png"
                      alt="image-20230906080757105"
                ></p>
<h1 id="虚拟机迁移和删除"><a href="#虚拟机迁移和删除" class="headerlink" title="虚拟机迁移和删除"></a>虚拟机迁移和删除</h1><p>虚拟系统安装好了它的本质就是文件(放在文件夹的)。因此虚拟系统的迁移很方便，你可以把安装好的虚拟系统这个文件夹<strong>整体拷贝或者剪切到另外位置使用</strong>。删除也很简单，用vmware进行移除，再点击菜单-&gt;从<strong>磁盘删除</strong>即可，或者直接手<strong>动删除虚拟系统对应的文件夹</strong>即可。</p>
<h1 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h1><h2 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1.基本介绍"></a>1.基本介绍</h2><ul>
<li>linux的文件系统是采用级层式的树状目录结构，在此结构上的最上层是根目录“&#x2F;“，然后在此目录下在创建其他的目录。</li>
<li>深刻理解linux树状文件目录是非常重要的</li>
<li>记住一句很经典的话：<strong>在Linux世界里，一切皆文件</strong></li>
</ul>
<h2 id="2-具体的目录结构"><a href="#2-具体的目录结构" class="headerlink" title="2. 具体的目录结构"></a>2. 具体的目录结构</h2><ul>
<li><p><code>/bin </code>【常用】（&#x2F;usr&#x2F;bin、&#x2F;uer&#x2F;local&#x2F;bin)<br>是Binary的缩写，这个目录存放着最常使用的命令</p>
</li>
<li><p><code>/sbin</code> （&#x2F;usr&#x2F;sbin、&#x2F;usr&#x2F;local&#x2F;sbin）<br>s就是Super user的意思，这里存放的是系统管理员使用的系统管理程序</p>
</li>
<li><p><code>/home </code>【常用】存放普通用户的主目录，<br>在Linux中每个用户都有一个自己的目录，一般该目录是以用户的账号命名</p>
</li>
<li><p><code>/root </code>【常用】<br>该目录为系统管理员，也称作超级权限者的用户主目录</p>
</li>
<li><p><code>/lib</code><br> 系统开机所需要的最基本的动态链接共享库，起作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库</p>
</li>
<li><p><code>/lost+found </code><br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件</p>
</li>
<li><p><code>etc</code> 【常用】<br>所有的系统管理所需要的配置文件和子目录，比如安装mysql数据库，my.conf</p>
</li>
<li><p><code>/usr</code> 【常用】<br>这是一个非常重要的目录，用户很多应用程序都放在这个目录下，类似于windows下的program files目录。</p>
</li>
<li><p><code>/boot</code> 【常用】<br>存放的是启动Linux时使用的一些核心文件，包括一些链接文件以及镜像文件</p>
</li>
<li><p><code>/proc</code> 【不能动】<br>这个目录是一个虚拟的目录，他是系统内存的映射，访问这个目录来获取系统信息</p>
</li>
<li><p><code>/srv</code> 【不能动】<br> service缩写，该目录存放一些服务器启动后需要提取的数据</p>
</li>
<li><p><code>/sys</code> 【不能动】<br> 这是linux2.6内核的一个很大的变化，该目录下安装了2.6内核中新出现的一个文件系统sysfs</p>
</li>
<li><p><code>/tmp</code><br>这个目录是用来存放一些临时文件的</p>
</li>
<li><p><code>/dev</code><br>类似于windows的设备管理器，把所有的硬件用文件的形式存储</p>
</li>
<li><p><code>/media</code>【常用】<br>linux系统会自动识别一些设备，例如U盘，光驱等等，当识别后，linux会把识别的设备挂载到这个目录下</p>
</li>
<li><p><code>/mnt </code>【常用】<br>系统提供该目录是为了让用户临时挂载别的系统文件，我们可以将外部的存储挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以查看里面的内容了。D:&#x2F;mushare</p>
</li>
<li><p><code>/opt</code><br>这是<strong>给主机额外的安装软件所存放的目录</strong>。如安装ORACLE数据库就可以放到该目录下。默认为空 </p>
<blockquote>
<p>简单说就是安装包</p>
</blockquote>
</li>
<li><p>&#x2F;usr&#x2F;local【常用】<br>这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码的方式安装的程序</p>
<blockquote>
<p>简单说就是.exe</p>
</blockquote>
</li>
<li><p><code>/var</code> 【常用】<br>这个目录中存放着在不断扩充的东西 ，习惯的将经常修改的目录放在这个目录下。包括各种日志文件</p>
</li>
<li><p><code>/selinux</code> 【security-enhanced linux】<br>SELinux是一种安全子系统，他能控制程序自能访问特定的文件，有三种工作模式，可以自行设置</p>
</li>
</ul>
<h1 id="vi和vim编辑器"><a href="#vi和vim编辑器" class="headerlink" title="vi和vim编辑器"></a>vi和vim编辑器</h1><h2 id="1-vi和vim的基本介绍"><a href="#1-vi和vim的基本介绍" class="headerlink" title="1.vi和vim的基本介绍"></a>1.vi和vim的基本介绍</h2><p>Linux系统会内置vi文本编辑器</p>
<p>Vim具有程序编辑的能力，可以看做是Vi的增强版本，可以主动的以字体颜色辨别语法的正确性，方便程序设计。代码补完、编译错误跳转等方便编程的功能相当丰富，在程序员中被广泛使用。（vim就是vi的增强版）</p>
<h2 id="2-vi和vim常用的三种模式"><a href="#2-vi和vim常用的三种模式" class="headerlink" title="2.vi和vim常用的三种模式"></a>2.vi和vim常用的三种模式</h2><h3 id="正常模式"><a href="#正常模式" class="headerlink" title="正常模式"></a>正常模式</h3><p>以vim打开一个档案就直接进入一般模式了（这是默认的模式）。在这个模式中，可以使用【上下左右】键来移动光标，你可以使用【删除字符】或【删除整行】来处理档案内容，也可以使用【复制、粘贴】来处理你的文件数据。</p>
<h3 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h3><p>按下i，I，o，O，a，A，r，R等任何一个字母之后才会进入编辑模式，一般来说按i就可</p>
<h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><p>在这个模式中，可以提供你相关指令，完成读取、存盘、替换、离开vim、显示行号等动作则是在此模式中达成的！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/Linux-1/image-20230909110156843.png"
                      alt="image-20230909110156843"
                ></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>专业课</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>韩顺平</tag>
      </tags>
  </entry>
  <entry>
    <title>chart-gpt本地部署</title>
    <url>/2023/08/14/chart-gpt%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>记录<a class="link"   href="https://github.com/whoiskatrin/chart-gpt" >chart-gpt <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的安装部署历程，此项目来自github开源项目</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><blockquote>
<p>首先，请先克隆此存储库：</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/whoiskatrin/chart-gpt.git</span><br><span class="line"><span class="built_in">cd</span> chart-gpt</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>然后复制模板 <code>cp .env.example .env</code> 并 <code>.env.example</code> 添加您的 PaLM API 密钥：</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">BARD_KEY=<span class="string">&quot;your-api-key&quot;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>然后安装依赖项并启动开发服务器：</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run dev</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yarn</span><br><span class="line">yarn dev</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>这将在 <a class="link"   href="http://localhost:3000/" >http://localhost:3000 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 启动开发服务器。</p>
</blockquote>
<p>222</p>
<pre><code>
在 Windows

创建虚拟环境：

<div class="highlight-container" data-rel="Ebnf"><figure class="iseeu highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python -m venv venv</span></span><br></pre></td></tr></table></figure></div>

激活虚拟环境：

<div class="highlight-container" data-rel="Applescript"><figure class="iseeu highlight applescript"><table><tr><td class="code"><pre><span class="line">venv\Scripts\<span class="built_in">activate</span></span><br></pre></td></tr></table></figure></div>
</code></pre>
]]></content>
      <categories>
        <category>计算机前沿</category>
        <category>AI</category>
        <category>本地部署</category>
      </categories>
      <tags>
        <tag>chart-gpt</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware安装linux系统</title>
    <url>/2023/08/28/VMware%E5%AE%89%E8%A3%85linux%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="VMware的安装"><a href="#VMware的安装" class="headerlink" title="VMware的安装"></a>VMware的安装</h1><p><a class="link"   href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html" >下载 VMware Workstation Pro | CN <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>17密钥：JU090-6039P-08409-8J0QH-2YR7F</p>
<h1 id="操作系统的下载"><a href="#操作系统的下载" class="headerlink" title="操作系统的下载"></a>操作系统的下载</h1><p><a class="link"   href="https://www.123pan.com/s/eaG5Vv-yoth3.html" >CentOS 7 64位 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.123pan.com/s/eaG5Vv-6oth3.html" >Ubuntu-22.04.3-desktop <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h1><p><a class="link"   href="https://blog.csdn.net/qq_48774513/article/details/123166868" >Linux系统安装及配置——Centos-7-X86_64-DVD-2009_ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Ubuntu同上</p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>专业课</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>韩顺平</tag>
      </tags>
  </entry>
  <entry>
    <title>cmd在java的使用</title>
    <url>/2023/07/08/cmd%E5%9C%A8java%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Win+R 打开cmd</p>
<h1 id="文件在src下"><a href="#文件在src下" class="headerlink" title="文件在src下"></a>文件在src下</h1><p>进入到程序文件目录</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/cmd%E5%9C%A8java%E7%9A%84%E4%BD%BF%E7%94%A8/clip_image002.jpg"
                      alt="img"
                ></p>
<p>直接编译会有问题 乱码</p>
<p>javac StudentSystem.java</p>
<h2 id="解决方式1："><a href="#解决方式1：" class="headerlink" title="解决方式1："></a>解决方式1：</h2><p>javac -encoding UTF-8 StudentSystem.java</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/cmd%E5%9C%A8java%E7%9A%84%E4%BD%BF%E7%94%A8/clip_image004.jpg"
                      alt="img"
                ></p>
<h2 id="解决方式2：记事本打开另存为"><a href="#解决方式2：记事本打开另存为" class="headerlink" title="解决方式2：记事本打开另存为"></a>解决方式2：记事本打开另存为</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/cmd%E5%9C%A8java%E7%9A%84%E4%BD%BF%E7%94%A8/clip_image006.jpg"
                      alt="img"
                ></p>
<p>然后编译，运行</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/cmd%E5%9C%A8java%E7%9A%84%E4%BD%BF%E7%94%A8/clip_image008.jpg"
                      alt="img"
                ></p>
<h1 id="文件在src的包下"><a href="#文件在src的包下" class="headerlink" title="文件在src的包下"></a>文件在src的包下</h1><p> <strong>javac 包的名字\HelloWord.java</strong></p>
<p><strong>例如：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/cmd%E5%9C%A8java%E7%9A%84%E4%BD%BF%E7%94%A8/clip_image009.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/cmd%E5%9C%A8java%E7%9A%84%E4%BD%BF%E7%94%A8/clip_image011.jpg"
                      alt="img"
                ></p>
<p>重复</p>
<p>javac main\demo.java</p>
<p>java -cp .;path&#x2F;to&#x2F;spring-jdbc.jar;path&#x2F;to&#x2F;druid.jar lihui.bear.Information.Student </p>
<p>java -cp .;path&#x2F;to&#x2F;spring-jdbc.jar;path&#x2F;to&#x2F;druid.jar lihui.bear.Information.Teacher</p>
]]></content>
      <categories>
        <category>技巧</category>
        <category>后端</category>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>项目组</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo上传问题</title>
    <url>/2023/08/11/hexo%E4%B8%8A%E4%BC%A0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>还需要更新改正……</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>近期朋友们都在通过hexo的模板搭建自己的个人blog，期间遇到了22端口被占用的问题</p>
<h2 id="22端口是什么"><a href="#22端口是什么" class="headerlink" title="22端口是什么"></a>22端口是什么</h2><p>22端口就是ssh应用端口，ssh用于远程连接Linux云服务器。一般Linux云服务器要放通22号端口， Windows云服务器需要放通3389号端口。</p>
<h2 id="出现端口占用的原因"><a href="#出现端口占用的原因" class="headerlink" title="出现端口占用的原因"></a>出现端口占用的原因</h2><ul>
<li>问题如下</li>
</ul>
<blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/hexo%E4%B8%8A%E4%BC%A0%E9%97%AE%E9%A2%98/image-20230813101729004.png"
                      alt="问题"
                ></p>
</blockquote>
<ul>
<li>打开cmd,通过命令 netstat -ano 查询端口占用情况</li>
</ul>
<blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/hexo%E4%B8%8A%E4%BC%A0%E9%97%AE%E9%A2%98/image-20230813102158667.png"
                      alt="端口占用"
                ></p>
</blockquote>
<p>打开任务管理器,通过PID查询</p>
<blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/hexo%E4%B8%8A%E4%BC%A0%E9%97%AE%E9%A2%98/image-20230813105537683.png"
                      alt="PID查询"
                ></p>
</blockquote>
<p>发现是加速器<a class="link"   href="https://steampp.net/" >Watt Toolkit <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 程序占用了22端口</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol>
<li><p>关闭该程序</p>
<blockquote>
<p>结果可能导致<code>hexo d</code> 因为网络问题上传失败</p>
<p>可以使用电信的网络或者魔法解决该问题</p>
</blockquote>
</li>
<li><p>改换协议<a class="link"   href="https://www.linuxidc.com/Linux/2016-05/131147.htm" >SSL&#x2F;TLS <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<blockquote>
<p>出现上述问题是由于采用的是SSH协议上传的,我们改用TLS协议上传</p>
<p>可能会出现SSL证书未经过第三方机构签署，那么Git就会报错</p>
<p><a class="link"   href="https://www.jianshu.com/p/df4f7f0dc2eb" >让git忽略ssl证书错误 - 简书 (jianshu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/hexo%E4%B8%8A%E4%BC%A0%E9%97%AE%E9%A2%98/image-20230813115944167.png"
                     
                ></p>
</blockquote>
</li>
</ol>
<h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><p>   简单说，SSH是一种网络协议，用于计算机之间的<strong>加密登录</strong>。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。<br>   SSH之所以能够保证安全，原因在于它采用了公钥加密。<br>   整个过程是这样的：</p>
<blockquote>
<p>远程主机收到用户的登录请求，把自己的公钥发给用户。</p>
<p>用户使用这个公钥，将登录密码加密后，发送回来。</p>
<p>远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</p>
</blockquote>
<p>   这个过程本身是安全的</p>
<p>   但是实施的时候存在一个风险</p>
<blockquote>
<p>如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。</p>
<p>  可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。</p>
<p>  再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。</p>
<p>  这种风险就是著名的”<strong>中间人攻击</strong>“。</p>
</blockquote>
<h3 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h3><p>   SSL（Secure Sockets Layer）安全套接层。它是位于HTTP等各种应用层协议之下，TCP&#x2F;IP层之上的一个协议，为数据通信提高安全支持。主要任务是提供<strong>私密性</strong>，<strong>数据完整性</strong>和<strong>身份认证</strong>。</p>
<h3 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h3><p>   TLS（Transport Layer Security）安全传输层协议，用于在两个通信应用程序之间提供保密性和数据完整性。</p>
]]></content>
      <categories>
        <category>技巧</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建blog</title>
    <url>/2023/06/01/hexo%E6%90%AD%E5%BB%BAblog/</url>
    <content><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><ol>
<li>下载：从官网下载windows版本的git,地址在下方<br><a class="link"   href="https://git-scm.com/download/win" >https://git-scm.com/download/win <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>OR我的分享：<a class="link"   href="https://www.123pan.com/s/eaG5Vv-yhth3.html" >https://www.123pan.com/s/eaG5Vv-yhth3.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>安装：双击安装，一直点击下一步即可</li>
</ol>
<h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><ol>
<li>下载：从官网下载windows版本的node.js安装包（.msi后缀），地址下方<br><a class="link"   href="https://nodejs.org/zh-cn/download/" >https://nodejs.org/zh-cn/download/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>安装：双击安装，一直点击下一步即可</li>
</ol>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><ol>
<li><p>在任意目录如桌面，点击鼠标右键，选择Git Bash Here这一项，打开git bash命令框（前提是git安装成功），如下图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/hexo%E6%90%AD%E5%BB%BAblog/FraxkCebAzx-dlPGsUmgcLZRR_Lj.png"
                      alt="鼠标右键"
                ></p>
</li>
<li><p>鼠标右键<br>在打开的命令窗内输入下面的命令进行安装<br><code>npm install hexo-cli -g</code></p>
</li>
<li><p>安装过后，输入 <code>hexo -v</code>，出现信息，则表示安装成功</p>
</li>
</ol>
<h2 id="初始化blog"><a href="#初始化blog" class="headerlink" title="初始化blog"></a>初始化blog</h2><ol>
<li><p>进入准备创建blog的目录，同样点击鼠标右键，打开git bash命令框，</p>
</li>
<li><p>执行一下命令进行初始化<br><code>hexo init myblog</code></p>
</li>
<li><p>就会自动创建一个名字为myblog目录，这时本地blog就已经创建好了。</p>
</li>
<li><p>进入blog目录，启动 blog<br><code>hexo server</code></p>
</li>
<li><p>在浏览器输入 <code>127.0.0.1:4000</code>就可以访问到刚刚创建好的blog了。</p>
</li>
</ol>
<h2 id="换模板"><a href="#换模板" class="headerlink" title="换模板"></a>换模板</h2><p>如果觉的自带的模板太难看。可以根据以下步奏更换模板，在<a class="link"   href="https://hexo.io/themes/" >官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 可以查看各种各样的模板，挑选自己喜欢的模板</p>
<ul>
<li>这里以 3-hexo 这款皮肤为例,进入皮肤的 github 官网，如3-hexo的网址复制它的url</li>
<li>进入 myblog 目录，打开 git bash 命令框，执行以下命令将皮肤下载到themes目录下<br><code>git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo</code></li>
<li>修改 myblog&#x2F;_config.yml 中的 theme: landscape 为 theme: 3-hexo</li>
</ul>
]]></content>
      <categories>
        <category>技巧</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>blog搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo新页面创建</title>
    <url>/2023/07/04/hexo%E6%96%B0%E9%A1%B5%E9%9D%A2%E5%88%9B%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="一、Hexo-新建页面："><a href="#一、Hexo-新建页面：" class="headerlink" title="一、Hexo 新建页面："></a>一、Hexo 新建页面：</h1><ol>
<li>新建页面</li>
<li>设置页面的类型</li>
<li>打开主题中的相关设置</li>
</ol>
<h1 id="二、举例：新建标签页"><a href="#二、举例：新建标签页" class="headerlink" title="二、举例：新建标签页"></a>二、举例：新建标签页</h1><ol>
<li><p>用命令行新建一个页面：（页面名称可以任意）</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure></div>


</li>
<li><p>打开<code> /source/tages/index.md</code>，设置其类型 type 值为<code>tages</code></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">title: tags</span><br><span class="line"><span class="built_in">date</span>: 2023-07-04 15:13:04</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>打开<code>/themes/主题/_config.yml</code>，把<code>tages</code>标签那项取消注释即可，下面的是已经取消注释了的。(大多数不需要)</p>
</li>
</ol>
<h3 id="对应格式"><a href="#对应格式" class="headerlink" title="对应格式"></a>对应格式</h3><table>
<thead>
<tr>
<th>page</th>
<th>type</th>
<th>内容</th>
</tr>
</thead>
<tbody><tr>
<td>tages</td>
<td>tages</td>
<td>标签</td>
</tr>
<tr>
<td>categories</td>
<td>categories</td>
<td>分类</td>
</tr>
<tr>
<td>archives</td>
<td>archives</td>
<td>归档</td>
</tr>
<tr>
<td>about</td>
<td>about</td>
<td>关于我(自我介绍)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>技巧</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>javaweb疑难杂症1</title>
    <url>/2023/07/25/javaweb%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%871/</url>
    <content><![CDATA[<center><font color = red size = 8 face = 楷体>javaweb疑难杂症</font></center>

<p><a href="wmhwiki.cn/class/javatest2/">学长的任务要求</a></p>
<p><a class="link"   href="https://github.com/lihuibear4/TEXT002" >javaweb小测 我的代码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//出错</span></span><br><span class="line">System.out.println(<span class="string">&quot;输入要修改的课程id&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">suid</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;输入课程新名称&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">new_name</span> <span class="operator">=</span> sc.nextLine();</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/7%E6%9C%8825%E6%97%A5.gif"
                      alt="7月25日"
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;输入要修改的课程id&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">suid</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">sc.nextLine();<span class="comment">//用此方法抵消（吞）掉回车符；</span></span><br><span class="line">System.out.println(<span class="string">&quot;输入课程新名称&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">new_name</span> <span class="operator">=</span> sc.nextLine();</span><br></pre></td></tr></table></figure></div>

<p>注意：在使用<code>Scanner</code>类获取用户输入时，<code>sc.nextInt()</code>方法会将用户输入的整数值读取，但留下了一<strong>个回车符（newline）</strong>。因此，当接下来使用<code>sc.nextLine()</code>方法获取课程新名称时，会直接读取到这个回车符，而不是用户输入的实际内容。</p>
<h2 id="代码重复的解决1"><a href="#代码重复的解决1" class="headerlink" title="代码重复的解决1"></a>代码重复的解决1</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaTPassword</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">JdbcTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(jdbcUtils.getDataSource());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">newpassword</span><span class="params">(String username, String password, String profession)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入当前密码&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">oldpassword</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!oldpassword.equals(password) &amp;&amp; flag &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            flag++;</span><br><span class="line">            System.out.println(<span class="string">&quot;密码错误，还剩&quot;</span> + (<span class="number">3</span> - flag) + <span class="string">&quot;次尝试&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (flag &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请重新输入密码：&quot;</span>);</span><br><span class="line">                oldpassword = sc.nextLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (oldpassword.equals(password)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入新的密码&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">new_password</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;请再次输入新的密码&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">new_password2</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (new_password.equals(new_password2)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update &quot;</span> + profession + <span class="string">&quot; set password = ? where username = ?&quot;</span>;</span><br><span class="line">                template.update(sql, new_password, username);</span><br><span class="line">                System.out.println(<span class="string">&quot;修改成功，请返回上一界面重新登录&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (profession.equals(<span class="string">&quot;student&quot;</span>)) &#123;</span><br><span class="line">                    studentLogin();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (profession.equals(<span class="string">&quot;teacher&quot;</span>)) &#123;</span><br><span class="line">                    teacherLogin();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您前后输入的密码不一致，不可修改&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (profession.equals(<span class="string">&quot;student&quot;</span>)) &#123;</span><br><span class="line">                    studentmenu(username, password);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (profession.equals(<span class="string">&quot;teacher&quot;</span>)) &#123;</span><br><span class="line">                    teachermenu(username, password);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;失败次数过多，返回上一界面&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (profession.equals(<span class="string">&quot;student&quot;</span>)) &#123;</span><br><span class="line">                studentLogin();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (profession.equals(<span class="string">&quot;teacher&quot;</span>)) &#123;</span><br><span class="line">                teacherLogin();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>技巧</category>
        <category>后端</category>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JAVAWeb</tag>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>one-hot(独热编码)</title>
    <url>/2023/08/01/one-hot-%E7%8B%AC%E7%83%AD%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<h1 id="one-hot-独热编码"><a href="#one-hot-独热编码" class="headerlink" title="one hot (独热编码)"></a>one hot (独热编码)</h1><ul>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/one-hot-%E7%8B%AC%E7%83%AD%E7%BC%96%E7%A0%81/image-20230801085741897.png"
                      alt="one-hot编码示例"
                ></p>
</li>
<li><p>维度 &#x3D; 词库大小</p>
</li>
<li><p>频率大于1的标记为1</p>
</li>
</ul>
<ol>
<li>维度灾难：One-Hot编码会为每个不同的类别创建一个<strong>新的二进制特征</strong>。如果原始数据具有大量的类别，那么编码后会导致<strong>高维稀疏的特征向量</strong>，这就是所谓的”维度灾难”。高维度的特征向量会<strong>增加计算成本</strong>，并且可能导致模型过拟合。 </li>
<li>特征相关性问题：由于One-Hot编码为每个类别创建一个独立的特征，这些<strong>特征之间是完全独立的</strong>。这可能会导致特征之间存在高度相关性的问题。例如，在某个分类特征的One-Hot编码中，如果一个样本被编码为[1, 0, 0]，那么它就不可能被编码为[0, 1, 0]或[0, 0, 1]。这会导致<strong>特征之间的冗余</strong>，并可能<strong>影响模型的性能</strong>。 </li>
<li>数据稀疏性：当数据集中的<strong>类别很多</strong>时，One-Hot编码会导致数据集中的大部分特征都是零。这种<strong>数据的稀疏性</strong>会带来<strong>计算和存储上的挑战</strong>，因为大量的零值需要被处理和存储。此外，稀疏性还可能导致模型的训练过程变得困难，需要更多的数据来准确估计参数。 </li>
<li>对类别信息的处理不足：One-Hot编码将<strong>每个类别视为相互独立的特征</strong>，而<strong>忽略了类别之间的任何潜在关系或顺序</strong>。这对于某些任务可能是不合理的。例如，在自然语言处理中，词汇的顺序通常是重要的，但One-Hot编码无法捕捉到这种顺序信息。</li>
</ol>
]]></content>
      <categories>
        <category>计算机前沿</category>
        <category>文献</category>
        <category>相关知识</category>
      </categories>
      <tags>
        <tag>one-hot</tag>
        <tag>词向量</tag>
      </tags>
  </entry>
  <entry>
    <title>个人总结2022-2023-1</title>
    <url>/2023/07/16/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%932022-2023-1/</url>
    <content><![CDATA[<center><font color = black size = 7 >大一上学期的自述</font>
</center>

<p><strong>怎样总结我的大一上呢？</strong></p>
<p><strong>或许</strong></p>
<p><font color = red size = 5 ><del>碌碌无为</del><br>忙忙碌碌<br>随大流</font></p>
<p><font size = 5 >or</font></p>
<p><font color = green size = 5 >思念过往<br>羡慕他人爱情与自由</font></p>
<p>​		我以为，我是爱读书的人，在高中的压抑环境下，读了史铁生，读了余秋雨，读了从容淡定过一生，我认为的大学，在专业课与读书，在浪漫，在生命，然而，不是这样……</p>
<p>​		我鄙弃无脑爽文，鄙弃没有营养毫无艺术的部分网络小说，然而，无所事事的生活里，接受了他们，让无意义成了意义，我蛮颓废的。</p>
<p>​		较于他人，在部分上，我是优秀的，成为了班长，迈出自己勇敢的一步，扎实学习，GPA 3.59，班级第二，专业16；较于自己，我成为了自己不喜欢的样子，不爱了火影，但我始终找不到理由，找不到原因……</p>
<p>​		我是孤独的，少有人懂我。</p>
<p>​		有幸，遇到了那一群老师，导员，感谢我的导员张晋老师的培养，王丽娜、李晨、武春方、康家慧、李蓓、高树芳、刘旭、张彩霞、郜文华等老师的教导。</p>
<p>​		很感谢王丽娜老师引导我参加老师的项目，认识了何东彬老师，然后逐步认识了，浩书梦、刘翠学姐，王铭颢学长，后来也认识了其他的的同学，学姐学长，和他们的相处十分快乐，一起学习的日子，一起为了比赛努力的日子真的很快乐，这是我为数不多的幸福。</p>
<p>那么，接下来，我们一起努力……</p>
<p><font  size = 6><a href="https://lihuibear4.github.io/about/">返回关于页面</a></font></p>
]]></content>
      <categories>
        <category>慧说</category>
        <category>个人总结</category>
      </categories>
      <tags>
        <tag>个人总结</tag>
      </tags>
  </entry>
  <entry>
    <title>个人总结2022-2023-2</title>
    <url>/2023/07/16/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%932022-2023-2/</url>
    <content><![CDATA[<center><font color = black size = 7 >大一下学期的自述</font>
</center>
​		没有了疫情，这学期很开心，不用大中午就去排队核酸，不用担心正常的开学与放假。

<p>​		生活好像是美好的，我又认识了好多的学长、学姐，老师，参加了比赛，但依旧……</p>
<p>​		……</p>
<p>​		平平淡淡学完了知识，GPA下滑到3.48，目前拿了两个奖，发了软著，参加了算法社，在准备算法比赛，这时，才知道学习的意义，才知道自己的不足。</p>
<p>​		或许是那一句：都好好复习吧。</p>
<p>​		计划了却只能……去往未来……</p>
<p>​		参加了项目组，每天学习，很充实。</p>
<p>​		目前计划，早起，学习，总结日常；</p>
<p>​		整个世界很虚幻，不知道现在是不是在做梦，但是……</p>
<p>​		明天见！！！</p>
<p><font  size = 6><a href="https://lihuibear4.github.io/about/">返回关于页面</a></font></p>
]]></content>
      <categories>
        <category>慧说</category>
        <category>个人总结</category>
      </categories>
      <tags>
        <tag>个人总结</tag>
      </tags>
  </entry>
  <entry>
    <title>但愿人长久</title>
    <url>/2023/08/28/%E4%BD%86%E6%84%BF%E4%BA%BA%E9%95%BF%E4%B9%85/</url>
    <content><![CDATA[<h2 id="鹦鹉"><a href="#鹦鹉" class="headerlink" title="鹦鹉"></a>鹦鹉</h2><p>家中养了多日的鹦鹉死了，难过许久，朋友说，可能它之前就有着病，倒是安慰我的借口，许是我每天熬夜扰了它的清闲，但无论怎样，它是死在我手上的，我对不住它，很是自责</p>
<p>心，如载重山。是时候，步出家门，去感受外面的世界，尽管悲伤难以消散，但也许在阳光下，心情能稍稍地得到舒缓。在外面的世界里，或许会有些许温暖，将我从自责中解脱出来。或许，在那片广袤天地间，我能够找到一丝释然，让那份愧疚慢慢随风飘散……</p>
<p>我熟悉这座城市的每一个角落，值得怀念，值得伤感，几次走到那些更加熟悉的街角，回忆仿佛在眼前展开，我能模糊地感受到过去的种种片段，它们如碎片般存在着。</p>
<p>然而，时光已逝，那些曾经的瞬间已成为过去。我们各自演绎着新的生活，迎来了新的故事，有些事也早已改变。尽管如此，我深信在这个城市的每个角落，都还保存着我们曾经的足迹，那些美好的瞬间不会轻易被遗忘。</p>
<p>我们无法回到过去，但我们仍然可以怀念，有些事我不说，但不代表我忘了。</p>
<p>城市是我们的见证者，而每一段经历都是我们生命中的重要组成部分。让我们在怀念与伤感中，继续前行，迎接更多未知的日子，为自己创造新的故事。</p>
<h2 id="城市的傲慢"><a href="#城市的傲慢" class="headerlink" title="城市的傲慢"></a>城市的傲慢</h2><p>城市傲慢，与我毫无瓜葛。我渐渐熟稔于这座城市，记得每个角落，仿佛在岁月的雕刻下，镶嵌了自己的足迹。在这繁华的背后，我怀抱着一份淡然的热爱，却偶尔也愿意逃离这纷纷扰扰。</p>
<p>我想远离这一切，只是无法言说。我心中默诵着，愿时光静好，人生长久。在这个城市里，他们的快乐我始终无法理解，他们的嬉戏为何如此畅快。</p>
<p>这是一个充满悲伤和孤独的城市，每一颗心灵都在默默地挣扎。在这个城市的喧嚣中，我似乎找不到他们的快乐源头，只看到了漫无边际的追逐。</p>
<p>城市，从未真正属于过我，而我亦从未真正属于过它。我的心在这座城市里游走，时而迷失，时而清醒。在这城市的喧嚣中，我只是一个默默地存在着的过客，留下一段段匆匆的印记，然后继续前行。</p>
<h2 id="但愿人长久"><a href="#但愿人长久" class="headerlink" title="但愿人长久"></a>但愿人长久</h2><p>走走停停，恰是暑假周末，看到那些初中生，高中生结伴的玩耍，我不知道他们为何快乐……其中不乏许多情侣。</p>
<p>也许，他们的世界还停留在幼稚的想法和纯真的情感中。而我呢，或许因为种种经历而变得越发成熟。也许，他们才是真正的少年，充满了活力与梦想，而我则在岁月中渐渐感受到世事的沧桑。我无法预知他们的未来，但我诚挚地祝愿他们，无论前方的道路如何崎岖，都能怀揣着初心，勇往直前。</p>
<p>我不知道他们的结局如何，许是对过往的遗憾，真心希望他们永远，一直一直，我无法干预他们的命运，只能默默说：“但愿人长久”。</p>
<p>而后，路过一处小摊，宠物们（猫，狗，鼠，鸟）被关在笼子里，人们用套圈的方式获得，它们眼神、姿态以及不知所措的情绪让我想带走它们，但，我没本事，我照顾不好它们……</p>
<p>我可以理解，宠物们被放在宠物店，等待着有缘的主人前来选择，但不知为何，我无法理解它们被放在笼子里套走，虽然我明白它们并未遭受虐待，因为没人会套那些不漂亮的，不可爱的。</p>
<p>回忆起近十年前的那个场景，那是赶庙会，有也类似的活动。当时的情景相似，情感却很不同。我记得朋友当时套到一只可爱的荷兰猪，而我为他感到高兴。虽然我无法预知那只荷兰猪后来的遭遇，但我愿意相信，它或许在朋友的呵护下过上了宁静的晚年。</p>
<p>转瞬间我发现，今日的我已难以理解曾经的自己。曾经的想法、感受，似乎在岁月的冲刷下变得模糊，宛如远处的风景，逐渐渐行渐远。</p>
<p>看着那些笼中之兽，我又想到了那只鹦鹉，但，无论是谁，都过去了，我什么都做不了，只是说：“小家伙们，你们也长久”。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>夜里难眠，那些生灵的眼神在我心头荡漾，我知道，我得写一些什么。</p>
<p>世界上所有的生灵，所有被赋予灵魂的事物，但愿长久。</p>
<div align =right><font face=楷体>但愿人长久</font></div>

]]></content>
      <categories>
        <category>慧说</category>
        <category>日常</category>
        <category>日常思考</category>
      </categories>
      <tags>
        <tag>意义</tag>
      </tags>
  </entry>
  <entry>
    <title>关于大学</title>
    <url>/2023/07/31/%E5%85%B3%E4%BA%8E%E5%A4%A7%E5%AD%A6/</url>
    <content><![CDATA[<center><font face = 楷体 size = 7>如何度过我们的大学</font></center>

<h1 id="什么是大学"><a href="#什么是大学" class="headerlink" title="什么是大学"></a>什么是大学</h1><ol>
<li>大学生活是一个丰富多彩且宝贵的阶段，它为你提供了很多学习、成长和探索的机会。</li>
<li>最重要的是，尽情享受大学生活的过程，珍惜这段特殊时光，让它成为你人生中宝贵的回忆。</li>
</ol>
<h1 id="我们要做到什么"><a href="#我们要做到什么" class="headerlink" title="我们要做到什么"></a>我们要做到什么</h1><ol>
<li>学业优先：确保将学习置于首位。认真完成学业，按时参加课程，积极与教授和同学交流讨论，尽可能掌握所学知识。合理安排时间，克服拖延症，保持学习的动力。</li>
<li>平衡生活：虽然学业重要，但也要保持生活的平衡。多参与校园社交活动、兴趣小组、体育运动或志愿者服务等，丰富自己的大学生活，培养多方面的技能。</li>
<li>建立人际关系：和室友、同学、教授和校友建立积极的关系。这些人都可能成为你未来的人生导师、合作伙伴或朋友。</li>
<li>培养兴趣：大学是发现兴趣和激发潜力的好时机。尝试新的学科领域、爱好和活动，发现自己的热爱并努力追求。</li>
<li>健康优先：保持良好的身体和心理健康很重要。保持规律作息，均衡饮食，多进行体育锻炼，寻求必要的帮助和支持，以维持身心健康。</li>
<li>学习实践：除了课堂学习，尝试参加实习、实践项目或研究机会，这有助于将理论应用于实践，并提升职业竞争力。</li>
<li>职业规划：不要等到大学毕业时再开始考虑职业规划。尽早探索职业领域、了解行业要求，参加职业展览会和招聘活动，制定个人职业发展计划。</li>
<li>财务管理：学会合理规划和管理财务，避免不必要的开支，树立储蓄意识，避免财务问题影响学业和生活。</li>
<li>提升技能：利用大学时间学习一些实用技能，如沟通能力、领导力、外语等，这些技能在未来的职业生涯中将非常有用。</li>
<li>拓展视野：积极参与文化交流和国际交流活动，增加对不同文化和观念的理解，拓展自己的视野。</li>
</ol>
<h1 id="大学里的禁忌"><a href="#大学里的禁忌" class="headerlink" title="大学里的禁忌"></a>大学里的禁忌</h1><ol>
<li>不摆烂</li>
<li>不跟风，有目标，有自己的主见</li>
<li>不要恋爱脑，不要为了恋爱舍弃一切，要与自己和解，与他人沟通</li>
</ol>
<h2 id="对于恋爱脑的见解"><a href="#对于恋爱脑的见解" class="headerlink" title="对于恋爱脑的见解"></a>对于恋爱脑的见解</h2><p>恋爱脑是一个非正式的术语，用来形容在恋爱过程中，人们可能会出现一些特定的心理和生理变化。这些变化可能会导致恋爱者表现出一些特殊的行为或情绪。</p>
<p>在恋爱过程中，人们会经历许多激情和浪漫的时刻，这时大脑中会释放一些化学物质，比如多巴胺、催产素和催产素等。这些化学物质会导致一系列生理和心理的反应。</p>
<p>我认为恋爱脑，是对一个人，对一段爱情的珍惜与重视，是世间最后的真诚之一，是责任，是期许……<br>他们是清醒的！</p>
<p>而那些，在爱情中迷茫的人，不清醒的人，自诩恋爱脑的人实际上是恋爱无脑<br>都应该醒醒，与自己和解，去爱世界！</p>
]]></content>
      <categories>
        <category>慧说</category>
        <category>日常</category>
        <category>日常思考</category>
      </categories>
      <tags>
        <tag>大学生活</tag>
      </tags>
  </entry>
  <entry>
    <title>关于孤独</title>
    <url>/2023/08/02/%E5%85%B3%E4%BA%8E%E5%AD%A4%E7%8B%AC/</url>
    <content><![CDATA[<ul>
<li><font face = 华文仿宋 size = 5>        关于孤独，我想有文学意义上的也有生活层面的，在马尔克斯的《百年孤独》问世以后，孤独成为作家们最求和营造的境界，人类想保持精神的独立性便不可避免地要封闭自己的内心，拒绝或多或少与他人的交流而无交流即孤独，一交流则通俗，而人类也就在这两种状态间跳来跳去，而生活层面上的孤独，在某种意义上也是生活的常态，甚至可以说孤独也是一种幸福的体验，在孤独中思考，在孤独中创造，在孤独中领会人生的意义，人是渴望与人交流被理解的，但知音往往难求，于是便失望，便痛苦，便陷入孤独，但人又总是能与人沟通的，于是又陷入喧嚣，陷入麻烦被伤害或伤害别人，关于贫穷与文学创作也不过是一种体验而已，生活千姿百态，文学包罗万象，尽量地体验一些作品的内涵，就深厚宽广一些。   <div align = right>——莫言</div> </font></li>
</ul>
]]></content>
      <categories>
        <category>慧说</category>
        <category>日常</category>
        <category>日常思考</category>
      </categories>
      <tags>
        <tag>孤独</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2023/07/16/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<table><tr><td bgcolor=#DCDCDC><center><font color = black size = 7 background= red>动态规划</font></center></td></tr></table>

<p><strong>动态规划</strong> 就是:给定一个问题，我们把它拆成一个个<strong>子问题</strong>，直到子问题可以直接解决。然后把子问题的答案保存起来，以<strong>减少重复计算</strong>。再根据子问题答案反推，得出原问题解的一种方法。</p>
<h1 id="1-跳台阶"><a href="#1-跳台阶" class="headerlink" title="1.跳台阶"></a>1.跳台阶</h1><p>一个楼梯共有 n 级台阶，每次可以走一级或者两级，问从第 0 级台阶走到第 n 级台阶一共有多少种方案。</p>
<h2 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure>

<h2 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//(斐波那契数列)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	cout&lt;&lt;<span class="built_in">fun</span>(n)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>)  <span class="keyword">return</span> <span class="number">2</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fun</span>(n - <span class="number">1</span>) + <span class="built_in">fun</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//for搜索，直接算，暴力法</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">20</span>], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    a[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">15</span>; i++) </span><br><span class="line">        a[i] = a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>];</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    cout&lt;&lt;a[n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><strong>f(n)&#x3D;f(n-1)+f(n-1)</strong></p>
<h1 id="2-杨老师的照相排列"><a href="#2-杨老师的照相排列" class="headerlink" title="2.杨老师的照相排列"></a>2.杨老师的照相排列</h1><p>有 N个学生合影，站成左端对齐的 k 排，每排分别有 N<del>1</del>,N<del>2</del>,…N<del>k</del> 个人。 (N<del>1</del>≥N<del>2</del>≥…≥N<del>k</del>)</p>
<p>第 1排站在最后边，第 k 排站在最前边。</p>
<p>学生的身高互不相同，把他们从高到底依次标记为 1,2,…,N.</p>
<p>在合影时要求每一排从左到右身高递减，每一列从后到前身高也递减。</p>
<p>问一共有多少种安排合影位置的方案？</p>
<p>下面的一排三角矩阵给出了当 N&#x3D;6,k&#x3D;3,N<del>1</del>&#x3D;3,N<del>2</del>&#x3D;2,N<del>3</del>&#x3D;1时的全部 16种合影方案。注意身高最高的是 1，最低的是 6。</p>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">123 123 124 124 125 125 126 126 134 134 135 135 136 136 145 146</span><br><span class="line">45  46  35  36  34  36  34  35  25  26  24  26  24  25  26  25</span><br><span class="line">6   5   6   5   6   4   5   4   6   5   6   4   5   4   3   3</span><br></pre></td></tr></table></figure></div>

<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入包含多组测试数据。</p>
<p>每组数据两行，第一行包含一个整数 k 表示总排数。</p>
<p>第二行包含 k 个整数，表示从后向前每排的具体人数。</p>
<p>当输入 k&#x3D;0 的数据时，表示输入终止，且该数据无需处理。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>每组测试数据输出一个答案，表示不同安排的数量。</p>
<p>每个答案占一行。</p>
<h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><p>1≤k≤5 学生总人数不超过 30 人。</p>
<h2 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">30</span><br><span class="line">5</span><br><span class="line">1 1 1 1 1</span><br><span class="line">3</span><br><span class="line">3 2 1</span><br><span class="line">4</span><br><span class="line">5 3 3 1</span><br><span class="line">5</span><br><span class="line">6 5 4 3 2</span><br><span class="line">2</span><br><span class="line">15 15</span><br><span class="line">0</span><br></pre></td></tr></table></figure></div>

<p>输出样例：</p>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">16</span><br><span class="line">4158</span><br><span class="line">141892608</span><br><span class="line">9694845</span><br></pre></td></tr></table></figure></div>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span>  LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">31</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">LL f [N][N][N][N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (cin&gt;&gt;n,n)&#123;</span><br><span class="line">		<span class="type">int</span> s[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span> ;i &lt; n; i++)&#123;</span><br><span class="line">			cin&gt;&gt;s[i]; </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">		</span><br><span class="line">		f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> a = <span class="number">0</span> ;a &lt;=s[<span class="number">0</span>];a++) &#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> b = <span class="number">0</span> ;b &lt;= <span class="built_in">min</span>(a,s[<span class="number">1</span>]);b++)&#123;</span><br><span class="line">					<span class="keyword">for</span>(<span class="type">int</span> c = <span class="number">0</span> ;c &lt;= <span class="built_in">min</span>(b,s[<span class="number">2</span>]);c++)&#123;</span><br><span class="line">						<span class="keyword">for</span>(<span class="type">int</span> d = <span class="number">0</span> ;d &lt;= <span class="built_in">min</span>(c,s[<span class="number">3</span>]);d++)&#123;</span><br><span class="line">							<span class="keyword">for</span>(<span class="type">int</span> e = <span class="number">0</span> ;e &lt;= <span class="built_in">min</span>(d,s[<span class="number">4</span>]);e++)&#123;</span><br><span class="line">								LL &amp;v = f[a][b][c][d][e];</span><br><span class="line">								<span class="keyword">if</span>(a&amp;&amp;a<span class="number">-1</span>&gt;=b) v+=f[a<span class="number">-1</span>][b][c][d][e]; </span><br><span class="line">								<span class="keyword">if</span>(b&amp;&amp;b<span class="number">-1</span>&gt;=c) v+=f[a][b<span class="number">-1</span>][c][d][e]; </span><br><span class="line">								<span class="keyword">if</span>(c&amp;&amp;c<span class="number">-1</span>&gt;=d) v+=f[a][b][c<span class="number">-1</span>][d][e]; </span><br><span class="line">								<span class="keyword">if</span>(d&amp;&amp;d<span class="number">-1</span>&gt;=e) v+=f[a][b][c][d<span class="number">-1</span>][e]; </span><br><span class="line">								<span class="keyword">if</span>(e) v+=f[a][b][c][d][e<span class="number">-1</span>]; </span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">		cout&lt;&lt;f[s[<span class="number">0</span>]][s[<span class="number">1</span>]][s[<span class="number">2</span>]][s[<span class="number">3</span>]][s[<span class="number">4</span>]]&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>题目</category>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我的一切</title>
    <url>/2023/01/01/%E5%85%B3%E4%BA%8E%E6%88%91%E7%9A%84%E4%B8%80%E5%88%87/</url>
    <content><![CDATA[<h1 id="关于我的一切"><a href="#关于我的一切" class="headerlink" title="关于我的一切"></a>关于我的一切</h1><h3 id="木傀"><a href="#木傀" class="headerlink" title="木傀"></a>木傀</h3><h2 id="梦中"><a href="#梦中" class="headerlink" title="梦中"></a>梦中</h2><p>所有的诗歌都是一种</p>
<p>花儿也是一样</p>
<p>满天星，四处风</p>
<p>也是一颗，一股——</p>
<p>只不过重复几次</p>
<p>往事细拆</p>
<p>缘也是场梦</p>
<p>而我们</p>
<p>都在梦中</p>
<h2 id="远方"><a href="#远方" class="headerlink" title="远方"></a>远方</h2><p>与所有诗人一般</p>
<p>来自远方</p>
<p>凡尘世走走素人的爱恋</p>
<p>然后</p>
<p>在归去的路途</p>
<p>独自一人</p>
<p>黄泥路再回首人类过往</p>
<p>又留恋红尘纷繁</p>
<h2 id="短命王朝"><a href="#短命王朝" class="headerlink" title="短命王朝"></a>短命王朝</h2><p>想着有天，</p>
<p>我是位皇帝</p>
<p>雄兵壮马，至高权力</p>
<p>我要修筑，要残暴</p>
<p>征兵买马</p>
<p>要让我的王国成为短命王朝</p>
<p>背负历史骂名</p>
<p>为他献出自己的一切</p>
<p>生前死后的一切尊严</p>
<h2 id="放牧"><a href="#放牧" class="headerlink" title="放牧"></a>放牧</h2><p>我是位牧人</p>
<p>打理着我的牛羊</p>
<p>从朝到晚</p>
<p>从南到北</p>
<p>我是位牧人</p>
<p>喂饮群星</p>
<p>赶至银河</p>
<p>尝尝甘甜的泉水</p>
<p>消除一天的劳疾</p>
<p>我躺在云端</p>
<p>放牧一群诗篇</p>
<p>作为牧人</p>
<p>我躺在云端</p>
<h2 id="云端"><a href="#云端" class="headerlink" title="云端"></a>云端</h2><p>——赠九月</p>
<p>我躺在云端</p>
<p>在九月的今天</p>
<p>放牧着一群诗篇</p>
<p>这满天的云层</p>
<p>都是我的牧场高歌我们草原的勇士</p>
<p>唱喝</p>
<p>自然而生</p>
<p>在自由中奔闯</p>
<p>云端上</p>
<p>我独自放牧</p>
<p>并祈愿晴朗的天气</p>
<p>我在云端</p>
<p>放牧我的诗篇</p>
<p>讴歌我的岁月</p>
<p>2019.09.12</p>
<h2 id="墓地"><a href="#墓地" class="headerlink" title="墓地"></a>墓地</h2><p>墓地离我不远</p>
<p>就在脚下</p>
<p>每一寸</p>
<p>都是我沉眠的场所</p>
<p>这里</p>
<p>我听得到</p>
<p>世界的呼吸，森林的心跳</p>
<p>还有人类喳喳的碎语</p>
<p>我感觉得到</p>
<p>人群的寂寞，夜晚的哀歌</p>
<p>就像我一样</p>
<p>冰冷</p>
<p>尽管，每一寸土地都是我的墓地</p>
<p>2019.10.26</p>
<h2 id="对你说快乐"><a href="#对你说快乐" class="headerlink" title="对你说快乐"></a>对你说快乐</h2><p>哥哥，对你说快乐</p>
<p>在这个夜里</p>
<p>祝你快乐</p>
<p>愿你幸福</p>
<p>自在，没有烦恼</p>
<p>不必在意谁与谁的看法</p>
<p>在这个夜里</p>
<p>我寻找你的影痕</p>
<p>希望它一直明亮</p>
<p>也不至于孤独</p>
<p>哥哥，你如星星般遥远</p>
<p>但，在这个夜里</p>
<p>无论远近</p>
<p>抬头便可见你的闪烁</p>
<p>或许是亿万年的巧合</p>
<p>——你与我的相遇</p>
<p>在这个夜里</p>
<p>对你说快乐</p>
<p>祝你幸福</p>
<p>2019.11.1</p>
<h2 id="山外"><a href="#山外" class="headerlink" title="山外"></a>山外</h2><p>山是屋外的山</p>
<p>水是山外的水</p>
<p>大风车转着</p>
<p>我是屋内的人</p>
<p>各自孤独</p>
<p>2021.01.07</p>
<h2 id="光"><a href="#光" class="headerlink" title="光"></a>光</h2><p>世间有光，便不会黑暗</p>
<p>爱情总在隐秘处熠熠闪光</p>
<p>却再也无法照耀到那个爱的人</p>
<p>世界到处是阳光，我在这里独自闯</p>
<p>来往的过客你好啊</p>
<p>这也梦幻，如此神奇</p>
<p>神奇的就像，我流进大海的心扉</p>
<p>谁又解了谁的疑惑，答案是更多疑惑</p>
<p>我啊，拒接爱与梦的选择</p>
<p>夜晚的黎明 </p>
<p>会在寂静中说不</p>
<p>愿天空比我更空</p>
<p>海洋比我更深</p>
<p>世界比我更加阔大</p>
<p>愿我们永无未来</p>
<p>只留现在</p>
<p>可，已无现在</p>
<p>你永远在我的回忆里闪闪发光</p>
<p>从此便成为唯一的光</p>
<p>如此也好</p>
]]></content>
      <categories>
        <category>慧说</category>
        <category>日常</category>
        <category>日常生活</category>
        <category>诗歌</category>
      </categories>
      <tags>
        <tag>我的诗</tag>
      </tags>
  </entry>
  <entry>
    <title>图灵算法协会01</title>
    <url>/2023/06/05/%E5%9B%BE%E7%81%B5%E7%AE%97%E6%B3%95%E5%8D%8F%E4%BC%9A01/</url>
    <content><![CDATA[<h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><h4 id="大致题意"><a href="#大致题意" class="headerlink" title="大致题意"></a>大致题意</h4><p>有n名员工（1号是老板自己） k次讨论 每次讨论员工都有自己的意见 在讨论前老板可以 让一个人直接滚蛋（老板不能自己t自己）</p>
<p> 对于一次讨论 人多的留下 平局的话都退出</p>
<p>找最后剩下员工的最大数</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>不管怎么讨论 老板肯定是不能走的 因此老板给出的意见才是正确意见 直接找有几个 员工和老板一个意见就行了</p>
<h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="function">vector&lt;string&gt; <span class="title">s</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n ; i++) cin &gt;&gt; s[i];</span><br><span class="line">	cout &lt;&lt; <span class="built_in">count</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(),s[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span>(T--) <span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><h4 id="大致题意-1"><a href="#大致题意-1" class="headerlink" title="大致题意"></a>大致题意</h4><p>给一个n 构造一个数列a (1 &lt;&#x3D; ai &lt;&#x3D; n) 不重复 要求构造的数列中 任何子数列的和都不能被子数列的长度整除 也就是区间l - r 的数的和 不能被 r - l + 1 整除 （1 &lt;&#x3D; l &lt; r &lt;&#x3D; n）</p>
<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>首先 初始数组 肯定是 1 2 3 .. n</p>
<p>n &#x3D; 1的时候 数列中只有 1 个数  显而易见 答案就是1</p>
<p>然后讨论 n 为奇数的时候 对于最大的区间 1 - n 和为 （1 + n） *  n  &#x2F; 2 可以被n整除 所以无论怎么构造都不会成功</p>
<p>n 为 偶数的时候 分为两种情况</p>
<p>l 和 r 有不同的奇偶性 他的和 为 （r - l + 1)(l + r) &#x2F; 2 不可以被 r - l + 1 整除 满足题意</p>
<p>l 和 r 有相同的奇偶性 和为 （r - l + 1)(l + r) &#x2F; 2 可以被 r - l + 1 整除 不满足题意 但是 sum - 1 或 sum + 1满足题意 因为r - l + 1 &gt;&#x3D; 2 ,因此我们需要让区间最少3内的和 + 1 或者 -1 容易想到 只需要交换相邻的数 就可以构造出满足题意的数组</p>
<p> code</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">		cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n % <span class="number">2</span>)&#123;</span><br><span class="line">		cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n ; i++)</span><br><span class="line">			cout &lt;&lt; (i ^ <span class="number">1</span>) + <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">// 异或</span></span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span>(T--) <span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="CF-868"><a href="#CF-868" class="headerlink" title="CF 868"></a>CF 868</h2><h3 id="A-1"><a href="#A-1" class="headerlink" title="A"></a>A</h3><h4 id="大致题意-2"><a href="#大致题意-2" class="headerlink" title="大致题意"></a>大致题意</h4><p>给两个数 n,k 构造一个长度为n只包含1，-1 的数列 要求 a[i] * a[j] &#x3D;&#x3D; 1的个数 为k （1 &lt;&#x3D; i &lt; j &lt;&#x3D; n）</p>
<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>直接枚举有多少1 就行 构造形似 1111-1-1-1-1 这样的数列即可</p>
<h4 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h4><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="comment">// 直接枚举 1的数量</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span> ; k &lt;= n ; k++)&#123;</span><br><span class="line">        <span class="comment">//等差数列公式求 数列的value</span></span><br><span class="line">		<span class="type">int</span> res = k * (k - <span class="number">1</span>) / <span class="number">2</span>  + (n - k) * (n - k - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(res == m)&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n ; i++)</span><br><span class="line">				cout &lt;&lt; (i &lt; k ? <span class="number">1</span> : <span class="number">-1</span>) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span>(T--) <span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="B-1"><a href="#B-1" class="headerlink" title="B"></a>B</h3><h4 id="大致题意-3"><a href="#大致题意-3" class="headerlink" title="大致题意"></a>大致题意</h4><p>给一个长度为n的数列 执行0或多次的交换操作 或者 执行一次 预前交换 在执行普通的交换操作</p>
<p>ps： 普通操作的交换有条件的：只能对|i - j| &#x3D; k 的两个位置交换</p>
<p>如果 是第一种 能排好序的话 就输出0 第二种的话 输出1</p>
<p>如果无论如何都不能的话 输出-1</p>
<h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>普通操作就相当于 每次移动固定的 m 个长度 如果 当前数的位置 到 排好序的位置 % m !&#x3D; 0 的话 就无法只通过普通排序来完成</p>
<p>预前交换 可以随意交换两个数 所以 如果当前的数列通过普通排序 排序后，如果有问题肯定会有至少两个位置的数 不在原本的位置 这时候可以通过预前交换来解救 但是只能执行一次</p>
<p>所以只需要统计普通排序后 有多少数 回不到原本的位置即可</p>
<h4 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h4><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n ; i++)&#123;</span><br><span class="line">		<span class="type">int</span> x;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">		x--;</span><br><span class="line">		cnt += (x % k != i % k); <span class="comment">// 如果同余的话 代表 x 从 i 回到原本x 的位置的距离是m的倍数 d % m == 0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 如果有两个以上的数的不能通过普通的交换的话 初始交换只能最多交换两个数 也就是说最少有一个数不能回到原本你都位置</span></span><br><span class="line">	<span class="keyword">if</span>(cnt &gt; <span class="number">2</span>)&#123;</span><br><span class="line">		cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; cnt / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span>(T--) <span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="CF-866"><a href="#CF-866" class="headerlink" title="CF 866"></a>CF 866</h2><h3 id="A-2"><a href="#A-2" class="headerlink" title="A"></a>A</h3><h4 id="大致题意-4"><a href="#大致题意-4" class="headerlink" title="大致题意"></a>大致题意</h4><p>给一个由^-组成的字符串 对于每一个_ 都要变成 ^ _ ^ 求添加的 ^的数量</p>
<h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>见代码</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	string s;</span><br><span class="line">	cin &gt;&gt; s;</span><br><span class="line">	<span class="keyword">if</span>(s == <span class="string">&quot;^&quot;</span>)&#123;</span><br><span class="line">		cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 处理边界</span></span><br><span class="line">	s = <span class="string">&quot;^_&quot;</span> + s + <span class="string">&quot;_^&quot;</span>;</span><br><span class="line">	n = s.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; p;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n ; i++)</span><br><span class="line">		<span class="keyword">if</span>(s[i] == <span class="string">&#x27;^&#x27;</span>)</span><br><span class="line">			p.<span class="built_in">push_back</span>(i); <span class="comment">// 存储每个^的位置</span></span><br><span class="line">	<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 枚举^的位置 结果是 距离 - 2 </span></span><br><span class="line">    <span class="comment">// ^_^ 0  	^__^ 1    ^___^ 2 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i =  <span class="number">1</span> ; i &lt; p.<span class="built_in">size</span>() ; i++)</span><br><span class="line">		ans += <span class="built_in">max</span>(<span class="number">0</span>,p[i] - p[i - <span class="number">1</span>] - <span class="number">2</span>);</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span>(T--) <span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="B-2"><a href="#B-2" class="headerlink" title="B"></a>B</h3><h4 id="大致题意-5"><a href="#大致题意-5" class="headerlink" title="大致题意"></a>大致题意</h4><p>给一个01字符串 可以右平移 len - 1 次 求构成的表中 由1组成的矩阵的面积的最大值</p>
<p>例如</p>
<p>字符串011110构成的表</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hasdsd-markdown.oss-cn-beijing.aliyuncs.com/img/image-20230603162708086.png"
                      alt="image-20230603162708086"
                ></p>
<p>结果</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://hasdsd-markdown.oss-cn-beijing.aliyuncs.com/img/image-20230603162741491.png"
                      alt="image-20230603162741491"
                ></p>
<h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><h4 id="code-3"><a href="#code-3" class="headerlink" title="code"></a>code</h4><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	string s;</span><br><span class="line">	cin &gt;&gt; s;</span><br><span class="line">	n = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">// 全是1 没有0 面积为 n * n 小心爆int</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">count</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(),<span class="string">&#x27;0&#x27;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">		cout &lt;&lt; <span class="number">1ll</span> * n * n &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 处理边界</span></span><br><span class="line">	s = s + s;</span><br><span class="line">	LL ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> , j ; i &lt; n ; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[i] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">			j = i;</span><br><span class="line">			<span class="keyword">while</span>(s[j] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">				j++;</span><br><span class="line">            <span class="comment">// 1 的 长度</span></span><br><span class="line">			<span class="type">int</span> d = j - i + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 求面积 可以自己画图把玩一下 容易推出来面积公式</span></span><br><span class="line">			ans = <span class="built_in">max</span>(ans,<span class="number">1ll</span> * (d / <span class="number">2</span>) * (d - d / <span class="number">2</span>));</span><br><span class="line">			i = j;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span>(T--) <span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="CF-865"><a href="#CF-865" class="headerlink" title="CF 865"></a>CF 865</h2><h3 id="A-3"><a href="#A-3" class="headerlink" title="A"></a>A</h3><h4 id="大致题意-6"><a href="#大致题意-6" class="headerlink" title="大致题意"></a>大致题意</h4><p>在坐标图上跳来跳去 起点是（0，0） 终点给出 要求在跳两下 到达终点 并且 跳跃时 跳的起点和 跳的下一步之间的连线不能经过整数坐标</p>
<h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><p>两个点 (x1,y1) 和 （x2,y2）如果 |x1 - x2| &#x3D; 1 或者 |y1 - y2 | &#x3D; 1 的话 就是一个边长1 ，x的矩形 两个点之间没有x的整数（不考虑端点） 所以直接走到 （n - 1 , 1）然后直接走到 终点即可 </p>
<h4 id="code-4"><a href="#code-4" class="headerlink" title="code"></a>code</h4><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	cout &lt;&lt; <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; n - <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; n &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; m &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="comment">// T = 1;</span></span><br><span class="line">	<span class="keyword">while</span>(T--) <span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="B-3"><a href="#B-3" class="headerlink" title="B"></a>B</h3><h4 id="大致题意-7"><a href="#大致题意-7" class="headerlink" title="大致题意"></a>大致题意</h4><p>给一个n 构造一个 2 * n 的网格 从起点（1，1）开始走 只能向下或者右 请你给网格中的点赋值 使最终的路径的最小代价最大化</p>
<p>一条路径的代价是写入路径中单元格上的数字的交替和。也就是说，让写在单元格上的数字是a1 a2…ak<br>(按照访问的顺序)，路径的代价为a1−a2+a3−a4+…&#x3D;∑ki&#x3D;1ai·(−1)i+1</p>
<h4 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h4><p>容易想到 起点和终点都是必过点 不妨让起点的价值最大 终点的价值次大 然后考虑其他点 我们肯定是希望访问次数多的点 价值尽可能大 对于（i + j） 是奇数的点 （i 和 j 从0开始） 都是要减去的值 对于相加是偶数的点 都要加 显然，所有要添加的值都严格大于所有要减去的值是最优的</p>
<h4 id="code-5"><a href="#code-5" class="headerlink" title="code"></a>code</h4><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="function">vector <span class="title">a</span><span class="params">(<span class="number">2</span>,vector&lt;<span class="type">int</span>&gt;(n))</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">2</span> ; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span> ; j &lt; n ; j++)&#123;</span><br><span class="line">			<span class="type">int</span> a;</span><br><span class="line">			<span class="keyword">if</span>((i + j) &amp; <span class="number">1</span>) a = j + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> a = (j - <span class="number">1</span> + n) % n + n + <span class="number">1</span>;</span><br><span class="line">		</span><br><span class="line">			cout &lt;&lt; a &lt;&lt; <span class="string">&quot; \n&quot;</span>[j == n - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="comment">// T = 1;</span></span><br><span class="line">	<span class="keyword">while</span>(T--) <span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="CF-864"><a href="#CF-864" class="headerlink" title="CF 864"></a>CF 864</h2><h3 id="A-4"><a href="#A-4" class="headerlink" title="A"></a>A</h3><h4 id="大致题意-8"><a href="#大致题意-8" class="headerlink" title="大致题意"></a>大致题意</h4><p>在一个n * n的表格上 给出两个点 每个点只能向 上下左右四个方向移动 问需要放多少障碍物 才能使两个点不连通</p>
<h4 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h4><p>把两个点分别围起来（围四个方向） 找放的最小的 注意边界  </p>
<h4 id="code-6"><a href="#code-6" class="headerlink" title="code"></a>code</h4><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="type">int</span> x1,y1,x2,y2;</span><br><span class="line">	cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">	<span class="type">int</span> ans = <span class="built_in">min</span>((x1 != <span class="number">1</span>) + (x1 != n) + (y1 != <span class="number">1</span>) + (y1 != m),(x2 != <span class="number">1</span>) + (x2 != n) + (y2 != <span class="number">1</span>) + (y2 != m));</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span>(T--) <span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="B-4"><a href="#B-4" class="headerlink" title="B"></a>B</h3><h4 id="大致题意-9"><a href="#大致题意-9" class="headerlink" title="大致题意"></a>大致题意</h4><p>给出一个 n * n 的由01组成的表格 让你操作k次 （1 -&gt; 0 或者 0 -&gt; 1） 操作后能不能使原图像翻转180度</p>
<h4 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h4><p>直接一个点一个点找 对于一个点 看他的反转后的点是否和 当前点一样 记录点数判断即可</p>
<h4 id="code-7"><a href="#code-7" class="headerlink" title="code"></a>code</h4><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	<span class="type">int</span> minn = <span class="number">0</span>;</span><br><span class="line">	<span class="function">vector <span class="title">a</span><span class="params">(n,vector&lt;<span class="type">int</span>&gt;(n))</span></span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n ; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span> ; j &lt; n ; j++)</span><br><span class="line">			cin &gt;&gt; a[i][j];</span><br><span class="line">    <span class="comment">// 记录不一样的点数</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n ; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span> ; j &lt; n ; j++)</span><br><span class="line">			minn += a[i][j] != a[n - <span class="number">1</span> - i][n - <span class="number">1</span> - j];</span><br><span class="line">    <span class="comment">// 对称/2</span></span><br><span class="line">	minn /= <span class="number">2</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 能够在k次内完成反转 并且剩下的次数 都用完不会改变图像</span></span><br><span class="line">    <span class="comment">// (k - minn) % 2 == 0 代表对于一个点执行 0 -&gt; 1 1 -&gt; 0操作 维持原点不变即可消耗完剩余的操作次数</span></span><br><span class="line">    <span class="comment">// 如果n是奇数的话 直接操作中心点</span></span><br><span class="line">	<span class="keyword">if</span>(k &gt;= minn &amp;&amp; (n % <span class="number">2</span> == <span class="number">1</span> || (k - minn) % <span class="number">2</span> == <span class="number">0</span>))&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;<span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span>(T--) <span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>题目</category>
        <category>图灵算法协会</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>友链</title>
    <url>/2020/01/01/%E5%8F%8B%E9%93%BE%E6%94%B9/</url>
    <content><![CDATA[<p>别问为什么不在友链里，而是写成了博客内容，有问题，不会改，我摆了</p>
<p><a class="link"   href="https://myblog.lihuibear.asia/friends/" >正经友链 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<hr>

<html>

<div class="post-body">    <div id="links">        <style>            .links-content {                margin-top: 1rem;            }            .link-navigation::after {                content: " ";                display: block;                clear: both;            }            .card {                width: 80%; /* 将宽度设置为100%以在小屏幕下占据整个宽度 */                font-size: 1rem;                padding: 10px 20px;                border-radius: 4px;                transition-duration: 0.15s;                margin-bottom: 1rem;                display: flex;            }            .card:hover {                transform: scale(1.1);                box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.12), 0 0 6px 0 rgba(0, 0, 0, 0.04);            }            .card a {                border: none;            }            .card .ava {                width: 3rem !important;                height: 3rem !important;                margin: 0 !important;                margin-right: 1em !important;                border-radius: 4px;            }            .card .card-header {                font-style: italic;                overflow: hidden;                width: 100%;            }            .card .card-header a {                font-style: normal;                color: #2bbc8a;                font-weight: bold;                text-decoration: none;            }            .card .card-header a:hover {                color: #d480aa;                text-decoration: none;            }            .card .card-header .info {                font-style: normal;                color: #a3a3a3;                font-size: 14px;                min-width: 0;                overflow: hidden;                white-space: nowrap;            }            @media (max-width: 767px) {                .link-navigation {                    display: flex;                    flex-direction: column;                    align-items: center;                }            }        </style>        <div class="links-content">            <div class="link-navigation">                <div class="card">                    <img  class="ava" 
                     lazyload
                     src="/images/loading.svg"
                     data-src=" https://blog-1306153177.cos.ap-beijing.myqcloud.com/202308151203522.png"
                     
                >                    <div class="card-header">                        <div>                            <a class="link"   href=" https://wmhwiki.cn/" >wmh’s wiki <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>                        </div>                        <div class="info">鸟要高飞先振翅，人求上进先读书。</div>                    </div>                </div>                <div class="card">                    <img  class="ava" 
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.postimg.cc/cJBBxrLS/20230820202423.jpg"
                     
                >                    <div class="card-header">                        <div>                            <a class="link"   href="https://ljx619.github.io/" >jiaxu <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>                        </div>                        <div class="info">                            有了崇高的梦想，只要矢志不渝地追求，梦想就会成为现实，奋斗就会变成壮举，生命就会创造奇迹。                        </div>                    </div>                </div>                <div class="card">                    <img  class="ava" 
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://jihaipeng123.github.io/images/avatar.jpg"
                     
                >                    <div class="card-header">                        <div>                            <a class="link"   href="https://jihaipeng123.github.io/" >赖床鹏鹏 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>                        </div>                        <div class="info">太空漫步的皮卡丘</div>                    </div>                </div>            </div>        </div>    </div></div>

</html>
]]></content>
  </entry>
  <entry>
    <title>基于改进TextRank的文本摘要自动提取--汪旭祥等_2021年</title>
    <url>/2023/07/31/%E5%9F%BA%E4%BA%8E%E6%94%B9%E8%BF%9BTextRank%E7%9A%84%E6%96%87%E6%9C%AC%E6%91%98%E8%A6%81%E8%87%AA%E5%8A%A8%E6%8F%90%E5%8F%96-%E6%B1%AA%E6%97%AD%E7%A5%A5%E7%AD%89-2021%E5%B9%B4/</url>
    <content><![CDATA[<h1 id="原文链接：https-www-123pan-com-s-eaG5Vv-dTth3-html"><a href="#原文链接：https-www-123pan-com-s-eaG5Vv-dTth3-html" class="headerlink" title="原文链接：https://www.123pan.com/s/eaG5Vv-dTth3.html"></a>原文链接：<a class="link"   href="https://www.123pan.com/s/eaG5Vv-dTth3.html" >https://www.123pan.com/s/eaG5Vv-dTth3.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h1><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><ul>
<li>TextRank 算法在自动提取中文文本摘要时<strong>只考虑句子间的相似性</strong>,而<strong>忽略了词语间的语义相关信息摘要及文本的重要全局信息</strong>。对此,提出一种基于改进 TextRank 的文本摘要自动提取算法(SW-TextRank)。<strong>通过Word2Vec 训练的词向量来计算句子之间的相似度</strong>。并综合考虑<strong>句子位置</strong>、<strong>句子与标题的相似度</strong>、<strong>关键词的覆盖率</strong>、<strong>关键句子以及线索词</strong>等影响句子权重的因素,从而优化句子权重;</li>
<li>对得到的候选摘要句群进行冗余处理,选取适量排序靠前的句子并根据其在原文中的顺序重新排列得到最终文本的摘要。实验结果表明,SW-TexiRank 算法生成摘要的准确性比 TextRank 算法更高,摘要生成质量更好</li>
</ul>
<h1 id="Word2Vec"><a href="#Word2Vec" class="headerlink" title="Word2Vec"></a>Word2Vec</h1><h2 id="one-hot-独热编码"><a href="#one-hot-独热编码" class="headerlink" title="one hot (独热编码)"></a><a class="link"   href="http://myblog.lihuibear.asia/2023/08/01/one-hot-%E7%8B%AC%E7%83%AD%E7%BC%96%E7%A0%81/" >one hot (独热编码) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h2 id="词向量"><a href="#词向量" class="headerlink" title="词向量"></a>词向量</h2><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%9F%BA%E4%BA%8E%E6%94%B9%E8%BF%9BTextRank%E7%9A%84%E6%96%87%E6%9C%AC%E6%91%98%E8%A6%81%E8%87%AA%E5%8A%A8%E6%8F%90%E5%8F%96-%E6%B1%AA%E6%97%AD%E7%A5%A5%E7%AD%89-2021%E5%B9%B4/image-20230801091131418.png"
                      alt="词向量"
                ></li>
<li>用任意实数表示，使有限的维度的词向量就可以表示无数的词语</li>
<li>12维的one-hot只可以表示<strong>12个</strong>词语</li>
<li>12维的词向量就可以表示<strong>无数个</strong>词语</li>
</ul>
<h2 id="Word2Vec-1"><a href="#Word2Vec-1" class="headerlink" title="Word2Vec"></a>Word2Vec</h2><p>简单说：Word2Vec是将词转化为「可计算」「结构化」的向量的过程</p>
<ul>
<li><p>重要假设：文本中离得越近的词语相似度更高</p>
</li>
<li><p>CBOW：用上下文预测中心词</p>
</li>
<li><p>skip-gram：用中心词预测上下文</p>
</li>
<li><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%9F%BA%E4%BA%8E%E6%94%B9%E8%BF%9BTextRank%E7%9A%84%E6%96%87%E6%9C%AC%E6%91%98%E8%A6%81%E8%87%AA%E5%8A%A8%E6%8F%90%E5%8F%96-%E6%B1%AA%E6%97%AD%E7%A5%A5%E7%AD%89-2021%E5%B9%B4/image-20230801092019442.png"
                      alt="CBOW与skip-gram"
                ></p>
</li>
<li><p>定义一个窗口大小（定义上下文的范围），指定每个中心词周围上下文包含哪些词语，然后最大化这些中心词语和上下文词语共同出现的概率，从而得到词向量</p>
</li>
<li><p>负采样：语料库非常大的时候，非上下文词太多了，需要采集部分负样本</p>
</li>
<li><p>评估词向量</p>
<ul>
<li>输出与特定词语的相关度比较高的词语</li>
<li>可视化</li>
<li>类比实验: 国王-王后&#x3D;男人-女人</li>
</ul>
</li>
<li><p>词向量的用途</p>
<ul>
<li>主题聚类</li>
<li>情感分析</li>
<li>信息检索</li>
<li>……</li>
</ul>
</li>
<li><p>Word2vec的缺点</p>
<ul>
<li>没有考虑多义词（例如apple 指苹果和苹果公司）</li>
<li>窗口长度有限</li>
<li>没有考虑全局的文本信息</li>
<li>不是严格意义的语序</li>
<li>……</li>
</ul>
</li>
</ul>
<h1 id="算法的实现"><a href="#算法的实现" class="headerlink" title="算法的实现"></a>算法的实现</h1><p><strong>本论文介绍了改进的TextRank算法用于计算文本中句子的权重，并根据权重对句子进行排序，从而生成文本摘要。算法的实现过程包括计算节点的权重、迭代计算边的权重、收敛判断等步骤。最终，根据句子的权重值和原文中的顺序，选择适量排序靠前的句子作为最终的文本摘要。</strong></p>
<h2 id="计算节点的权重"><a href="#计算节点的权重" class="headerlink" title="计算节点的权重"></a>计算节点的权重</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%9F%BA%E4%BA%8E%E6%94%B9%E8%BF%9BTextRank%E7%9A%84%E6%96%87%E6%9C%AC%E6%91%98%E8%A6%81%E8%87%AA%E5%8A%A8%E6%8F%90%E5%8F%96-%E6%B1%AA%E6%97%AD%E7%A5%A5%E7%AD%89-2021%E5%B9%B4/image-20230801094847571.png"
                      alt="公式（2）"
                ></p>
<p>计算节点的权重是通过公式（2）来计算的，其中W<del>S</del>(V<del>i</del>)表示节点V<del>i</del>的权重，d为阻尼系数，I<del>n</del>(V<del>i</del>)表示指向V<del>i</del>的节点集合，O<del>ut</del>(V<del>i</del>)表示V<del>i</del>指向节点的集合。公式中的w<del>ji</del>表示节点V<del>j</del>和节点V<del>i</del>之间的相似度，W<del>S</del>(V<del>j</del>)表示上一次迭代后节点V<del>j</del>的权重值。根据公式（2），可以计算出每个节点的权重。</p>
<h2 id="迭代计算边的权重"><a href="#迭代计算边的权重" class="headerlink" title="迭代计算边的权重"></a>迭代计算边的权重</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%9F%BA%E4%BA%8E%E6%94%B9%E8%BF%9BTextRank%E7%9A%84%E6%96%87%E6%9C%AC%E6%91%98%E8%A6%81%E8%87%AA%E5%8A%A8%E6%8F%90%E5%8F%96-%E6%B1%AA%E6%97%AD%E7%A5%A5%E7%AD%89-2021%E5%B9%B4/image-20230801095202474.png"
                      alt="公式（3）"
                ></p>
<p>迭代计算边的权重是通过公式（3）来计算的，其中W<del>S</del>(s<del>i</del>)表示句子s<del>i</del>在TextRank网络图中的权重，I<del>n</del>(s<del>i</del>)表示指向s<del>i</del>的句子集合，O<del>ut</del>(s<del>j</del>)表示s<del>j</del>指向的句子集合。公式中的w<del>ji</del>表示句子s<del>j</del>和句子s<del>i</del>之间的相似度，W<del>S</del>(s<del>j</del>)表示上一次迭代后句子s<del>j</del>的权重值。根据公式（3），可以迭代计算出每个句子的权重。</p>
<h2 id="收敛判断"><a href="#收敛判断" class="headerlink" title="收敛判断"></a>收敛判断</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%9F%BA%E4%BA%8E%E6%94%B9%E8%BF%9BTextRank%E7%9A%84%E6%96%87%E6%9C%AC%E6%91%98%E8%A6%81%E8%87%AA%E5%8A%A8%E6%8F%90%E5%8F%96-%E6%B1%AA%E6%97%AD%E7%A5%A5%E7%AD%89-2021%E5%B9%B4/image-20230801095250897.png"
                      alt="公式（4）"
                ></p>
<p>收敛判断是通过比较Bi与Bi-1的差值来判断是否达到收敛。公式（4）表示迭代计算的过程，其中B<del>i</del>表示第i次迭代后的权重向量，S<del>n</del>表示迭代次数，n表示迭代的次数。只有当B<del>i</del>与B<del>i-1</del>的差值非常小且接近于零时，才能判断算法已经收敛。</p>
]]></content>
      <categories>
        <category>计算机前沿</category>
        <category>文献</category>
        <category>TextRank</category>
      </categories>
      <tags>
        <tag>textrank</tag>
        <tag>Word2Vec</tag>
      </tags>
  </entry>
  <entry>
    <title>对几种图生文和图形识别模型的调研</title>
    <url>/2023/08/09/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/</url>
    <content><![CDATA[<h1 id="VisualGLM初体验"><a href="#VisualGLM初体验" class="headerlink" title="VisualGLM初体验"></a>VisualGLM初体验</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/image-20230809160604935.png"
                      alt="image-20230809160604935"
                ></p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul>
<li>文本命令输入：对上传的图片进行操作，比如描述，判断等功能</li>
<li>图片上传：上传识别的图片<ul>
<li>图片和文本命令必须都要有内容</li>
</ul>
</li>
<li>Temperature</li>
<li>Top P</li>
</ul>
<h2 id="Temperature"><a href="#Temperature" class="headerlink" title="Temperature"></a>Temperature</h2><ol>
<li>高温度（高探索性）：<ul>
<li>高温度值（例如1.0或更高）会使生成的文本更加探索性和多样化。</li>
<li>模型更倾向于均匀地分配概率给各个候选项，使得生成的文本更加多样化。</li>
<li>高温度值会减弱模型对于概率最高的候选项的偏好，从而增加其他候选项的出现概率。</li>
<li>生成的文本可能会包含更多的随机性和不确定性，有时可能会产生不太合理或不连贯的结果。</li>
</ul>
</li>
<li>低温度（低探索性）：<ul>
<li>低温度值（例如0.1或更低）会使生成的文本更加确定性和精确性。</li>
<li>模型更倾向于选择概率最高的候选项，使得生成的文本更加一致和可靠。</li>
<li>低温度值会增强模型对于概率最高的候选项的偏好，减少其他候选项的出现概率。</li>
<li>生成的文本可能更加可预测和合理，但可能缺乏一些创造性和多样性。</li>
</ul>
</li>
</ol>
<h2 id="Top-P"><a href="#Top-P" class="headerlink" title="Top-P"></a>Top-P</h2><p>在使用 “top-p” 采样时，模型会计算每个候选词的累积概率，并选择累积概率<strong>大于给定阈值</strong>（通常为 0.9 或 0.8）的<strong>最小集合</strong>。然后，从这个集合中按照<strong>概率</strong>分布随机选择一个词作为生成的下一个词。</p>
<ol>
<li>高阈值（例如0.9或0.95）：当阈值较高时，生成文本的多样性会更高。这是因为较高的阈值意味着更多的候选词被保留在累积概率中，从而增加了多样性。生成的文本可能会包含更多不同的词汇和语境，因此更加丰富和多样化。</li>
<li>低阈值（例如0.1或0.5）：当阈值较低时，生成文本的多样性会减少。这是因为较低的阈值意味着只有少数的候选词被保留在累积概率中，从而减少了多样性。生成的文本可能会更加一致和精确，使用的词汇和语境可能更加受限</li>
</ol>
<h2 id="TOP-K"><a href="#TOP-K" class="headerlink" title="TOP-K"></a>TOP-K</h2><p>在 “top-k” 采样中，模型会计算每个候选词的概率，并选择<strong>概率最高的前 k</strong> 个词作为候选集</p>
<ol>
<li>当累积概率阈值较<strong>高</strong>时，生成的文本更<strong>保守</strong>和<strong>确定性</strong>，模型更倾向于选择概率较高的词，生成的文本更传统和规范。</li>
<li>当累积概率阈值较<strong>低</strong>时，生成的文本更<strong>多样化</strong>和<strong>随机</strong>，模型更容易选择概率较低的词，生成的文本更具创造性和变化性</li>
</ol>
<p><strong>我们需要的是对图片的精准识别，因此我们需要低Temperature，低Top-P，高Top-K</strong></p>
<h2 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h2><h3 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h3><p>首先输入表格图片，进行连续三次对话</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/image-20230809162002001.png"
                      alt="测试_1.1"
                ></p>
<p>发现该模型对单一的识别存在模糊，无法识别图片中的内容</p>
<h3 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h3><p>再次换成扇形图测试</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/v2-290281118cc68a199acbdc46d514521f_r.jpg"
                      alt="扇形图_2.1"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/27274b601d598ebde2a54b55bac523e.png"
                      alt="测试_2.2"
                ></p>
<p>对图表的类型有一定的判断能力，但是识别图片中的内容有很大的误差</p>
<h3 id="测试3"><a href="#测试3" class="headerlink" title="测试3"></a>测试3</h3><p>给予其提示词后</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/image-20230809171018338.png"
                      alt="测试3.1"
                ></p>
<p>再次提问，一直否定我</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/image-20230809171312395.png"
                      alt="测试3.2"
                ></p>
<h3 id="测试4"><a href="#测试4" class="headerlink" title="测试4"></a>测试4</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/image-20230809172213320.png"
                      alt="测试4.1"
                ></p>
<h3 id="测试5"><a href="#测试5" class="headerlink" title="测试5"></a>测试5</h3><p>改用手绘草图测试</p>
<h4 id="对于少量图形的位置有一定的判断"><a href="#对于少量图形的位置有一定的判断" class="headerlink" title="对于少量图形的位置有一定的判断"></a>对于少量图形的位置有一定的判断</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/image-20230809173430172.png"
                      alt="测试5.1"
                ></p>
<h4 id="对多个图形判断不明"><a href="#对多个图形判断不明" class="headerlink" title="对多个图形判断不明"></a>对多个图形判断不明</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/image-20230809174209466.png"
                      alt="测试5.2"
                ></p>
<h4 id="对识别困难"><a href="#对识别困难" class="headerlink" title="对识别困难"></a>对识别困难</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/image-20230809174558001.png"
                      alt="测试5.3"
                ></p>
<h3 id="多次测试后"><a href="#多次测试后" class="headerlink" title="多次测试后"></a>多次测试后</h3><p>根据多次测试，该模型更适合对图片进行故事性的描述</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/image-20230809171727137.png"
                      alt="小王子"
                ></p>
<h1 id="图像识别与分类"><a href="#图像识别与分类" class="headerlink" title="图像识别与分类"></a>图像识别与分类</h1><h2 id="VS-studio部署"><a href="#VS-studio部署" class="headerlink" title="VS studio部署"></a>VS studio部署</h2><h3 id="选择方案"><a href="#选择方案" class="headerlink" title="选择方案"></a>选择方案<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/image-20230809210918016.png"
                      alt="部署"
                ></h3><h3 id="选择环境"><a href="#选择环境" class="headerlink" title="选择环境"></a>选择环境</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/image-20230809210951616.png"
                      alt="选择环境"
                ></p>
<h3 id="添加猫狗各20条数据"><a href="#添加猫狗各20条数据" class="headerlink" title="添加猫狗各20条数据"></a>添加猫狗各20条数据</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/image-20230809211020458.png"
                      alt="训练数据"
                ></p>
<h3 id="训练后"><a href="#训练后" class="headerlink" title="训练后"></a>训练后</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/image-20230809211128134.png"
                      alt="训练后"
                ></p>
<h3 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/image-20230809211325631.png"
                      alt="猫1"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/image-20230809211358375.png"
                      alt="猫2"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/image-20230809211437002.png"
                      alt="狗1"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/image-20230809211508144.png"
                      alt="狗2"
                ></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>可提供api服务</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%AF%B9%E5%87%A0%E7%A7%8D%E5%9B%BE%E7%94%9F%E6%96%87%E5%92%8C%E5%9B%BE%E5%BD%A2%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%B0%83%E7%A0%94/image-20230809211539125.png"
                      alt="api"
                ></p>
<h2 id="视频展示"><a href="#视频展示" class="headerlink" title="视频展示"></a><a class="link"   href="https://www.123pan.com/s/eaG5Vv-Thth3.html" >视频展示 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2>]]></content>
      <categories>
        <category>计算机前沿</category>
        <category>AI</category>
        <category>学习与研究</category>
      </categories>
      <tags>
        <tag>图片识别</tag>
      </tags>
  </entry>
  <entry>
    <title>大语言模型对比效果与分析</title>
    <url>/2023/08/07/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E5%AF%B9%E6%AF%94%E6%95%88%E6%9E%9C%E4%B8%8E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="大语言模型"><a href="#大语言模型" class="headerlink" title="大语言模型"></a>大语言模型</h1><h2 id="ChatGLM-6B系"><a href="#ChatGLM-6B系" class="headerlink" title="ChatGLM-6B系"></a>ChatGLM-6B系</h2><h3 id="ChatGLM-6B"><a href="#ChatGLM-6B" class="headerlink" title="ChatGLM-6B"></a>ChatGLM-6B</h3><p>基于通用语言模型（GLM）框架的开放<strong>中英双语</strong>语言模型，有62亿个参数。</p>
<p>ChatGLM-6B使用类似于ChatGPT的技术，针对中文QA和对话进行了优化。该模型针对大约 1T 的中英文语料库进行了训练，并辅以监督微调、反馈引导和人类反馈的强化学习。该模型只有大约 62 亿个参数，能够生成符合人类偏好的答案。</p>
<p>使用量化技术，用户可以在消费级显卡上本地部署（INT4 量化级别只需要 6GB 的 GPU 内存）。</p>
<h3 id="ChatGLM-6B-INT4"><a href="#ChatGLM-6B-INT4" class="headerlink" title="ChatGLM-6B-INT4"></a>ChatGLM-6B-INT4</h3><p>在 ChatGLM-6B 量化后的模型权重。</p>
<p>具体的，<code>ChatGLM-6B-INT4</code> 对 <code>ChatGLM-6B</code> 中的 28 个 <code>GLM Block</code> 进行了 <code>INT4</code> 量化，<strong>没有对 Embedding 和 LM Head 进行量化。</strong>量化后的模型理论上 6G 显存（使用 CPU 即内存）即可推理，具有在嵌入式设备上运行的可能。</p>
<h3 id="ChatGLM-6B-INT4-QE"><a href="#ChatGLM-6B-INT4-QE" class="headerlink" title="ChatGLM-6B-INT4-QE"></a>ChatGLM-6B-INT4-QE</h3><p>具体的，ChatGLM-6B-INT4-QE 对 ChatGLM-6B 中的 28 个 <strong>GLM Block 、 Embedding 和 LM Head</strong> 进行了 INT4 量化。量化后的模型权重文件仅为 3G ，理论上 6G 显存（使用CPU即内存即可推理，具有在嵌入式设备上运行的可能。</p>
<h3 id="ChatGLM-6B-INT8"><a href="#ChatGLM-6B-INT8" class="headerlink" title="ChatGLM-6B-INT8"></a>ChatGLM-6B-INT8</h3><p>在 ChatGLM-6B 量化后的模型权重。</p>
<p>进行int8量化</p>
<h3 id="Chatchatglm2-6B"><a href="#Chatchatglm2-6B" class="headerlink" title="Chatchatglm2-6B"></a>Chatchatglm2-6B</h3><p>是开源中英双语对话模型 <code>ChatGLM-6B</code> 的第二代版本</p>
<table>
<thead>
<tr>
<th><strong>量化等级</strong></th>
<th><strong>最低 GPU 显存</strong>（推理）</th>
<th><strong>最低 GPU 显存</strong>（高效参数微调）</th>
</tr>
</thead>
<tbody><tr>
<td>FP16（无量化）</td>
<td>13 GB</td>
<td>14 GB</td>
</tr>
<tr>
<td>INT8</td>
<td>8 GB</td>
<td>9 GB</td>
</tr>
<tr>
<td>INT4</td>
<td>6 GB</td>
<td>7 GB</td>
</tr>
</tbody></table>
<h4 id="优化后的新特性："><a href="#优化后的新特性：" class="headerlink" title="优化后的新特性："></a>优化后的新特性：</h4><ol>
<li>更强大的性能：</li>
<li>更长的上下文：<ol>
<li>基于 <code>FlashAttention</code> 技术，<code>2K</code> 扩展到了 <code>32K</code></li>
<li>并在对话阶段使用 <code>8K </code>的上下文长度训练，允许更多轮次的对话。</li>
<li>对单轮超长文档的理解能力有限</li>
</ol>
</li>
<li>更高效的推理：基于<code> Multi-Query Attention</code> 技术，<code>ChatGLM2-6B </code>有更高效的推理速度和更低的显存占用：在官方的模型实现下，推理速度相比初代提升了 42%，<code>INT4</code> 量化下，<code>6G</code> 显存支持的对话长度由 <code>1K</code> 提升到了 <code>8K</code>。</li>
<li>更开放的协议：<code>ChatGLM2-6B</code> 权重对学术研究完全开放</li>
</ol>
<h2 id="ChatYuan"><a href="#ChatYuan" class="headerlink" title="ChatYuan"></a>ChatYuan</h2><p>元语功能型对话大模型</p>
<p>这个模型可以用于问答、结合上下文做<strong>对话</strong>、做各种生成任务，包括<strong>创意性写作</strong>，也能回答一些像<strong>法律</strong>、<strong>新冠</strong>等领域问题。它基于PromptCLUE-large结合数亿条功能对话多轮对话数据进一步训练得到。</p>
<h2 id="Moss"><a href="#Moss" class="headerlink" title="Moss"></a>Moss</h2><p>训练了代码</p>
<p>复旦团队开源，160亿参数，并且已经在1000亿中文token上进行了训练，总训练token数量达到7000亿，其中还包含约3000亿<strong>代码</strong>。16B</p>
<p><a class="link"   href="https://blog.csdn.net/fengdu78/article/details/130355577" >复旦开源MOSS测评 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>增加了「搜索引擎、计算器、解方程、文生图」等插件功能，既可在线体验，也支持本地部署</p>
<p>突出功能为Web search功能；目前未开源int4&#x2F;int8量化版</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E5%AF%B9%E6%AF%94%E6%95%88%E6%9E%9C%E4%B8%8E%E5%88%86%E6%9E%90/image-20230807152602350.png"
                      alt="功能"
                ></p>
<h2 id="FastChat-Vicuna"><a href="#FastChat-Vicuna" class="headerlink" title="FastChat-Vicuna"></a>FastChat-Vicuna</h2><h3 id="FastChat"><a href="#FastChat" class="headerlink" title="FastChat"></a>FastChat</h3><ol>
<li>FastChat是用于对话机器人模型训练、部署、评估的开放平台，其核心特性包括：<ul>
<li>模型权重，训练代码，评估代码可用于SOTA模型（比如Vicuna，FastChat-T5）</li>
<li>分布式多模型部署系统，自带Web UI和OpenAI兼容的RESTful APIs</li>
</ul>
</li>
<li>FastChat集成了Vicuna、Koala、alpaca、LLaMA等开源模型。</li>
</ol>
<p>号称能够达到gpt-4的90%的质量</p>
<h3 id="Vicuna-13B-hf"><a href="#Vicuna-13B-hf" class="headerlink" title="Vicuna-13B-hf"></a>Vicuna-13B-hf</h3><p>是在LLaMa-13B的基础上使用监督数据微调得到的模型，数据集来自于ShareGPT.com产生的用户对话数据，共70K条。ShareGPT是一个ChatGPT数据共享网站，用户会上传自己觉得有趣的ChatGPT 回答</p>
<table>
<thead>
<tr>
<th><strong>模型</strong></th>
<th><strong>强项</strong></th>
<th><strong>不足</strong></th>
</tr>
</thead>
<tbody><tr>
<td>ChatGLM-6B系</td>
<td>中英文<strong>对话</strong>、人类<strong>强化学习</strong></td>
<td>对于学习需要     <strong>一定的数据训练</strong></td>
</tr>
<tr>
<td>ChatYuan</td>
<td>问答、对话、生成任务、创意性写作、 法律、新冠等<strong>医学问题</strong></td>
<td>对<strong>代码</strong>的理解与学习<strong>有所欠缺</strong></td>
</tr>
<tr>
<td>Moss</td>
<td>搜索引擎、计算器、解方程、文生图、训练量大、训练了代码</td>
<td>效果可能没有那么好，对部分问题回答<strong>没有逻辑</strong>，甚至不能回答</td>
</tr>
<tr>
<td>FastChat-Vicuna</td>
<td>能够达到gpt-4的90%的质量、数据集来自于ShareGPT.com产生的用户对话数据</td>
<td>Vicuna在涉及<strong>编程</strong>、推理、数学以及事实准确性的任务上<strong>表现不佳</strong></td>
</tr>
</tbody></table>
<h1 id="量化技术"><a href="#量化技术" class="headerlink" title="量化技术"></a>量化技术</h1><h2 id="int4量化技术"><a href="#int4量化技术" class="headerlink" title="int4量化技术"></a>int4量化技术</h2><p><a class="link"   href="https://borrowastep.net/p/int4--wfj0zurm5" >INT4量化模型原理 | Borrow A Step <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>INT4量化是一种用于神经网络推理的量化方法，它将网络中的权重和激活值表示为4位整数。在传统的神经网络中，权重和激活值通常以浮点数形式表示，占用较大的存储空间和计算资源。通过使用INT4量化，可以显著减少模型的存储需求和计算开销，从而提高模型的推理效率。</p>
<p>INT4量化的基本原理是将浮点数值映射到4位整数范围内。这种量化方法可以通过量化训练过程或离线量化过程实现。在量化训练中，网络在训练过程中使用低精度的权重和激活值进行计算，并通过反向传播算法进行梯度更新。离线量化则是在训练完成后，将浮点数模型转换为INT4表示。</p>
<h2 id="int8量化技术"><a href="#int8量化技术" class="headerlink" title="int8量化技术"></a>int8量化技术</h2><p>INT8量化使用8位整数来表示权重和激活值，相比于浮点数表示，它可以显著减少存储需求和计算开销。INT8量化相对于INT4量化具有更高的精度，因为它可以表示更多的离散值。这意味着INT8量化可以更好地保留模型中的细节和特征，从而在一定程度上减少量化对模型性能的影响。</p>
<p>然而，INT8量化相对于INT4量化也有一些劣势。首先，INT8量化需要更多的存储空间，因为每个数值需要使用8位来表示。其次，INT8量化需要更多的计算资源来进行8位整数的运算。因此，在资源受限的环境中，INT4量化可能更适合应用，因为它可以进一步减少存储需求和计算开销。</p>
<h1 id="Embedding-模型"><a href="#Embedding-模型" class="headerlink" title="Embedding 模型"></a>Embedding 模型</h1><p>Embedding 模型是一种将高维离散数据映射到低维连续向量空间的技术。在自然语言处理领域中，Embedding 模型常用于将文本数据转换为实数向量表示，以便计算机能够更好地理解和处理文本数据。</p>
<p>在 Embedding 模型中，每个离散的输入元素（如单词、字符、句子等）都被映射到一个实数向量，这个向量被称为嵌入向量（embedding vector）。嵌入向量的维度通常是固定的，可以根据任务和数据集的需求进行设置。</p>
<p>Embedding 模型的训练通常是通过大规模的文本语料库进行的。模型通过学习上下文信息和语义关联来生成嵌入向量，使得具有相似语义或上下文关系的元素在嵌入空间中彼此接近。</p>
<p>通过将文本数据映射到连续向量空间，Embedding 模型可以捕捉到词语之间的语义关系，例如近义词之间的相似性、词义的类比关系等。这使得它在许多自然语言处理任务中非常有用，如文本分类、命名实体识别、情感分析、机器翻译等。</p>
<h2 id="ERNIE-Tiny"><a href="#ERNIE-Tiny" class="headerlink" title="ERNIE-Tiny"></a>ERNIE-Tiny</h2><p><a class="link"   href="https://ai.baidu.com/ai-doc/ERNIE-Ultimate/5kye50810" >ERNIE介绍 | 百度AI开放平台 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>“ERNIE-Tiny”是ERNIE模型系列中的一个较小规模版本，相对于更大的模型，它具有更少的参数和计算资源需求。尽管规模较小，但”ERNIE-Tiny”仍然可以用于一些自然语言处理任务，如文本分类、命名实体识别、情感分析等。</p>
<h2 id="text2vec"><a href="#text2vec" class="headerlink" title="text2vec"></a>text2vec</h2><p>Text2Vec 是一个用于将文本数据映射到向量表示的开源软件包，它提供了一种简单而灵活的方法来生成文本的向量表示。Text2Vec 的目标是通过学习文本数据的分布式表示来捕捉语义和上下文关系。</p>
<p>Text2Vec 提供了一些常用的文本向量化方法，包括基于词袋模型（Bag-of-Words）、TF-IDF、Word2Vec 和 GloVe 等。它还支持通过使用预训练的词向量模型（如 Word2Vec 和 GloVe）来生成文本向量。</p>
<p>使用 Text2Vec，你可以将文本数据作为输入，并使用其中的单词、短语或句子来生成对应的向量表示。这些向量可以用于文本分类、聚类、相似度计算等任务。</p>
<h2 id="M3E"><a href="#M3E" class="headerlink" title="M3E"></a>M3E</h2><p><a class="link"   href="https://blog.csdn.net/sinat_30045277/article/details/131208109" >闻达 | M3E <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>M3E 是 Moka Massive Mixed Embedding 的缩写</p>
<p>Moka，此文本嵌入模型由 MokaAI 训练并开源，训练脚本使用 uniem</p>
<p>Massive，此文本嵌入模型通过千万级的中文句对数据集进行训练</p>
<p>Mixed，此文本嵌入模型支持中英双语的同质文本相似度计算，异质文本检索等功能，<strong>未来</strong>还会支持代码检索</p>
<h1 id="微调"><a href="#微调" class="headerlink" title="微调"></a>微调</h1><h2 id="P-Tuning-v2：与微调性能相等的提示性优化"><a href="#P-Tuning-v2：与微调性能相等的提示性优化" class="headerlink" title="P-Tuning v2：与微调性能相等的提示性优化"></a><a class="link"   href="https://zhuanlan.zhihu.com/p/423902902" >P-Tuning v2：与微调性能相等的提示性优化 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><h2 id="LORA的训练与使用"><a href="#LORA的训练与使用" class="headerlink" title="LORA的训练与使用 "></a><a class="link"   href="https://zhuanlan.zhihu.com/p/610299220" >LORA的训练与使用  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><ol>
<li>适应特定任务：通过微调，将通用语言模型转化为适应特定任务的模型，提高模型在任务上的性能和专业知识。</li>
<li>提高性能：微调使模型更好地适应任务，提高准确度、召回率、F1 值等评估指标。</li>
<li>减少训练成本：微调相比从头训练大规模语言模型，减少训练成本和时间。</li>
<li>数据效率：微调在相对较小的数据集上实现良好性能，利用预训练模型的泛化能力。</li>
</ol>
<h1 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h1><ol>
<li>Moss效果不尽如人意</li>
<li>数据训练不够</li>
<li>json代码需要进行注释标注</li>
</ol>
<h1 id="新发现"><a href="#新发现" class="headerlink" title="新发现"></a>新发现</h1><p>CodeGeeX :可以进行简单的代码辅助，集成于idea、vscode等软件，但无法处理复杂的需求，并且可能会重复对同一段代码进行生成</p>
<p>CodegeeX2:第二代CodeGeeX代码生成模型，已经开源。</p>
<p>第一代CodeGeeX模型只能基于<strong>前文向后生成</strong>代码，而CodeGeeX2-6B可以实现根据<strong>上下文填空</strong>。这意味着在补全代码时，可以综合当前光标上下文的内容，更精准地补全代码。</p>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ol>
<li>由于ChatGLM-6B系的强项在中英文<strong>对话</strong>以及<strong>文本提取</strong>以及<strong>强化学习</strong>，目前我们计划用更多的数据进行训练。</li>
<li>此外我们还发现，ChatGLM-6B系对于提供的代码无法精准识别，需要对代码进行注释工作，通过部分测试，在注释后效果较之前好很多。</li>
<li>但仍然存在部分代码不标准问题，我们认为是数据量不够大，还需要其他案例进行训练。</li>
<li>使用CodeGeeX2开源模型进行大量训练</li>
</ol>
]]></content>
      <categories>
        <category>计算机前沿</category>
        <category>AI</category>
        <category>学习与研究</category>
      </categories>
      <tags>
        <tag>大语言模型</tag>
      </tags>
  </entry>
  <entry>
    <title>已配置环境变量后的软件移盘问题</title>
    <url>/2023/08/26/%E5%B7%B2%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%90%8E%E7%9A%84%E8%BD%AF%E4%BB%B6%E7%A7%BB%E7%9B%98%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><strong>以Git为例</strong></p>
<h1 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h1><ol>
<li><p>打开注册表<br><code>WIN + R打开 regedit</code></p>
</li>
<li><p>进入右键菜单目录<br> <code>HKEY_CLASSES_ROOT\Directory\Background\shell</code></p>
</li>
<li><p>修改路径</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E5%B7%B2%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%90%8E%E7%9A%84%E8%BD%AF%E4%BB%B6%E7%A7%BB%E7%9B%98%E9%97%AE%E9%A2%98/image-20230827000021233.png"
                      alt="image-20230827000021233"
                ></p>
</li>
</ol>
<h1 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h1><p>简单粗暴，卸载重装</p>
<p><a class="link"   href="https://myblog.lihuibear.asia/download/" >download <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>技巧</category>
        <category>GIT</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>我与优秀的人</title>
    <url>/2023/07/08/%E6%88%91%E4%B8%8E%E4%BC%98%E7%A7%80%E7%9A%84%E4%BA%BA/</url>
    <content><![CDATA[<h1 id="优秀人与我们的区别"><a href="#优秀人与我们的区别" class="headerlink" title="优秀人与我们的区别"></a>优秀人与我们的区别</h1><h2 id="我现在的状态是怎样的"><a href="#我现在的状态是怎样的" class="headerlink" title="我现在的状态是怎样的"></a>我现在的状态是怎样的</h2><p>\1.   早上6：30起床，七点前到项目组，中午12：00左右离开，有时因去拿快递早走10分钟左右，吃完饭大概12：30左右，一般会回到项目组，趴着睡会儿，大概13：40左右醒来，打水，在楼道走一圈，清醒一下，然后继续，下午六点零几去吃饭，三十左右回来，继续，完事十点十分左右离开。</p>
<p>\2.   来回基本都是电动车，这是我早上想多眯一会儿的理由同时晚上也可以晚走一会儿。<br> 但是，事实如此，在骑了车后，越来越懒了。</p>
<p>\3.   周末，因为何东彬老师带的一个比赛，需要补一下最近落下的课程，如果没有落下的，就会整理下不久后比赛需要的材料</p>
<p>\4.   每天在完成日常的java学习外也需要完成一部分老师的任务，答辩材料。</p>
<h2 id="什么样的人是优秀的人（来自ChatGPT生成）"><a href="#什么样的人是优秀的人（来自ChatGPT生成）" class="headerlink" title="什么样的人是优秀的人（来自ChatGPT生成）"></a>什么样的人是优秀的人（来自ChatGPT生成）</h2><p>优秀的人可以被定义为在某个领域或方面表现出出色能力和品质的人。他们在其所追求的目标上展现出卓越的成就，并展现出高度的专业知识、技能和激情。一些优秀人士通常具备的特征：</p>
<p>\1.   杰出的能力：优秀的人在自己的领域内具备卓越的能力和技能。他们通过不断学习和不断努力，不断提高自己的技术水平和专业知识。</p>
<p>\2.   务实的态度：优秀的人注重实际行动，他们有目标，并制定明确的计划来实现这些目标。他们勤奋工作，投入大量时间和精力，以确保任务的完成。</p>
<p>\3.   坚持不懈：优秀的人具备坚韧不拔的品质。他们能够面对困难和挑战，并保持积极的态度。他们不会轻易放弃，而是通过克服困难来达到目标。</p>
<p>\4.   诚实正直：优秀的人具备高度的诚实和正直，他们遵守道德原则，并在行为中展示出高度的道德操守。他们以诚实和公正的方式与他人交往，赢得信任和尊重。</p>
<p>\5.   团队合作：优秀的人懂得与他人合作，并能够在团队中发挥积极的作用。他们倾听他人的意见，尊重不同的观点，并乐于与他人分享知识和经验。</p>
<p>\6.   创新思维：优秀的人具备创新的思维能力。他们能够寻找新的解决方案，提出新的想法，并以不同的方式思考问题。他们对改进和创造有着持续的渴望。</p>
<p>\7.   谦逊与学习心态：优秀的人保持谦逊和学习的态度。他们愿意接受反馈和建议，并从错误中吸取教训。他们不断地自我反思和进步，以提高自己的表现。</p>
<p>值得注意的是，优秀的人并不仅限于在职业领域中表现出色，他们还可能在个人生活、人际关系和社会责任等方面展现出杰出的品质。每个人对于”优秀”的定义可能有所不同，因为优秀是一个相对的概念，取决于个人的价值观和目标。</p>
<h2 id="世界500强的总裁早起的习惯"><a href="#世界500强的总裁早起的习惯" class="headerlink" title="世界500强的总裁早起的习惯"></a>世界500强的总裁早起的习惯</h2><p>世界500强的大部分总裁可能会选择早起，通常在清晨的五点到七点之间起床，这样他们可以有更多的时间<strong>规划和准备自己的一天</strong>。早起可以提供宝贵的时间来<strong>处理电子邮件</strong>、<strong>阅读新闻</strong>、<strong>进行身体锻炼</strong>。</p>
<h2 id="我是优秀的人吗？如果是，我做到了什么，如果不是，哪些没有做到"><a href="#我是优秀的人吗？如果是，我做到了什么，如果不是，哪些没有做到" class="headerlink" title="我是优秀的人吗？如果是，我做到了什么，如果不是，哪些没有做到"></a>我是优秀的人吗？如果是，我做到了什么，如果不是，哪些没有做到</h2><p>根据ChatGPT的回答：</p>
<p>优秀的人并不仅限于在职业领域中表现出色，他们还可能在<strong>个人生活</strong>、<strong>人际关系</strong>和<strong>社会责任</strong>等方面展现出杰出的品质</p>
<p>世界500强的总裁也会早起来<strong>规划自己的一天</strong>。</p>
<p>那么，这些优秀的人有必要早起吗？</p>
<p>他们大部分甚至全部可以做到高效率的工作，有富裕的生活，可以享受优质的服务，他们可以在大部分时间里休息，只需要在一些时间里解决自己必要的工作……</p>
<p>但是，他们依旧在坚持早起。</p>
<p>早起是为了什么，我认为<strong>早起是培养一个人坚持的最简单最有效的方法</strong>。</p>
<p>格拉德威尔<strong>一万小时定律</strong>：</p>
<p>人们眼中的天才之所以卓越非凡，并非天资超人一等，而是付出了持续不断的努力。1万小时的锤炼是任何人从平凡变成世界级大师的必要条件。“要成为某个领域的专家，需要10000小时“。</p>
<p>而一万小时定律的要义就是坚持，如何坚持一万小时呢，就从每天坚持早起开始。</p>
<p>与所有人对比，我是优秀的人吗？</p>
<p>显然不是，有比我们厉害的的大牛，有事业成功未来无限的企业家……</p>
<p>与同龄人对比，我是优秀的人吗？</p>
<p>也不是在大学生遍地走的年代，二本的学生很常见，在相关专业领域中，我们也是及其普通的。<br> 与身边的人对比，我是优秀的人吗？</p>
<p>或与也不是，我们只是较为突出，所有人都有值得学习的地方，在不同的领域我们都有缺点</p>
<p>但是，所有真正的优秀的人眼中都会有更优秀的人，他们不会与身边的差的人比较</p>
<h3 id="与真正的优秀的人相比，我做到了什么："><a href="#与真正的优秀的人相比，我做到了什么：" class="headerlink" title="与真正的优秀的人相比，我做到了什么："></a>与真正的优秀的人相比，我做到了什么：</h3><p>\1.    我具有一定的总结能力，能对自己的日常生活学习进行计划规划</p>
<p>\2.    有一定的管理能力</p>
<p>\3.    具有团队合作能力，在参加老师的项目和对班级的管理中学到了一些技巧</p>
<h3 id="与真正的优秀的人相比，我有哪些不足："><a href="#与真正的优秀的人相比，我有哪些不足：" class="headerlink" title="与真正的优秀的人相比，我有哪些不足："></a>与真正的优秀的人相比，我有哪些不足：</h3><p>\1.    我还会与那些比自己稍微差的人对比</p>
<p>\2.    我仍有懒惰的习惯</p>
<p>\3.    我的能力还需要精进</p>
<p>\4.    通常多与同学交流问题，与老师交流较少，在看待问题上可能缺少一些眼界</p>
]]></content>
      <categories>
        <category>慧说</category>
        <category>日常</category>
        <category>日常思考</category>
      </categories>
      <tags>
        <tag>项目组</tag>
        <tag>lihuibear</tag>
      </tags>
  </entry>
  <entry>
    <title>爱情问题_史铁生</title>
    <url>/2023/02/01/%E7%88%B1%E6%83%85%E9%97%AE%E9%A2%98-%E5%8F%B2%E9%93%81%E7%94%9F/</url>
    <content><![CDATA[<p>有人说，世界上，每分每秒都有贝多芬的乐曲在奏响在回荡，如果真有外星人的话，他们会把这声音认作地球的标志（就像土星有一道美丽的环），据此来辨认我们居于其上的这颗星星。这是个浪漫的想象。何妨再浪漫些呢？若真有外星人，外星人爷爷必定会告诉外星人孙子，这声音不过是近二百年来才出现的，而比这声音古老得多的声音是“爱情”。爱情，几千年来人类以各种发音说着、唱着、赞美着和向往着它，缠绵激荡片刻不息。因此，外星人爷爷必定会纠正外星人孙子：爱情——这声音，才是银河系中那颗美丽星星的标志呢。 </p>
<p>但，爱情是什么？爱情，都是什么呢？<br>大约不会有人反对：美满的爱情必要包含美妙的性（注：本文中的“性”意指性吸引、性行为、性快乐），而美满的性当然要以爱情为前提。因为世上还有一种叫作“友爱”的情感，以及一种叫作“嫖娼”和一种叫作“施暴”的行为。因而大约也就不会有人反对；爱情不等于性，性也不能代替爱情。如同红灯区里的男人或女人都不能代替爱人。<br>这差不多能算一种常识。<br>问题是：那个不等同于性的爱情是什么？那个性所不能代替的爱情，是什么？包含性并且大于性的那个爱情，到底是怎么一种事？ </p>
<p>也许爱情，就是友爱加性吸引？<br>就算这机械的加法并不可笑，但是，为什么你的异性朋友不止十个，而爱人却只有一个（或同时只有一个）呢？因为只有一个对你产生性吸引？是吗？<br>也许有人是。可我不是。我不是而且我相信，像我这样不止从一个异性那儿感受到吸引的人很多，像我这样不止被一个美丽女人惊呆了眼睛和惊动了心的男人很多，像我这样公开或暗自赞美过两个以上美妙异性的人肯定占着人类的多数。<br>证明其实简单：你还没有看见你的爱人之时你早已看见了异性的美妙，你被异性惊扰和吸引之后你才开始去寻找爱人。你在寻找一个事先并不确定的异性作你的爱人，这说明你在选择。你在选择，这说明对你有性吸引力的异性并不只有一个。那么，选择的根据是什么？<br>若仅仅是性，便没有什么爱情发生，因而那是动物界司空见惯的事件与本文无关。你的根据当然是爱情。<br>但是爱情是什么眼下还不知道。<br>现在只知道了一件事：性吸引从来不是一对一的，从来是多向的，否则物种便要在无竞争中衰亡。 </p>
<p>我读过一篇小说，写一对恋人（或夫妻）出门去，走在街上、走进商店、坐上公共汽车和坐进餐厅里，女人发现男人的目光常常投向另外的女人（一些漂亮或性感的女人），于是她从扫兴到愤怒终至离开了那男人。这篇小说明显是嘲讽那个男人，相信他不懂得爱情和不忠于爱情。<br>但该小说作者的这一判断只有一半的可能是对的，只有一半的可能是，那个男人尚未走出一般动物的行列。另外一半的可能是那个女人不懂爱情。首先她没弄清性与爱的分别，性是多指向的，而性的多指向未必不可以与爱的专一共存。其次她把自己仅仅放在了性的位置上，因为只有在这个位置上她与另外那些女人才是可比的。第三，那男人没有因为众多的性吸引而离开她，她可想过这是为什么吗？她显然没想过，因为倒是她仅仅为了性妒忌而离开了她的恋人或丈夫。<br>恋人们或夫妻们，应该承认性吸引的多向性，应该互相允许（公开或暗自）赞赏其他异性之魅力。但是！但是恋人们或夫妻们，可以承认和允许多向的性行为么？不，当然不，至少我不，至少当今绝对多数的人都——不！这，是为什么？这是一个最严重也最有价值的问题。 </p>
<p>毫无疑问，是因为爱情，因为必须维护爱情的神圣与纯洁，因为专—的爱情才受到赞扬。但是，这就有点奇怪，这就必然引出两个不能含混过去的问题：一是，爱情既然是一种美好的情感，为什么要专一？为什么只能对一个人？为什么必须如此吝啬？为什么这吝啬或自私倒要受到赞扬，和被誉为神圣与纯洁？<br>二是，性吸引既然是多向的，为什么性行为不应该也是多向的？<br>为什么性行为要受到限制，而且是以爱情（神圣与纯洁）的名义来限制？为什么对性的态度，竟是对爱情忠贞与否的（一个很重要的）证明？为什么多向的性吸引可与爱情共存，而多向的性行为便被视为对爱情的不忠？ </p>
<p>先说第二个问题。<br>这不忠的观念，可能是源于早先的把爱情与婚姻、家庭混为一谈，源于婚姻、家庭所关涉的财产继承。所以这不忠，曾经主要是一个经济问题，现在则不过是旧观念的遗留问题。这不无道理。但，这么简单么？那么在今天，爱情已不等同于婚姻、家庭，已常常与经济无涉，这不忠的观念是否就没有了基础就很快可以消逝了呢？或者这不忠的观念，仅仅是出于动物式的性争夺，在宽厚豁达和更为进步的人那儿已不存在？<br>我知道一位现代女性，她说只要她的丈夫是爱她的，她丈夫的性对象完全可以不限于她，她说她能理解，她说她自己并不喜欢这样但是她能理解她的丈夫，她说：“只要他爱我，只要他仍然是爱我的，只要他对别人不是爱，他只爱我。”可是，当那男人真的有了另外的性对象而且这样的事情慢慢多起来时，这位现代女性还是陷入了痛苦。<br>不，她并不推翻原来的诺言，她的痛苦不是因为旧观念的遗留，更不是性忌妒，而是一个始料未及的问题：“可我怎么能知道，他还是爱我的？”她说，虽然他对她一如既往，但是她忽然不知道为什么他还是爱她的。她不知道在他眼里和心中，她与另外那些女人有什么不同。<br>她不知道为什么她不是与另外那些女人一样，也仅仅是他的一个性对象？她问：“什么能证明爱情？”一如既往的关心、体贴、爱护、帮助……这些就是爱情的证明么？可这是母爱、父爱、友爱、兄弟姐妹之爱也可以做到的呀？但是爱情，需要证明，需要在诸多种爱的情感中独树一帜表明那不是别的那正是爱情！<br>什么，能证明爱情？ </p>
<p>曾有某出版社的编辑，约我就爱情之题写一句话。我想了很久，写了：没有什么能够证明爱情，爱情是孤独的证明。<br>这句话很可能引出误解，以为就像一首旧民谣中所表达的愿望，爱情只是为了排遣寂寞。（那首旧民谣这样说：小小子儿，坐门墩儿，哭着喊着要媳妇儿。要媳妇儿干嘛呀？点灯说话儿，吹灯就伴儿，早上起来梳小辫儿。）不，孤独并不是寂寞。无所事事你会感到寂寞，那么日理万机如何呢？你不再寂寞了但你仍可能孤独。孤独也不是孤单。门可罗雀你会感到孤单，那么门庭若市怎样呢？你不再孤单了但你依然可能感到孤独。孤独更不是空虚和百无聊赖。孤独的心必是充盈的心，充盈得要流溢出来要冲涌出去，便渴望有人呼应他、收留他、理解他。孤独不是经济问题也不是生理问题，孤独是心灵问题，是心灵间的隔膜与歧视甚或心灵间的战争与戕害所致。那么摆脱孤独的途径就显然不能是日理万机或门庭若市之类，必须是心灵间戕害的停止、战争的结束、屏障的拆除，是心灵间和平的到来。心灵间的呼唤与呼应、投奔与收留、坦露与理解，那便是心灵解放的号音，是和平的盛典是爱的狂欢。那才是孤独的摆脱，是心灵享有自由的时刻。<br>但是这谈何容易，谈何容易！<br>让我们记起人类社会是怎样开始的吧。那是从亚当和夏娃偷吃了禁果于是知道了善恶之日开始的，是从他们各自用树叶遮挡起生殖器官以示他们懂得了羞耻之时开始的。善恶观（对与错、好与坏、伟大与平庸与渺小等等），意味着价值和价值差别的出现。羞耻感（荣与辱，扬与贬，歌颂与指责与唾骂等等），则宣告了心灵间战争的酿成，这便是人类社会的独有标记，这便是原罪吧，从那时起，每个人的心灵都要走进千万种价值的审视、评判、褒贬、乃至误解中去（枪林弹雨一般），每个人便都不得不遮挡起肉体和灵魂的羞处，于是走进隔膜与防范，走进了孤独。但从那时起所有的人就都生出了一个渴望：走出孤独，回归乐园。<br>那乐园就是，爱情。 </p>
<p>寻找爱情，所以不仅仅是寻找性对象，而根本是寻找乐园，寻找心灵的自由之地。这样看来，爱情是可以证明的了。自由可以证明爱情。自由或不自由，将证明那是爱情或者不是爱情。<br>自由的降临要有一种语言来宣告。文字已经不够，声音已经不够，自由的语言是自由本身。解铃还需系铃人。孤独是从遮掩开始的，自由就要从放弃遮掩开始。孤独是从防御开始的，自由就要从拆除防御开始。孤独是从羞耻开始的、自由就要从废除羞耻开始。孤独是从衣服开始，从规矩开始，从小心谨慎开始，从距离和秘密开始，那么自由就要从脱去衣服开始，从破坏规矩开始，从放浪不羁开始，从消灭距离和泄露秘密开始……（我想，相视如仇一定是爱的结束，相敬如宾呢，则可能还不曾有爱。）<br>性行为是一种语言。在爱人们那儿，坦露肉体已不仅仅是生理行为的揭幕，更是心灵自由的象征；炽烈地贴近已不单单是性欲的摧动，更是心灵的相互渴望；狂浪的交合已不只是繁殖的手段，而是爱的仪式。爱的仪式不能是自娱，而必得是心灵间的呼唤与应答。爱的仪式，并不发生在一个与世隔绝的孤岛，爱的仪式是百年孤独中的一炬自由之火。在充满心灵战争的人间，唯这儿享有自由与和平。这儿施行与外界不同甚或相反的规则，这儿赞美赤身裸体，这儿尊敬神魂颠倒，这儿崇尚礼崩乐坏，这儿信奉敞开心扉。这就是爱的仪式。爱的表达。<br>爱的宣告。爱的倾诉。爱之祈祷或爱之祭祀。 </p>
<p>君王与嫔妃、嫖客与娼妓、爱人与爱人，其性行为之方式的相同点想必很多，那是由于身体的限制。但其性行为之方式的不同点肯定更多，因为，就便是相同的行动也都流溢着不同的表达，那是源自心灵的创造。<br>譬如哭，是忧伤还是矫情，一望可知。譬如笑，是欢欣还是敷衍，一望可知。譬如西门庆和查泰莱夫人的情人，其境界的大不同一读可知。这很像是人们用着相同的文字，而说着不同的话语。相同的文字大家都认得，不同的话语甚至不能翻译。<br>顺便想到：什么是淫荡呢？在不赞成禁欲的人看来，并没有淫荡的肉身，只有淫荡的心计。只要是爱的表达（譬如查泰莱夫人与其情人），一切礼崩乐坏的作为都是真理，并无淫荡可言。而若有爱之外的指向（譬如西门庆），再规范再八股的行动也算流氓。 </p>
<p>性是爱的仪式，爱情有多么珍重，性行为就要多么珍重。好比，总不能在婚礼上奏哀乐吧，总不能为了收取祭品就屡屡为亲娘老子行葬礼吧。仪式，大约有着图腾的意味，是要虔敬的。改变一种仪式，意味着改变一种信念，毁坏一种仪式就是放弃一种相应的信念。<br>性行为，可以是爱的仪式，当然也可以是不爱的告白。<br>这就是为什么，对性的态度，是对爱情忠贞与否的一个重要证明。<br>这就是为什么，性要受到限制，而且是以爱情的名义。<br>爱情，不是自然事件，不是荒野上交媾的季节。爱情是社会事件，在亚当夏娃走出伊甸园之后发生，爱情是在相互隔膜的人群里爆发的一种理想，并非一种生理的分泌。所以性不能代替爱情。所以爱情包含性又大于性。 </p>
<p>再说第一个问题：爱情既然是美好的感情，为什么要专一为什么不该多向呢？为什么不该在三个以至一万个人之间实现这种感情呢？好东西难道不应该扩大倒应该缩小到只是一对一？多向的爱情，正可与多向的性吸引相和谐，多向的性行为何以不能仍然是爱的仪式呢？那岂不是在更大的范围里摆脱孤独么？岂不是在更大的范围里敞开心扉，实现心灵的自由与和平么？这难道不是更美好的局面？<br>不能说这不是一个美好的理想。这差不多与世界大同类似，而且不单是在物质享有上的大同。在我想来，这更具有理想的意味。至少，以抽象的逻辑而论，没有谁能说出这样的局面有什么不美和不好。若有不美和不好，则必是就具体的不能而言。问题就在这儿，不是不该，而是不能。不是理想的不该，不是逻辑的不通，也不是心性的不欲，而是现实的不能。<br>为什么不能？<br>非常奇妙：不能的原因，恰恰就是爱情的原因。简而言之：孤独创造了爱情，这孤独的背景，恰恰又是多向爱情之不能的原因。倘万众相爱可如情侣，孤独的背景就要消失，于是爱情的原因也将不在。<br>孤独的背景即是我们生存的背景；这与悲观和乐观无涉，这是闭上眼睛也能感受到的事实，所以爱情应当珍重，爱情神圣。<br>倘有三人之恋，我看应当赞美，应当感动，应当颂扬。这与所谓第三者绝无相同，与群婚、滥交、纳妾、封妃更是天壤之别。唯其可能性微乎其微。更别说四。 </p>
<p>我知道有一位性解放人士，他公开宣称他爱着很多女人，不是友爱而是包含性且大于性的爱情，他的宣称不是清谈，他宣称并且实践。这实践很可能值得钦佩。但不幸，此公还有一个信条：诚实。<br>（这原不需特别指出，爱情嘛，没有诚实还算什么？）于是苦恼就来了，他发现他走进了一个二律背反的处境：要保住众多爱情就保不住诚实，要保住诚实就保不住众多爱情。因为在他众多地诚实了之后，众多的爱人都冲他嚷：要么你别爱我，要么你只爱我一个！于是他好辛苦：对a 瞒着b ，对b 瞒着c ，对c 瞒着ab，对b 瞒着ac……于是他好荒唐：本意是寻找自由与和平，结果却得到了束缚和战争，本意要诚实结果却欺瞒，本意要爱结果他好孤独。他说他好孤独，我想他已开始成人。他或者是从动物进化成人了，或者是从神仙下凡成人了，总之他看见了人的处境。这处境是：心与心的自由难得，肉与肉的自由易取。这可能是因为，心与心的差别远远大于肉与肉的差别，生理的人只分男女，心灵的人千差万别。这处境中自由的出路在哪儿？我想无非两路：放弃爱情，在欺瞒中去满足多向的性欲，麻醉掉孤独中的心灵，和，做爱情的信徒，知道他非常有限，因而祈祷因而虔敬，不恶其少恶其不存，唯其存在，心灵才注满希望。 </p>
<p>不过真正的性解放人士，可能并不轻视爱，倒是轻视性。他们并不把性与爱联系在一起，不认为性有爱之仪式的意义，为什么吃不是爱的告白呢？性也不必是。性就是性如同吃就是吃，都只是生理的需要与满足，爱情嘛，是另一回事。这不失为一个聪明的主张。你可以有神圣的专注的爱情，同时也可以有随意的广泛的性行为，既然爱与性互不相等，何妨更明朗些，把二者彻底分割开来对待呢？真的，这不见得不是一个好主意，性不再有自身之外的意义，性就可以从爱情中解放出来，像吃饭一样随处可吃，不再引起其它纠葛了。但是，爱，还包含性么？当然包含，爱人，为什么不能也在一块吃顿饭呢？<br>爱情的重要是敞开心扉不是吗，何须以敞开肉体作其宣布？敞开肉体不过是性行为一项难免的程序，在哪儿吃饭不得先有个碗呢？所以我看，这主张不是轻视了爱，而是轻视了性，倘其能够美满就真是人类的一次伟大转折。<br>但是这样，恐怕性又要失去光彩，被轻视的东西必会变得乏味，唾手可得的东西只能使人舒适不能令人激动，这道理相当简单，就像绝对的自由必会葬送自由的魅力。据说在性解放广泛开展的地方，同时广泛地出现着性冷漠，我信这是真的，这是必然。没有了心灵的相互渴望，再加上肉体的沉默（没有另外的表达），性行为肯定就像按时的服药了。假定这不重要，但是爱呢？爱情失去了什么没有？<br>爱情失去了一种最恰当的语言。这语言随处滥用，在爱的时候可还能表达什么呢？还怎么能表达这不同于吃饭和服药的爱情呢？正所谓“假作真时真亦假，无为有处有还无”了。爱情，必要有一种语言来表达，心灵靠它来认同，自由靠它来拓展，和平靠它来实现，没有它怎么行？而且它，必得是不同寻常的、为爱情所专用的。这样的语言总是要有的，不是性就得是其它。不管具体是什么，也一样要受到限制，不可滥用，滥用的结果不是自由而是葬送自由。<br>既然这样，作为爱的语言或者仪式，就没有什么别的东西能够优于性。因为，性行为的方式，天生酷似爱。其呼唤和应答，其渴求和允许，其拆除防御和解除武装，其放弃装饰和坦露真实，其互相敞开与贴近，其相互依靠与收留，其随心所欲及轻蔑规矩，其携力创造并共同享有，其极乐中忘记你我霎那间仿佛没有了差别，其一同赴死的感觉但又一起从死中回来，曾经分离但现在我们团聚，我们还要分离但我们还会重逢……这些形式都与爱同构。说到底，性之中原就埋着爱的种子，上帝把人分开成两半，原是为了让他们体会孤独并崇尚爱情吧，上帝把性和爱联系起来，那是为了，给爱一种语言或一个仪式，给性一个引导或一种理想。上帝让繁衍在这样的过程里面发生，不仅是为了让一个物种能够延续，更是为了让宇宙间保存住一个美丽的理想和美丽的行动。 </p>
<p>可为什么，性，常常被认为是羞耻的呢？我想了好久好久，现在才有点明白：禁忌是自由的背景，如同分离是团聚的前提。<br>这是一个永恒的悖论。<br>这是一切“有”的性质，否则是“无”。<br>我们无法谈论“无”，我们以“有”来谈论“无”。<br>我们无法谈论“死”，我们以“生”来谈论“死”。<br>我们无法谈论“爱情”，我们以“孤独”来谈论“爱情”。<br>一个永恒的悖论，就是一个永恒的距离，一个永恒孤独的现实。<br>永恒的距离，才能引导永恒的追寻。永恒孤独的现实，才能承载永恒爱情的理想。所以在爱的路途上，永恒的不是孤独也不是团聚，而是祈祷。<br>祈祷。<br>一切谈论都不免可笑，包括企图写一篇以“爱情问题”为题的文章。某一个企图写这样一篇文章的人，必会在其文章的结尾处发现：问题永远比答案多。除非他承认：爱情的问题即是爱情的答案。<br>一九九四年</p>
]]></content>
      <categories>
        <category>文学摘抄</category>
        <category>史铁生</category>
      </categories>
      <tags>
        <tag>史铁生</tag>
      </tags>
  </entry>
  <entry>
    <title>放下与执着——史铁生</title>
    <url>/2023/02/01/%E6%94%BE%E4%B8%8B%E4%B8%8E%E6%89%A7%E7%9D%80_%E5%8F%B2%E9%93%81%E7%94%9F/</url>
    <content><![CDATA[<h1 id="放下与执着"><a href="#放下与执着" class="headerlink" title="放下与执着"></a><strong>放下与执着</strong></h1><p>　几位老友，不常见面，见了面总劝我“放下”。放下什么呢?没说，断续劝我：“把一切都放下，人就不会生病。”我发现我有点儿狡猾了，明知那是句佛家经常的教诲(比如“放下屠刀，立地成佛”；“屠刀”也不专指索命的器具，是说一切迷执)，却佯装不知。佯装不知，是因为我心里着实有些不快；可见嗔心确凿，是要放下的。何致不快呢?从那劝导中我听出了一个逆推理：你所以多病，就因为你没放下。逆推理中又含了一条暗示：我为什么身体好呢?全都放下了。</p>
<p>　既知嗔心确在，就别较劲儿。坐下，喝茶，说点儿别的。可谁料，一晚上，主张放下的几位却始终没放下几十年前的“文革”旧怨，那时谁把谁怎样了吧，谁钻木取火呢，还是连钻木取火也已经放下?</p>
<p>　错的不是执着，是执迷，有些谈佛论道的书中将这两个词混用，窃以为十分不妥。“执迷”的意思，差不多是指异化、僵化、故步自封、知错不改。何致如此呢?无非“名利”二字。但谋生，从而谋利，只要合法，就不是迷途。名却厉害；温饱甚至富足之后，价值感，常把人弄得颠三倒四。谋利谋到不知所归，其实也是在谋名了——优越感，或价值感。价值感错了吗?人要活得有价值，不对吗?问题是，在这个一切都可以卖的时代，价值的解释权通常是属于价格的，价值感自也是亦步亦趋。</p>
<p>　　价值和价格的差距本属正当。但这差距却无从固定，可以很大，也可以很小，当然这并非坏事，这正是经济学所赞美的那只市场的无形之手。可这只手，一旦显形为铺天盖地的广告，一旦与认钱不认货的媒体相得益彰，事情就不一样了。怎么不一样?只要广告深入人心，东西好坏倒不要紧了——好也未必就卖得好，不好也未必就卖不好。媒体和广告沆瀣一气，大约是经济学未及引入的一个——几乎没有底线的——参数。是呀，倘那无形或有形的手也成了商品，又靠谁来调节它呢?价格既已不认价值这门亲，价值感孤苦无靠去拜倒在价格门下，也就不是什么难解的题。而这逻辑，一旦以“更高、更快、更强”的气势，超越经济，走进社会各个领域，耳边常闻的关键词就只有利润、码洋、票房和收视率了。另有四个词在悄声附和：房子、车子、股市、化疗。此即执迷。</p>
<p>　而“执着”与“执迷”不分，本身就是迷途。这世界上有爱财的，有恋权的，有图名的，有什么都不为单是争强好胜的。人们常管这叫欲壑难填，叫执迷不悟，都是贬义。但爱财的也有比尔·盖茨，他既能聚财也能理财，更懂得财为何用，不好吗?恋权的嘛，也有毛遂自荐的敢于担当，也有种种“举贤不避亲”的言与行，不对吗?图名的呢?雷锋，雷锋及一切好人！他们不图名?愿意谁说他们没干好事，不是好人?不过是不图虚名、假名。争强好胜也未必就不对，阿姆斯特朗怎么样，那个身患癌症还六次夺得环法自行车赛冠军的人?对这些人，大家怎么说?会说他执迷?会请他放下吗?当然不，相反人们会赞美他们的执着——坚持不懈、百折不挠、矢志不渝，都是褒奖。</p>
<p>　主张“一切都放下”，或“执着”与“执迷”分不清，是否正应了佛家的另一个关键词——“无明”呢?</p>
<p>　　“无明”就是糊涂。但糊涂分两种。一种叫顽固不化，朽木难雕，不可教也，“无明”应该是指这一种。另一种，比如少小无知，或“山重水复疑无路”，这不能算“无明”，这是“柳暗花明又一村”的前奏，是成长壮大的起点。而郑板桥的“难得糊涂”已然是大智慧了。</p>
<p>　后一种糊涂，是错误吗?执着地想弄明白某些尚且糊涂着的事物，不应该吗?比如一件尚未理清的案件，一处尚未探明的矿藏，一项尚未完善的技术、对策或理论。这正是坚持不懈者施才展志的时候呀，怎倒要知难而退者来劝导他呢?严格说，我们的每一步其实都在不完善中，都在不甚明了中，甚至是巨大的迷茫之中，因而每时每刻都可能走对了，也都可能走错了。问题是人没有预知一切的能力，那么，是应该就此放下呢，还是要坚持下去?设想，对此，佛祖会取何态度?干脆“把一切都放下”吗?那就要问了：他压根儿干吗要站出来讲经传道?他看得那么深、那么透，干吗不统统放下?他曾经糊涂，曾经烦恼，但他放得下王子之位却放不下生命的意义，所以才有那锲而不舍的苦行，才有那菩提树下的冥思苦想。难道他就是为了让后人把一切都放下，没病没灾然后啥都无所谓?该想的佛都想了各位就甭想了，该受的佛都受了各位就甭再受了，该干的佛也都干了各位啥心也甭操了——有这事儿?恐怕，盼望这事儿的，倒是执迷不悟。</p>
<p>　可是，哪能谁都有佛祖一样的智慧呢?我等凡人，弄不好一错再错，苦累终生，倒不如尘缘尽弃，早得自在吧。可是，怕错，就不是执着?怕苦，就不是执着?一身享用着别人执着的成果，却一心只图自在，不是执着?不是执着，是执迷！佛祖要是这般明哲保身，犯得上去那菩提树下饱经折磨吗?偷懒的人说一句“放下”多么轻松，又似多么明达，甚至还有一份额外的“光荣”——价值感，却不去想那菩提树下的所思所想，却不去辨别什么要放下、什么是不可以放下的，结果是弄一个价值虚无来骗自己，蒙大家。</p>
<p>　老实说，我——此一姓史名铁生的有限之在，确是个贪心充沛的家伙，天底下的美名、美物、美事没有他没想(要)过的，虽然我并不认为这是他多病的原因。不过，此一史铁生确曾因病得福。二十一岁那年，命运让这家伙不得不把那些充沛的东西——绝不敢说都放下了，只敢说一一暂时都放一放。特别要强调的是，这“暂时都放一放”，绝非觉悟使然，实在是不得已而为之。先哲有言：“愿意的，命运领着你走；不愿意的，命运拖着你走。”我就是那“不愿意”而被“拖着走”的。被拖着走了二十几年，一日忽有所悟：那二十一岁的遭遇以及其后的三十几年的被拖，未必不是神恩——此一铁生并未经受多少选择之苦，便被放在了“不得不放一放”的地位，真是何等幸运的事情！虽则此一铁生生性愚顽，放一放又拿起来，拿起来又不得不再放一放，至今也不能了断尘根，也还是得了一些恩宠的。我把这感想说给某位朋友，那朋友忒善良，只说我是谦虚。我谦虚?更有位智慧的朋友说我：他谦虚?他骨子里了不得！这“了不得”，估计也是“贪心充沛”的意思。前一位是爱我者，后一位是知我者。不过，从那时起，我有点儿被“领着走”的意思了。</p>
<p>　如今已是年近花甲。也读了些书，也想了些事，由衷感到，尼采那一句“爱命运”真是对人生态度之最英明的指引。当然不是说仅仅爱好的命运，而是说对一切命运都要持爱的态度。爱，再一次表明与“喜欢”不同，谁能喜欢坏运气呢?但是你要爱它。就好比抓了一手坏牌，你骂它?恨它?耍着赖要重新发牌?当然你不喜欢它，但你要镇静，对它说“是”，而后看你如何能把这一手坏牌打得精彩。</p>
<p>　大凡能人，都嫌弃宿命，反对宿命。可有谁是能力无限的人吗?那你就得承认局限。承认局限，大家都不反对，但那就是承认宿命啊。承认它，并不等于放弃你的自由意志。浪漫点儿说就是：对舞蹈说是，然后自由地跳。这逻辑可以引申到一切领域。</p>
<p>  所以，既得有所“放下”，又得有所“执着”——放下占有的欲望，执着于行走的努力。放不下前者的，必至贪、嗔、痴。连后者也放下的，难免还是贪、嗔、痴。看一切都是无意义的人，怎么可能会爱命运?不爱命运，必是心中多怨。怨，涉及人即是嗔——他人不合我意；涉及物即是痴——世界不可我心，仔细想来都是一条贪根使然。</p>
<p>二○○七年十一月二十七日</p>
]]></content>
      <categories>
        <category>文学摘抄</category>
        <category>史铁生</category>
      </categories>
      <tags>
        <tag>史铁生</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客小白月赛75</title>
    <url>/2023/07/15/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E6%9C%88%E8%B5%9B75/</url>
    <content><![CDATA[<h1 id="1-上班"><a href="#1-上班" class="headerlink" title="1.上班"></a>1.上班</h1><p>阿宁每天在马路对面等大巴，坐大巴到小山路西。到小山路西后，阿宁可以选择走路或者等班车，去到公司上班。<br> 已知阿宁坐大巴到小山路西需要x分钟。从小山路西走路到公司需要y分钟；从小山路西坐班车到公司需要z分钟。<br> 问阿宁最少需要花费多少分钟到公司？</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x, y, z;</span><br><span class="line">  </span><br><span class="line">    cin &gt;&gt; x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">    <span class="type">int</span> totalTime1 = x + y;</span><br><span class="line">    <span class="type">int</span> totalTime2 = x + z;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> minTime = std::<span class="built_in">min</span>(totalTime1, totalTime2);</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; minTime &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="2-崇拜"><a href="#2-崇拜" class="headerlink" title="2.崇拜"></a>2.崇拜</h1><p>现在蒜同学打算给阿宁讲解n个知识点，第iii个知识点的难度值是a<del>i</del></p>
<p> 对于一个难度值小于x的知识点，蒜同学讲解完后，阿宁就会觉得太简单了，阿宁对蒜同学的崇拜值减1。<br> 对于一个难度值大于y的知识点，蒜同学讲解完后，阿宁就会觉得太难了，简直就是对阿宁弹琴，阿宁对蒜同学的崇拜值加3。</p>
<p> 初始阿宁对蒜同学崇拜值是0。蒜同学打算找到一个知识点讲解顺序，最大化讲解过程的最大崇拜值。</p>
<p> 问，这个最大崇拜值是多少？</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, x, y;</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;x&gt;&gt;y;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="type">int</span> level;</span><br><span class="line">        cin&gt;&gt;level;</span><br><span class="line">        <span class="keyword">if</span>(level&gt;y)&#123;</span><br><span class="line">            flag+=<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//         if(level&lt;x)&#123;</span></span><br><span class="line"><span class="comment">//             flag-=1;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;flag&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>题目</category>
        <category>牛客小白月赛</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>理想与理想</title>
    <url>/2023/01/01/%E7%90%86%E6%83%B3%E4%B8%8E%E7%90%86%E6%83%B3/</url>
    <content><![CDATA[<h1 id="理想与理想"><a href="#理想与理想" class="headerlink" title="理想与理想"></a>理想与理想</h1><p>海边少年有着理想</p>
<p>他在梦里歌唱</p>
<p>在梦里低吟</p>
<p>不要去纠结一些没有答案的事情</p>
<p>以及没有结局的人</p>
<p>其实很多东西都是事在人为</p>
<p>不是无缘而是不愿</p>
<p>各花各有各花香</p>
<p>各山各水各有林</p>
<p>要比爱鲜花更爱自己</p>
<p>要比明天更加幸福</p>
<p>要比爱她更爱自己</p>
<p>切莫，</p>
<p>切莫，</p>
<p>切莫永远清醒，</p>
<p>有时不如干脆糊涂</p>
<p>你，只属于你的你啊</p>
<p>不需要理解风吹来的是哪朵花香</p>
<p>不需要知道她与他的未来</p>
<p>不需要知道她的现状</p>
<p>……</p>
<p>海边少年有着理想</p>
<p>他在梦里歌唱</p>
<p>在梦里低吟</p>
<p>歌唱不存在的爱情</p>
<p>低吟不解的疑惑</p>
<p>他在怀疑</p>
<p>人失了灵魂还是否是人</p>
<p>爱情没了真诚还是否是爱</p>
<p>……</p>
<p>他不解啊</p>
<p>你！你说啊你！</p>
<p>为什么要藏着掖着</p>
<p>说！</p>
<p>失了真诚，多了不该有的技巧</p>
<p>爱情也就没必要存在了</p>
<p>爱情早就不存在了</p>
<p>是的，我曾经的朋友</p>
<p>你大可拿着我们的故事去讲给那个他，</p>
<p>对他说出对我的失望，</p>
<p>说出我的不好</p>
<p>哦，然后啊，可以抱着他，对，就那样！</p>
<p>说吧，对他说啊！</p>
<p>还好遇见了你</p>
<p>说吧！</p>
<p>对他说你们的以后</p>
<p>说吧！</p>
<p>对他说你爱的动漫与小说</p>
<p>全都说出来吧！</p>
<p>对的,曾经</p>
<p>海边少年有着理想</p>
<p>他在梦里歌唱</p>
<p>在梦里低吟</p>
<p>……</p>
]]></content>
      <categories>
        <category>慧说</category>
        <category>日常</category>
        <category>日常生活</category>
        <category>诗歌</category>
      </categories>
      <tags>
        <tag>我的诗</tag>
      </tags>
  </entry>
  <entry>
    <title>朝阳与落日_史铁生</title>
    <url>/2023/02/01/%E6%9C%9D%E9%98%B3%E4%B8%8E%E8%90%BD%E6%97%A5-%E5%8F%B2%E9%93%81%E7%94%9F/</url>
    <content><![CDATA[<p><em><strong>但是太阳它每时每刻都是夕阳也都是旭日。当它熄灭着走下山去收尽苍凉残照之际，正是它在另一面燃烧着爬上山巅布散烈烈朝晖之时。那一天我也将沉静着走下山去，扶着我的拐杖。有一天，在某一处山洼里，势必会跑出来一个欢蹦的孩子，抱着他的玩具。</strong></em></p>
<p><em><strong>当然，那不是我。</strong></em></p>
<p><em><strong>但是，那不是我吗？</strong></em></p>
]]></content>
      <categories>
        <category>文学摘抄</category>
        <category>史铁生</category>
      </categories>
      <tags>
        <tag>史铁生</tag>
      </tags>
  </entry>
  <entry>
    <title>算法202307</title>
    <url>/2023/07/08/%E7%AE%97%E6%B3%95202307/</url>
    <content><![CDATA[<h1 id="动物收容所"><a href="#动物收容所" class="headerlink" title="动物收容所"></a>动物收容所</h1><p>你在动物收容所工作，负责喂养动物。</p>
<p>你一共准备了 D 份狗粮和 C 份猫粮。</p>
<p>一共有 N 只动物排队等候用餐，有的是狗，有的是猫。</p>
<p>当然，也有可能全都是狗或者全都是猫。</p>
<p>我们可以用一个长度为 N 的由大写字母 C 和 D 组成的字符串 S 来表示队列中猫狗的顺序。</p>
<p>如果队列中第 i 只动物是猫，则第 i 个字符为 C。</p>
<p>如果队列中第 i 只动物是狗，则第 i 个字符为 D。</p>
<p>动物们严格按照排队顺序依次进食。</p>
<p>每只狗吃一份狗粮，每只猫吃一份猫粮。</p>
<p>此外，你还有额外的猫粮。</p>
<p>每当一条狗吃完一份狗粮，你就会为猫多提供 M 份猫粮。</p>
<p>每只动物都只会在排在其前面的所有动物都进食完毕后，才肯进食。</p>
<p>这也就意味着，当轮到某只动物进食，但是却没有相应的食物时，它和排在它后面的所有动物都会因此无法进食。</p>
<p>请问，在这种情况下，队列中的<strong>所有狗</strong>能否都得到喂食。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 T，表示共有 T 组测试数据。</p>
<p>每组数据第一行包含四个整数 N,D,C,M,,,。</p>
<p>第二行包含一个长度为 N 的由大写字母 C 和 D 组成的字符串 S。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>每组数据输出一个结果，每个结果占一行。</p>
<p>结果表示为 <code>Case #x: y</code>，其中 x 为组别编号（从 11 开始），如果所有狗都能得到喂食，则 y 为 <code>YES</code>，否则 y 为 <code>NO</code>。</p>
<h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤T≤1001≤≤100,<br>1≤N≤1041≤≤104,<br>0≤D,C≤1060≤,≤106,<br>0≤M≤1060≤≤106。</p>
<h4 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h4><div class="highlight-container" data-rel="Apache"><figure class="iseeu highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">3</span></span><br><span class="line"><span class="attribute">6</span> <span class="number">10</span> <span class="number">4</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">CCDCDD</span></span><br><span class="line"><span class="attribute">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">CCCC</span></span><br><span class="line"><span class="attribute">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">DCCD</span></span><br></pre></td></tr></table></figure></div>

<h4 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h4><div class="highlight-container" data-rel="Autoit"><figure class="iseeu highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Case</span> <span class="meta">#1: YES</span></span><br><span class="line"><span class="keyword">Case</span> <span class="meta">#2: YES</span></span><br><span class="line"><span class="keyword">Case</span> <span class="meta">#3: NO</span></span><br></pre></td></tr></table></figure></div>

<h4 id="样例1解释"><a href="#样例1解释" class="headerlink" title="样例1解释"></a>样例1解释</h4><p>在 Case 1 中，一共有 1010 份狗粮和 44 份猫粮。</p>
<ol>
<li>前两只动物是猫，喂食它们后，还剩下 22 份猫粮。</li>
<li>接下来是一只狗，喂食它后，还剩下 99 份狗粮。</li>
<li>然后是一只猫，喂食它后，还剩下 11 份猫粮。</li>
<li>最后是两只狗，喂食它们后，还剩下 77 份狗粮。</li>
</ol>
<p>所有狗都被喂食。</p>
<p>在 Case 2 中，没有狗，因此，所有狗（00 只）都被喂食了。</p>
<p>在 Case 3 中，第二只狗前面的猫得不到喂食，所有第二只狗也没法得到喂食。</p>
<h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><div class="highlight-container" data-rel="Apache"><figure class="iseeu highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">2</span></span><br><span class="line"><span class="attribute">12</span> <span class="number">4</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="attribute">CDCCCDCCDCDC</span></span><br><span class="line"><span class="attribute">8</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="attribute">DCCCCCDC</span></span><br></pre></td></tr></table></figure></div>

<h4 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h4><div class="highlight-container" data-rel="Autoit"><figure class="iseeu highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Case</span> <span class="meta">#1: YES</span></span><br><span class="line"><span class="keyword">Case</span> <span class="meta">#2: NO</span></span><br></pre></td></tr></table></figure></div>

<h4 id="样例2解释"><a href="#样例2解释" class="headerlink" title="样例2解释"></a>样例2解释</h4><p>在 Case 1 中，每只狗喂食完毕后，都会额外得到两份猫粮。</p>
<ol>
<li>首先是一只猫，喂食它后，还剩下 11 份猫粮。</li>
<li>接下来是一只狗，喂食它后，还剩下 33 份狗粮和 33 份猫粮。</li>
<li>接下来是三只猫，喂食它们后，还剩下 33 份狗粮和 00 份猫粮。</li>
<li>接下来是一只狗，喂食它后，还剩下 22 份狗粮和 22 份猫粮。</li>
<li>接下来是两只猫，喂食它们后，还剩下 22 份狗粮和 00 份猫粮。</li>
<li>接下来是一只狗，喂食它后，还剩下 11 份狗粮和 22 份猫粮。</li>
<li>接下来是一只猫，喂食它后，还剩下 11 份狗粮和 11 份猫粮。</li>
<li>接下来是最后一只狗，喂食它后，还剩下 00 份狗粮和 33 份猫粮。</li>
</ol>
<p>所有狗都被喂食。</p>
<p>在 Case 2 中，第二只狗前面的猫得不到喂食，所有第二只狗也没法得到喂食。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题目</category>
        <category>我的初学练习</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题（C语言）01</title>
    <url>/2023/06/05/%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="算法题（C语言）"><a href="#算法题（C语言）" class="headerlink" title="算法题（C语言）"></a>算法题（C语言）</h1><h2 id="1-三角形的判断"><a href="#1-三角形的判断" class="headerlink" title="1.三角形的判断"></a>1.三角形的判断</h2><p>Reerie正在训练一个三角形分类模型，她手里有一堆数据，你能帮她标注一下么？</p>
<p>给定三个正整数，代表可能组成一个三角形的三条边长。</p>
<p>如果能组成 一个等边三角形，输出”equilateral”; </p>
<p>如果能组成 一个直角三角形，输出”right”; </p>
<p>如果不能组成 一个三角形，输出”error”；</p>
<p>否则，输出”normal”.</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()&#123;</span><br><span class="line">	<span class="type">int</span> T;				<span class="comment">//测试数据的组数</span></span><br><span class="line">    <span class="type">int</span> i;				<span class="comment">//for循环用到的自增i;</span></span><br><span class="line">    <span class="type">int</span> a,b,c;			<span class="comment">//三条边abc</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;T;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">        </span><br><span class="line">       <span class="keyword">if</span> (a == b &amp;&amp; b == c) &#123;				<span class="comment">//三边关系，判断等边三角形；</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;equilateral\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a) &#123;</span><br><span class="line">           																			<span class="comment">//三边关系，判断直角三角形</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;right\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a + b &lt;= c || a + c &lt;= b || b + c &lt;= a) &#123;							<span class="comment">//判断能否组成三角形</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;normal\n&quot;</span>);															<span class="comment">//其他正常三角形</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="2-数字组成的字符串的使用"><a href="#2-数字组成的字符串的使用" class="headerlink" title="2.数字组成的字符串的使用"></a>2.数字组成的字符串的使用</h2><p>兰大有善口技者，名曰GJX，能颂红鲤鱼与绿鲤鱼与驴。你若说1，他便回hongliyu，你若说2，他便回lvliyu，你若说3，他便回lv。现在，你说出了一串只包含1、2、3的数字，请你告诉我们，GJX回答了什么？</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> n[<span class="number">100</span>];				<span class="comment">//定义字符串</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n[i]==<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hongliyu&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n[i]==<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;lvliyu&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n[i]==<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;lv&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="3-时间h-m-t的排序（结构体的简单应用）"><a href="#3-时间h-m-t的排序（结构体的简单应用）" class="headerlink" title="3.时间h,m,t的排序（结构体的简单应用）"></a>3.时间h,m,t的排序（结构体的简单应用）</h2><p>牛群已经跑完了第一场马拉松！N （1 &lt;&#x3D; N &lt;&#x3D; 5，000） 次以小时 （0 &lt;&#x3D; 小时 &lt;&#x3D; 99）、分钟 （0 &lt;&#x3D; 分钟 &lt;&#x3D; 59） 和秒 （0 &lt;&#x3D; 秒 &lt;&#x3D; 59） 的形式发布。Bessie 必须将它们（按小时、分钟和秒）按升序排序，最小时间在前。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> hours;</span><br><span class="line">    <span class="type">int</span> minutes;									<span class="comment">//结构体定义</span></span><br><span class="line">    <span class="type">int</span> seconds;</span><br><span class="line">&#125; Time;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(Time *a, Time *b)</span> &#123;</span><br><span class="line">    Time temp = *a;									<span class="comment">//交换函数</span></span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sortTimes</span><span class="params">(Time t[], <span class="type">int</span> n)</span> &#123;					<span class="comment">//有序排序函数</span></span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[j].hours &gt; t[j + <span class="number">1</span>].hours ||</span><br><span class="line">                (t[j].hours == t[j + <span class="number">1</span>].hours &amp;&amp; t[j].minutes &gt; t[j + <span class="number">1</span>].minutes) ||</span><br><span class="line">                (t[j].hours == t[j + <span class="number">1</span>].hours &amp;&amp; t[j].minutes == t[j + <span class="number">1</span>].minutes &amp;&amp; t[j].seconds &gt; t[j + <span class="number">1</span>].seconds)) &#123;									<span class="comment">//比较</span></span><br><span class="line">                swap(&amp;t[j], &amp;t[j + <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">    <span class="type">int</span> n, i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    Time t[n];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;t[i].hours, &amp;t[i].minutes, &amp;t[i].seconds);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sortTimes(t, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, t[i].hours, t[i].minutes, t[i].seconds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="4-每三位添加逗号"><a href="#4-每三位添加逗号" class="headerlink" title="4.每三位添加逗号"></a>4.每三位添加逗号</h2><p>Bessie 正在处理像153920529这样的大数字 N（1 &lt;&#x3D; N &lt;&#x3D; 2，000，000，000），并意识到每三位插入逗号会更容易阅读（就像在美国通常所做的那样;一些国家更喜欢每三位数字使用句点）。因此，她想添加逗号：153，920，529 。请编写一个程序来执行此操作。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j,y,b;</span><br><span class="line">	<span class="type">long</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);		<span class="comment">//大数字 N=</span></span><br><span class="line">	<span class="keyword">while</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">	&#123;					<span class="comment">//假设n=12345,                      n=123;</span></span><br><span class="line">		a[i]=n%<span class="number">10</span>;		<span class="comment">//a[0]=n%10=5,n=1234;i=1;		   	 3,12,1</span></span><br><span class="line">		n=n/<span class="number">10</span>;			<span class="comment">//结束a[1]=4;n=123;i=2;				2,1,2</span></span><br><span class="line">		i++;			<span class="comment">//a[2]=3;n=12;i=3;                 	 1,0,3</span></span><br><span class="line">	&#125;					<span class="comment">//a[3]=2;n=1;i=4;</span></span><br><span class="line">    					<span class="comment">//a[4]=1,n=0;i=5;</span></span><br><span class="line">    </span><br><span class="line">	b=i%<span class="number">3</span>;				<span class="comment">//b=2;								b=1</span></span><br><span class="line">	i--;				<span class="comment">//i=4;								i=2</span></span><br><span class="line">	y=i;				<span class="comment">//y=4;								y=2</span></span><br><span class="line">	j=i/<span class="number">3</span>;				<span class="comment">//j=1;								j=0</span></span><br><span class="line">	<span class="keyword">if</span>(b&gt;<span class="number">0</span>&amp;&amp;j&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(;i&gt;y-b;i--)		<span class="comment">//i=4,i&gt;3;i--,循环一次；</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);<span class="comment">//输出1</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;,&quot;</span>);          </span><br><span class="line">			j--;			<span class="comment">//j=0终止</span></span><br><span class="line">			y=y-b;			<span class="comment">//y=2</span></span><br><span class="line">		&#125;</span><br><span class="line">  	 <span class="keyword">else</span></span><br><span class="line">     	&#123;</span><br><span class="line">			<span class="keyword">for</span>(;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">			&#123;</span><br><span class="line">			</span><br><span class="line">				<span class="keyword">for</span>(;i&gt;y<span class="number">-3</span>&amp;&amp;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);<span class="comment">//输出123；</span></span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">if</span>(j&gt;<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">			y=y<span class="number">-3</span>;	</span><br><span class="line">			&#125;</span><br><span class="line">   		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="5-简单的价格比较"><a href="#5-简单的价格比较" class="headerlink" title="5.简单的价格比较"></a>5.简单的价格比较</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="type">float</span> x,y,a;</span><br><span class="line">    <span class="type">float</span> sum1,sum2;</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">&quot;%f %f %f&quot;</span>,&amp;x,&amp;y,&amp;a);</span><br><span class="line">    </span><br><span class="line">    sum1=(x+y)*(<span class="number">1</span>-a/<span class="number">100</span>);</span><br><span class="line">    sum2=x+y/<span class="number">2</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(sum1&gt;sum2)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;By myself&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Through school&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="6-字符串条件输出问题"><a href="#6-字符串条件输出问题" class="headerlink" title="6.字符串条件输出问题"></a>6.字符串条件输出问题</h2><p>作为风祭高中高二2班的班长，露西娅正在整理班里的成绩。</p>
<p>给定 n 个字符串。如果一个字符串的结尾是 ‘AK’ ，那么这个人就要AK。请你输出谁会AK</p>
<p>如果有多个人AK，输出最靠前的一个。</p>
<p>数据保证一定有解。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> s=<span class="built_in">strlen</span>(a[i]);</span><br><span class="line">        <span class="keyword">if</span>(a[i][s<span class="number">-1</span>]==<span class="string">&#x27;K&#x27;</span>&amp;&amp;a[i][s<span class="number">-2</span>]==<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i][s<span class="number">-2</span>]=<span class="string">&#x27;\0&#x27;</span>; </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,a[i]);</span><br><span class="line">      &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="7-简单的电梯等待时间问题"><a href="#7-简单的电梯等待时间问题" class="headerlink" title="7.简单的电梯等待时间问题"></a>7.简单的电梯等待时间问题</h2><p>小sun非常懒，所以他非常喜欢坐电梯，但是他发现了一个问题：当他在k楼想要坐电梯去1楼时，如果比他高的楼层有人想坐电梯去1楼，他就必须等待，直到电梯把他楼上的人接完了，才能到他的楼层来接他，于是他非常的苦恼。现在他想问问你，如果他知道某个时刻所有想坐电梯的人所在的楼层，他要等多久电梯才能到他的楼层。   </p>
<p>  关于电梯：   </p>
<p>  电梯最开始在1楼，每一秒可以上升，或者下降一个楼层。   </p>
<p>  在同一时刻有多个请求时，电梯会优先处理最高楼层的请求。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()&#123;</span><br><span class="line">    <span class="type">int</span> n,k,i;</span><br><span class="line">    <span class="type">int</span> max;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> a[n];</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    max=a[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;max)&#123;</span><br><span class="line">            max=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    t=<span class="number">2</span>*(max<span class="number">-1</span>)-k+<span class="number">1</span>; <span class="comment">//数学计算法</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="8-动态规划-求子序列最长的长度"><a href="#8-动态规划-求子序列最长的长度" class="headerlink" title="8.动态规划 求子序列最长的长度"></a>8.<u>动态规划 求子序列最长的长度</u></h2><p>牛牛现在有一个n个数组成的数列,牛牛现在想取一个连续的子序列,并且这个子序列还必须得满足:最多只改变一个数,就可以使得这个连续的子序列是一个严格上升的子序列,牛牛想知道这个连续子序列最长的长度是多少</p>
<p>输入包括两行,第一行包括一个整数n(1 ≤ n ≤ 10^5),即数列的长度; 第二行n个整数a_i, 表示数列中的每个数(1 ≤ a_i ≤ 10^9),以空格分割。</p>
<p>输出一个整数,表示最长的长度。</p>
<p>6<br>7 2 3 1 5 6</p>
<p>5</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span> <span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (a&gt;b?a:b);			<span class="comment">//比较函数</span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">main ()&#123;</span><br><span class="line">    <span class="type">int</span> n,i;</span><br><span class="line">	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>,&amp;n);<span class="comment">//输入N</span></span><br><span class="line">	<span class="type">int</span> a,b[n+<span class="number">2</span>];<span class="comment">//存放数据</span></span><br><span class="line">	<span class="type">char</span> c;</span><br><span class="line">	b[<span class="number">0</span>]=b[n+<span class="number">1</span>]=<span class="number">1000000</span>;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">  	  	<span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>,&amp;a);<span class="comment">//输入序列</span></span><br><span class="line">   	 	b[i]=a;</span><br><span class="line">   	 	<span class="built_in">scanf</span> (<span class="string">&quot;%c&quot;</span>,&amp;c);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	b[n+<span class="number">2</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	<span class="type">int</span> pre[n+<span class="number">2</span>],aft[n+<span class="number">2</span>];</span><br><span class="line">	pre[<span class="number">0</span>]=aft[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    	 &#123;</span><br><span class="line">        	 <span class="keyword">if</span> (b[i]&gt;b[i<span class="number">-1</span>])</span><br><span class="line">         	&#123;</span><br><span class="line">            	 pre[i]=pre[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">        	 &#125;</span><br><span class="line">       	  <span class="keyword">else</span> pre[i]=<span class="number">1</span>;</span><br><span class="line">    	 &#125;</span><br><span class="line">	<span class="keyword">for</span> (i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">     	&#123;</span><br><span class="line">        	 <span class="keyword">if</span> (b[i]&lt;b[i+<span class="number">1</span>])</span><br><span class="line">        	 &#123;</span><br><span class="line">           	  aft[i]=aft[i+<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">        	 &#125;</span><br><span class="line">        	 <span class="keyword">else</span> aft[i]=<span class="number">1</span>;</span><br><span class="line">     	&#125;</span><br><span class="line">	<span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    	 &#123;</span><br><span class="line">        	 ans=max(ans,pre[i<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line">        	 ans=max(ans,aft[i+<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">         </span><br><span class="line">         	<span class="keyword">if</span> (b[i+<span class="number">1</span>]-b[i<span class="number">-1</span>]&gt;=<span class="number">2</span>)</span><br><span class="line">           	&#123;</span><br><span class="line">           	    ans=max(ans,pre[i<span class="number">-1</span>]+aft[i+<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">          	 &#125;</span><br><span class="line">     	&#125;</span><br><span class="line"> </span><br><span class="line"> 	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="9-简单的最大最小运算while的运用"><a href="#9-简单的最大最小运算while的运用" class="headerlink" title="9.简单的最大最小运算while的运用"></a>9.简单的最大最小运算while的运用</h2><p>阿宁喜欢吃柠檬。已知每个柠檬酸度可能是 1到 a，甜度可能是 0 到 b。</p>
<p>现在阿宁有 n 个柠檬，她要全部吃掉，会获得一定的快乐值。快乐值为每个柠檬的酸度和甜度总和。</p>
<p>阿宁最小的快乐值和最大的快乐值可能是多少？</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">   <span class="type">long</span> <span class="type">long</span>  a,b,n;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span>  sum1;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span>  sum2;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld&quot;</span>,&amp;a,&amp;b,&amp;n);</span><br><span class="line">    </span><br><span class="line">    i=n;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        sum1=n*i;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sum2=n*(a+b);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld&quot;</span>,sum1,sum2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>题目</category>
        <category>我的初学练习</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>网络暴力</title>
    <url>/2023/08/02/%E7%BD%91%E7%BB%9C%E6%9A%B4%E5%8A%9B/</url>
    <content><![CDATA[<p><font face = 仿宋>“我每每细想，是谁教导我这样想？是谁教导我不能从内心里得到安宁呢？我想，也许是古人的文字吧。文字是人类的骄傲，文字是人类的力量，文字是比万贯金银更宝贵的财富。我决不要那些披著文字外衣的坏诱惑，决不要那些说谎的胡话；我要文字的真理，文字的正义，文字的力量，文字的光明。我要和现实作斗争，我要和谎言作斗争，我要和强暴作斗争。我要把这些都当作我的武器，作为我最好的朋友。”</font></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E7%BD%91%E7%BB%9C%E6%9A%B4%E5%8A%9B/52e89376482e2475ec53b33a39f27f8.png"
                      alt="狂人日记"
                ></p>
<hr>
<p><font face = 华文行楷 size = 6>百年前，先生将笔作为武器，以文字救人<br>而今，文字已经不是救人的工具了，<br>先生，这次，人们终于把文字作为了武器，只不过朝向了自己人……</font></p>
<ul>
<li>……</li>
<li>2021年10月17日25岁女网红喝农药自杀，被弹幕怂恿去世</li>
<li>2022年1月24日刘学州突然在微博上留下一封遗书，在三亚海岸边服药身亡。刘学州在遗书中表示，遭受了巨大的网络暴力</li>
<li>2022年4月6日好心女顾客赠200元予外卖员，遭受网暴跳楼</li>
<li>2022年8月9日武汉糖水爷爷因网暴放弃生意回老家</li>
<li>2022年10月30日河南刘教师直播授课被黑客入侵，捣乱课堂，引发心梗</li>
<li>2022年12月10日抗癌女孩病情恶化离世后依旧走不出网络暴力</li>
<li>2023年2月14日网红管管不堪忍受网络暴力自杀</li>
<li>2023年2月19日粉色头发女孩遭遇大规模网暴自杀</li>
<li>2023年6月2日校内二次碾轧小学生其母在小区内坠楼身亡</li>
<li>……</li>
</ul>
<p><font face  = 华文行楷 size = 5>我们都记着，你们也别忘了</font></p>
<p><font face = 楷体><div align = right>尝夜之暮，偶观一博主之视频，<br>因触动心灵，于是有所感悟，<br>遂以文字记录于此。</div></font></p>
]]></content>
      <categories>
        <category>慧说</category>
        <category>日常</category>
        <category>日常思考</category>
      </categories>
      <tags>
        <tag>网络暴力</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯基础01</title>
    <url>/2023/07/30/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9F%BA%E7%A1%8001/</url>
    <content><![CDATA[<h2 id="赛制介绍"><a href="#赛制介绍" class="headerlink" title="赛制介绍"></a>赛制介绍</h2><h3 id="ACM"><a href="#ACM" class="headerlink" title="ACM"></a>ACM</h3><ul>
<li>每道题提交之后都有反馈，可以看到“通过”、“运行错误”、“答案错误”等等结果，但看不到错误的测试样例</li>
<li>每道题都有多个测试点，每道题必须通过了所有的测试点才算通过。</li>
<li>每道题不限制提交次数，但没通过的话会有罚时，仅以最后一次提交为准。</li>
<li>比赛过程中一般可以看到实时排名，通过题数相同的情况下按照答题时间+罚时来排名。</li>
</ul>
<h3 id="OI"><a href="#OI" class="headerlink" title="OI"></a>OI</h3><ul>
<li>每道题提交之后都没有任何反馈，每道题都有多个测试点，根据每道题通过的测试点的数量获得相应的分数。</li>
<li>每道题不限制提交次数，如果提交错误没有任何惩罚，仅以最后一次提交为准。（或者叫保存代码。。）</li>
<li>比赛过程中看不到实时排名，赛后按照总得分来排名。</li>
</ul>
<h2 id="蓝桥杯"><a href="#蓝桥杯" class="headerlink" title="蓝桥杯"></a>蓝桥杯</h2><ul>
<li><p>蓝桥杯是工信部组织的一项面向在校大学生的程序设计竟赛，分为软件组和电子组。</p>
</li>
<li><p>竞赛分为两个阶段：初赛（省赛） 和决赛。初赛时长4个小时，一共两个方向共计6个组别同时比赛。决赛时长也为4小时，分为上午和下午两个场次。</p>
</li>
<li><p>竞赛形式为个人赛，每个人一台电脑，全程使用电脑进行答题，不能访问互联网，也不能使用 USB 等电子设备，只能访问所在考场的局域网。但是可以使用电脑的所有功能：excel、ppt、记事本、计算器。</p>
</li>
<li><p>在比赛期间会通过局域网将试题发放到你的电脑里，你需要完成题目并通过网络提交答案。</p>
</li>
<li><p>所有题目都是客观题，以选手提交答案的评测结果为评分依据。判题过程由机器完成。</p>
<h2 id="题目类型"><a href="#题目类型" class="headerlink" title="题目类型"></a>题目类型</h2><p>1、结果填空题</p>
</li>
<li><p>结果填空题是一类具有确定解的问题，要求你填入正确的答案。</p>
</li>
<li><p>无须写出解题过程，不限定计算的过程，你可以通过编程、在纸上计算、甚至用excel 和 Windows 自带的计算器算出答案，只要最终答案正确就能得到满分，否则得0分。</p>
</li>
<li><p>答案确保唯一性，如果你填入的格式和比赛要求的不一样也会被判为0分。</p>
<p>2、编程大题</p>
</li>
<li><p>编程大题具有一定难度梯度、分值不等的编程题目。这些题目的要求明确、答案客观。<strong>程序必须使用标准输入、标准输出（cin、cout、scanf、printf），以便于机器评卷时重定向。</strong>不要输出没有要求的、多余的内容，例如：“请您输入xx数据：”</p>
</li>
<li><p>要求选手通过编程，对给定的标准输入求解，并通过标准输出，按题目要求的格式输出解。题目一般会给出示例数据。</p>
</li>
<li><p>题目的考察点一般集中于对算法的设计和逻辑的组织上。理论上，选手不可能通过猜测或其它非编程的手段获得问题的解。选手给出的<strong>解法应具有普遍性</strong>，不能只适用于题目的示例数据（当然，至少应该适用于题目的示例数据）。</p>
</li>
<li><p>为了测试选手给出解法的性能，评分时用的测试用例可能包含大数据量的压力测试用例，选手选择算法时要<strong>尽可能考虑可行性</strong>的问题。</p>
</li>
</ul>
<h2 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h2><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9F%BA%E7%A1%8001/image-20230730170517462.png"
                      alt="时间复杂度和空间复杂度"
                ></li>
</ul>
]]></content>
      <categories>
        <category>题目</category>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯基础02</title>
    <url>/2023/07/30/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9F%BA%E7%A1%8002/</url>
    <content><![CDATA[<center><font color = green face = 楷体 size = 7>字符串和日期</font></center>

<h1 id="字符串图形"><a href="#字符串图形" class="headerlink" title="字符串图形"></a>字符串图形</h1><h2 id="Q1-三角形"><a href="#Q1-三角形" class="headerlink" title="Q1 三角形"></a>Q1 三角形</h2><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">输入一个整数n(0<span class="language-xml">&lt;n&lt;26),表示字母三角形的层数。</span></span><br><span class="line"><span class="language-xml">输出三角形字母</span></span><br><span class="line"><span class="language-xml">案例，n=2;</span></span><br><span class="line"><span class="language-xml"> A</span></span><br><span class="line"><span class="language-xml">BBB</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">char</span> c; </span><br><span class="line">	cin &gt;&gt; c;</span><br><span class="line">	<span class="keyword">if</span>(c&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= c - <span class="string">&#x27;A&#x27;</span> + <span class="number">1</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= c - <span class="string">&#x27;A&#x27;</span> + <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//差几个打几个空格</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">				cout &lt;&lt; (<span class="type">char</span>)(<span class="string">&#x27;A&#x27;</span> + j - <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line">				cout &lt;&lt; (<span class="type">char</span>)(<span class="string">&#x27;A&#x27;</span> + j - <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= c - <span class="string">&#x27;1&#x27;</span> + <span class="number">1</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= c - <span class="string">&#x27;1&#x27;</span> + <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">				cout &lt;&lt; (<span class="type">char</span>)(<span class="string">&#x27;1&#x27;</span> + j - <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line">				cout &lt;&lt; (<span class="type">char</span>)(<span class="string">&#x27;1&#x27;</span> + j - <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Q2-建房子包围宝藏"><a href="#Q2-建房子包围宝藏" class="headerlink" title="Q2 建房子包围宝藏"></a>Q2 建房子包围宝藏</h2><p>假设地图是一个n行m列的方格地图，地图每个格子*代表一个宝藏。比如2行2列的地图如下</p>
<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">**</span><br><span class="line"><span class="strong">**</span></span><br></pre></td></tr></table></figure></div>

<p>建造的房子是：</p>
<div class="highlight-container" data-rel="Asciidoc"><figure class="iseeu highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+-+</span>-+</span><br><span class="line"><span class="section">|*|*|</span></span><br><span class="line"><span class="section">+-+-+</span></span><br><span class="line"><span class="section">|*|*|</span></span><br><span class="line"><span class="section">+-+-+</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">现在蒜头君告诉你地图的行列数，帮他画出房子的设计图。</span><br><span class="line">输入格式</span><br><span class="line">一行两个整数n,m(0<span class="language-xml">&lt;n,m&lt;=50)，分别表示地图行数和列数。</span></span><br><span class="line"><span class="language-xml">输出格式</span></span><br><span class="line"><span class="language-xml">按照题目中要求的格式输出地图</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n,m ;</span><br><span class="line">	</span><br><span class="line">	cin &gt;&gt; n&gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;+-&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;+&quot;</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;|*&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;|&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;=m; j++) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;+-&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h1><h2 id="1闰年"><a href="#1闰年" class="headerlink" title="1闰年"></a>1闰年</h2><ul>
<li>闰年是一类比较特殊的年份，闺年比平年(非润年)在2月份多一天。关于闰年的判断，很多同学还不是很清楚，下面是闺年的详细定义:</li>
<li>1.年份非整百且能被4整除的为年。 (如2004年就是年2005年不是年)</li>
<li>2年份能被400整除的是年。 (如2000年是年，1900年不是年)需要特别注意，能被100整除的年份，必须要被400整除才是闺年。</li>
</ul>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">is_leap_year</span><span class="params">(<span class="type">int</span> year)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || (year % <span class="number">400</span> == <span class="number">0</span>) )&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="2星期"><a href="#2星期" class="headerlink" title="2星期"></a>2星期</h2><h3 id="例子1：星期几"><a href="#例子1：星期几" class="headerlink" title="例子1：星期几"></a>例子1：星期几</h3><ul>
<li>已知：1年1月1日是星期一</li>
<li>输入格式<br>输入三个正整数，分别表示年、月、日。保证输入年份合法。</li>
<li>输出格式<br>输出星期几。用 Monday 、Tuesday 、Wednesday 、Thursday，Friday，Sunday 表示星期几。</li>
</ul>
<hr>
<ul>
<li><p>记住很久以前的某一天是星期几，比如公元1年1月1日是星期一。然后一天一天模拟，算出日期是星期几。这种方法容易理解，但是实现起来代码可能比较长。</p>
</li>
<li><p>通过年份，月份，天数进行累加</p>
</li>
<li><p>核心：ans +&#x3D; 366 % 7 ；ans % &#x3D; 7;</p>
</li>
<li><p>代码：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string weekday[<span class="number">7</span>] = &#123; <span class="string">&quot;Monday&quot;</span>,<span class="string">&quot;Tuesday&quot;</span> ,<span class="string">&quot;Wednesday&quot;</span>,<span class="string">&quot;Thursday&quot;</span>,<span class="string">&quot;Friday&quot;</span>,<span class="string">&quot;Sunday&quot;</span> &#125;;</span><br><span class="line"><span class="type">int</span> days[<span class="number">13</span>] = &#123; <span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">year</span><span class="params">(<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span>  ((y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>) || (y % <span class="number">400</span> == <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">whatday</span><span class="params">(<span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; y; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (year) &#123;</span><br><span class="line">			ans += <span class="number">366</span> % <span class="number">7</span>;  <span class="comment">//一周7天，计算剩下多少个不满一周的；</span></span><br><span class="line">			ans %= <span class="number">7</span>;        <span class="comment">//多个不满一周的组成一周后剩下几天；</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			ans += <span class="number">365</span> % <span class="number">7</span>;</span><br><span class="line">			ans %= <span class="number">7</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (year) &#123;</span><br><span class="line">			days[<span class="number">2</span>] = <span class="number">29</span>;</span><br><span class="line">			ans += days[i] % <span class="number">7</span>;</span><br><span class="line">			ans %= <span class="number">7</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">            days[<span class="number">2</span>] = <span class="number">28</span>;</span><br><span class="line">			ans += days[i] % <span class="number">7</span>;</span><br><span class="line">			ans %= <span class="number">7</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ans += (d - <span class="number">1</span>) % <span class="number">7</span>;</span><br><span class="line">	ans %= <span class="number">7</span>;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> y, m, d;</span><br><span class="line">	cin &gt;&gt; y &gt;&gt; m &gt;&gt; d;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; weekday[<span class="built_in">whatday</span>(y, m, d)] &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<hr>
<ul>
<li><p>除此之外，有一个公式可以快速地根据日期计算这一天是星期几，这被称为<strong>蔡基姆拉尔森计算公式</strong>。假设星期为w，年份为y，月份为m，日期为d<br>w&#x3D;(d+2 * m+3 * (m+1) &#x2F; 5 + y + y &#x2F; 4 - y &#x2F; 100 + y &#x2F; 400 ) % 7然后把计算出来的 w 加上 1 就是真正的星期几了。</p>
</li>
<li><p>注意每年的1，2月要当成上一年13，14月计算，上述的除法均为整除</p>
</li>
<li><p>代码</p>
</li>
<li><pre><code class="c++">#define _CRT_SECURE_NO_WARNINGS 1
#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;

using namespace std;
string weekday[7] = &#123; &quot;Monday&quot;,&quot;Tuesday&quot; ,&quot;Wednesday&quot;,&quot;Thursday&quot;,&quot;Friday&quot;,&quot;Sunday&quot; &#125;;
int whatday(int y, int m, int d) &#123;
    if (m &lt;= 2) &#123;
        m += 12;
        y--;
    &#125;
    return (d + 2 * m + 3 * (m + 1) / 5 + y + y / 4 - y / 100 + y / 400) % 7;
&#125;
int main() &#123;
    int y, m, d;
    cin &gt;&gt; y &gt;&gt; m &gt;&gt; d;
    cout &lt;&lt; weekday[whatday(y, m, d)] &lt;&lt; endl;
    return 0;
&#125;
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">____</span><br><span class="line"></span><br><span class="line">### 例子<span class="number">2</span>：恋爱纪念日</span><br><span class="line"></span><br><span class="line">- k天后是什么时候</span><br><span class="line">  - 输入格式</span><br><span class="line">    输入<span class="number">4</span>个整数y，m，d，k表示他们在一起的日期，保证是一个<span class="number">1900</span>年<span class="number">1</span>月<span class="number">1</span>日以后的日期，xx想知道他们的<span class="built_in">k</span>(<span class="number">0</span>&lt;k&lt;<span class="number">10000</span>)天纪念日。</span><br><span class="line">  - 输出格式</span><br><span class="line">    输出格式按照yyyy-mm-dd的格式输出天纪念日的日期。月份和天数必须各输出<span class="number">2</span>位。保证最后答案年份不超过<span class="number">4</span>位</span><br><span class="line"></span><br><span class="line">- 代码</span><br><span class="line"></span><br><span class="line">  ```c++</span><br><span class="line">  <span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">  <span class="type">int</span> days[<span class="number">13</span>] = &#123; <span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span> &#125;;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">year</span><span class="params">(<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">  	<span class="keyword">return</span>  ((y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>) || (y % <span class="number">400</span> == <span class="number">0</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">whatday</span><span class="params">(<span class="type">int</span>&amp; y, <span class="type">int</span>&amp; m, <span class="type">int</span>&amp; d, <span class="type">int</span>&amp; k)</span> </span>&#123;</span><br><span class="line">  	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">  		<span class="keyword">if</span> (<span class="built_in">year</span>(y)) &#123;</span><br><span class="line">  			days[<span class="number">2</span>] = <span class="number">29</span>;</span><br><span class="line">  		&#125;</span><br><span class="line">  		<span class="keyword">else</span> &#123;</span><br><span class="line">  			days[<span class="number">2</span>] = <span class="number">28</span>;</span><br><span class="line">  		&#125;</span><br><span class="line">  		d++;</span><br><span class="line">  		<span class="keyword">if</span> (d == days[m] + <span class="number">1</span>) &#123;</span><br><span class="line">  			d = <span class="number">1</span>;</span><br><span class="line">  			m++;</span><br><span class="line">  		&#125;</span><br><span class="line">  		<span class="keyword">if</span> (m == <span class="number">13</span>) &#123;</span><br><span class="line">  			m = <span class="number">1</span>;</span><br><span class="line">  			y++;</span><br><span class="line">  		&#125;</span><br><span class="line">  	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  	<span class="type">int</span> y, m, d, k;</span><br><span class="line">  	cin &gt;&gt; y &gt;&gt; m &gt;&gt; d &gt;&gt; k;</span><br><span class="line">  	<span class="built_in">whatday</span>(y, m, d, k);</span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;%04d-%02d-%02d\n&quot;</span>, y, m, d);</span><br><span class="line">  	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>
</code></pre>
</li>
</ul>
<h3 id="例子3：节假日"><a href="#例子3：节假日" class="headerlink" title="例子3：节假日"></a>例子3：节假日</h3><ul>
<li>日历有 阳历(公历) 和阴历(农历) 之分。每年都有法定节假日，这些分成三类: 双休、阳历节假日、阴历节假日。</li>
</ul>
<ol>
<li>双休<ol>
<li>周六和周日2天</li>
</ol>
</li>
<li>阳历节假日<ol>
<li>元旦:阳历每年1月1日，放假1天</li>
<li>劳动节:阳历每年5月1日，放假1天</li>
<li>国庆节:阳历每年10月1日，放假3天</li>
<li>圣诞节:阳历每年12月25日，放假1天</li>
</ol>
</li>
<li>阴历节假日<ol>
<li>春节:阴历每年1月1日，放假3天</li>
<li>清明节:阳历每年4月4-6日之间的某天，放假1天</li>
<li>端午节:阴历每年5月5日，放假1天</li>
<li>中秋节:阴历每年8月15日,放假1天</li>
</ol>
</li>
</ol>
<ul>
<li><p>当节假日和双休重合时，双休 不延后也不提前保证节假日之间不会重合。现在给你某年的所有阴历节假日的阳历日期，以及当年的1月1日是星期几，请你计算出这一年(阳历1月1日到12月31日)放了多少天假(包括双休、阳历节假日和阴历节假日)</p>
</li>
<li><p>输入格式：<br>第一行输入年份y(1900&lt;y&lt;2050)<br>接下来4行，每行输入两个整数m,d依次表示春节、清明节、端午节和中秋节的阳历日期。<br>最后一行一个整数表示当年1月1号是星期几(一周内的第几天，每周从星期一开始计数，即星期一为第一天)</p>
</li>
<li><p>输出格式：<br>输出天数</p>
</li>
<li><p>代码：</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> mm[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">12</span> &#125;;</span><br><span class="line"><span class="type">int</span> dd[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">25</span> &#125;;</span><br><span class="line"><span class="type">int</span> days[<span class="number">13</span>] = &#123; <span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span> &#125;;</span><br><span class="line">string weekday[<span class="number">7</span>] = &#123; <span class="string">&quot;Monday&quot;</span>,<span class="string">&quot;Tuesday&quot;</span> ,<span class="string">&quot;Wednesday&quot;</span>,<span class="string">&quot;Thursday&quot;</span>,<span class="string">&quot;Friday&quot;</span>,<span class="string">&quot;Sunday&quot;</span> &#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">year</span><span class="params">(<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span>  ((y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>) || (y % <span class="number">400</span> == <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">nextday</span><span class="params">(<span class="type">int</span>&amp; y, <span class="type">int</span>&amp; m, <span class="type">int</span>&amp; d)</span> </span>&#123;</span><br><span class="line">	d++;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (d == days[m] + <span class="number">1</span>) &#123;</span><br><span class="line">		d = <span class="number">1</span>;</span><br><span class="line">		m++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> y, w, m, d, sf;</span><br><span class="line">	<span class="type">int</span> ans;</span><br><span class="line">	cin &gt;&gt; y;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">6</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">		cin &gt;&gt; mm[i] &gt;&gt; dd[i];</span><br><span class="line">	&#125;</span><br><span class="line">	cin &gt;&gt; w; <span class="comment">//星期几</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">year</span>(y)) &#123;</span><br><span class="line">		days[<span class="number">2</span>] = <span class="number">29</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		days[<span class="number">2</span>] = <span class="number">28</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">	m = <span class="number">1</span>;</span><br><span class="line">	d = <span class="number">1</span>;<span class="comment">//元旦</span></span><br><span class="line">	sf = <span class="number">0</span>; <span class="comment">//表示春节</span></span><br><span class="line">	ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (m &lt; <span class="number">13</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (m == mm[<span class="number">6</span>] &amp;&amp; d == dd[<span class="number">6</span>]) &#123;<span class="comment">//6号位 春节  春节不在其他假期里</span></span><br><span class="line">			ans++;</span><br><span class="line">			sf = <span class="number">2</span>; <span class="comment">//春节还有2天假期</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (sf) &#123; <span class="comment">// 春节已经在其他假期里</span></span><br><span class="line">			ans++;</span><br><span class="line">			sf--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (w == <span class="number">6</span> || w == <span class="number">7</span>) &#123;<span class="comment">//周末</span></span><br><span class="line">			ans++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (m == mm[i] &amp;&amp; d == dd[i]) &#123;<span class="comment">//遍历全部日期</span></span><br><span class="line">					ans++;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">nextday</span>(y, m, d);<span class="comment">//下一天</span></span><br><span class="line">		w++;</span><br><span class="line">		<span class="keyword">if</span> (w == <span class="number">8</span>) &#123;</span><br><span class="line">			w = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ul>
<li><p>输入格式<br>输入仅一行，为字符串s(长度不超过 10000)</p>
</li>
<li><p>输出格式<br>输出s中最后一个单词的长度。</p>
</li>
<li><p>代码</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>  s[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s) != EOF);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">strlen</span>(s));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>疑惑：</p>
<p>vs sudio 不能CTRL + Z 或 CTRL + Z 跳出循环</p>
</li>
</ul>
]]></content>
      <categories>
        <category>题目</category>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯基础03</title>
    <url>/2023/07/31/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9F%BA%E7%A1%8003/</url>
    <content><![CDATA[<center><font color = green face = 楷体 size = 7>sort排序</font></center>

<h1 id="方法学习"><a href="#方法学习" class="headerlink" title="方法学习"></a>方法学习</h1><ul>
<li><p>sort 是一个C++已经为我们实现好的工具，当我们要用它时，需要先引入一个算法的库<code>&lt;algorithmnm&gt;</code></p>
</li>
<li><p>sort 可以排序任何类型的元素，包括我们自己定义的结构体。</p>
</li>
<li><p>sort(arr,arr+x);<br>排序arr开头元素到第x个元素，一般比下标多写一个；</p>
</li>
<li><p>sort(arr+i,arr+j)<br>排序arr[i]到arr[j-1]，其他元素位置保持原来的位置</p>
</li>
<li><p>例子</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认排序 从小到大</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  	<span class="type">int</span> arr[] = &#123; <span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span> &#125;;</span><br><span class="line">  	<span class="type">int</span> n = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">  	<span class="built_in">sort</span>(arr, arr + <span class="number">5</span>);</span><br><span class="line">  	<span class="keyword">for</span> (<span class="type">int</span> i =<span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">  		cout &lt;&lt; arr[i];</span><br><span class="line">  	&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="排序方式"><a href="#排序方式" class="headerlink" title="排序方式"></a>排序方式</h2><h3 id="自带函数"><a href="#自带函数" class="headerlink" title="自带函数"></a>自带函数</h3><p>从大到小<br>sort(arr,arr+5,greater<code>&lt;int&gt;</code>())</p>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>小红所在的班级进行了数学考试，老师请小红同学帮忙进行名次排序和各分数段的人数统计工作。<br>现要求如下:将N名同学的考试成绩放在A数组中，各分数段的人数存到 B数组中:<br>成绩为100的人数存到B[1] 中，<br>成绩为90到99的人数存到 B[2] 中，<br>成绩为80到89的人数存到 B[3]中，<br>成绩为70到79的人数存到 B[4]中，<br>成绩为60到69的人数存到 B[5] 中，<br>成绩为60分以下的人数存到 B[6] 中.</p>
<ul>
<li>输入共有两行:<br>第一行:为小红所在班级的人数N(其中1&lt;N &lt;30) ;<br>第二行:为个用1个空格隔开的数学分数(其中分数为100及以内正整数)</li>
<li>输出若干行：<br>分数从高到低<br>各分段的人数</li>
</ul>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span>  A[<span class="number">35</span>];</span><br><span class="line"><span class="type">int</span>  B[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		cin &gt;&gt; A[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(A, A + n, <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		cout &lt;&lt; A[i] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (A[i] == <span class="number">100</span>) &#123;</span><br><span class="line">			B[<span class="number">1</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (A[i] &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">			B[<span class="number">2</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (A[i] &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">			B[<span class="number">3</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (A[i] &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">			B[<span class="number">4</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (A[i]&gt;=<span class="number">60</span>) &#123;</span><br><span class="line">			B[<span class="number">5</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			B[<span class="number">6</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">		cout &lt;&lt; B[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="构造排序方法"><a href="#构造排序方法" class="headerlink" title="构造排序方法"></a>构造排序方法</h3><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从大到小</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span> <span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="例子：奖学金"><a href="#例子：奖学金" class="headerlink" title="例子：奖学金"></a>例子：奖学金</h4><p>某小学最近得到了一笔赞助，打算拿出其中一部分为学习成绩优秀的前 5 名学生发奖学金。</p>
<p>期末，每个学生都有 3 门课的成绩:语文、数学、英语。</p>
<p>先按总分从高到低排序，如果两个同学总分相同，再按语文成绩从高到低排序，如果两个同学总分和语文成绩都相同，那么规定学号小的同学排在前面，这样，每个学生的排序是唯一确定的。</p>
<p>任务：先根据输入的 3 门课的成绩计算总分，然后按上述规则排序，最后按排名顺序输出前五名学生的学号和总分。</p>
<p>注意，在前 5 名同学中，每个人的奖学金都不相同，因此，你必须严格按上述规则排序。</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="type">int</span> StudentId;</span><br><span class="line">    <span class="type">int</span> ChineseScore;</span><br><span class="line">    <span class="type">int</span> MathScore;</span><br><span class="line">    <span class="type">int</span> EnglishScore;</span><br><span class="line">    <span class="type">int</span> IntotalScore;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> Student&amp; a, <span class="type">const</span> Student&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.IntotalScore != b.IntotalScore)</span><br><span class="line">        <span class="keyword">return</span> a.IntotalScore &gt; b.IntotalScore;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (a.ChineseScore != b.ChineseScore)</span><br><span class="line">        <span class="keyword">return</span> a.ChineseScore &gt; b.ChineseScore;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> a.StudentId &lt; b.StudentId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;Student&gt; <span class="title">students</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; students[i].ChineseScore &gt;&gt; students[i].MathScore &gt;&gt; students[i].EnglishScore;</span><br><span class="line">        students[i].StudentId = i + <span class="number">1</span>;</span><br><span class="line">        students[i].IntotalScore = students[i].ChineseScore + students[i].MathScore + students[i].EnglishScore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(students.<span class="built_in">begin</span>(), students.<span class="built_in">end</span>(), compare);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span> &amp;&amp; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; students[i].StudentId &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; students[i].IntotalScore &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>题目</category>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯基础04</title>
    <url>/2023/07/31/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9F%BA%E7%A1%8004/</url>
    <content><![CDATA[<center><font color = green face = 楷体 size = 7>枚举</font></center>

<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><ul>
<li>枚举就是根据提出的问题，一-列出该问题的所有可能的解，并在逐一列出的过程中，检验每个可能解是否是问题的真正解，如果是就采纳这个解，如果不是就继续判断下一个枚举法一般比较直观，容易理解，但由于要检查所有的可能解，因此运行效率较低能够用枚举法解决的题目往往是最简单的一类题目。这种题目具有以下特点:<ul>
<li>解枚举范围是有穷的。</li>
<li>检验条件是确定的。</li>
</ul>
</li>
</ul>
<h2 id="例子1：年龄差"><a href="#例子1：年龄差" class="headerlink" title="例子1：年龄差"></a>例子1：年龄差</h2><ul>
<li><p>某君说:“我的年龄是个两位数，我比儿子大 27 岁，如果把我的年龄的两位数字交换位置，刚好就是我儿子的年龄”</p>
</li>
<li><p>请你计算:某君的年龄一共有多少种可能情况?</p>
</li>
<li><p>我们来分析一下这道题。题里给出某君的年龄是两位数，那么年龄的取值范围是[10-99]内的整数检验条件也是确定的，只要把枚举的年龄的个位与十位交换，如果发现比原数字刚好小27，那么它就是真正的解。</p>
</li>
<li><p>代码</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">10</span>; i &lt;= <span class="number">99</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i - (i % <span class="number">10</span> * <span class="number">10</span> + i / <span class="number">10</span>) == <span class="number">27</span>) &#123;</span><br><span class="line">			flag++;</span><br><span class="line">			cout &lt;&lt; i &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; flag &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="例子2：水仙花数"><a href="#例子2：水仙花数" class="headerlink" title="例子2：水仙花数"></a>例子2：水仙花数</h2><p>水仙花数（Narcissistic number)也被称为超完全数字不变数、自恋数、自幂数、阿姆斯壮数或阿姆斯特朗数，水仙花数是指一个 3 位数，它的每个数位上的数字的 3次幂之和等于它本身。例如：1^3^ + 5^3^+ 3^3^ &#x3D; 153。</p>
<p>求所有的水仙花数</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> a, b, c;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++) &#123;</span><br><span class="line">		a = i / <span class="number">100</span>;</span><br><span class="line">		b = i % <span class="number">100</span> / <span class="number">10</span>;</span><br><span class="line">		c = i % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> sum = a * a * a + b * b * b + c * c * c;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (sum == i) &#123;</span><br><span class="line">			cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="例子3：质数"><a href="#例子3：质数" class="headerlink" title="例子3：质数"></a>例子3：质数</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n, m;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = n; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="type">bool</span> is_prime = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j &lt; i; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">				is_prime = <span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (is_prime) &#123;</span><br><span class="line">			cout &lt;&lt; i &lt;&lt; <span class="string">&quot; YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cout &lt;&lt; i &lt;&lt; <span class="string">&quot; NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="例子4：回文数各个位数之和等于n"><a href="#例子4：回文数各个位数之和等于n" class="headerlink" title="例子4：回文数各个位数之和等于n"></a>例子4：回文数各个位数之和等于n</h2><p>回文数范围为10^5^——10^6^</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> dight[<span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> m = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (x) &#123;</span><br><span class="line">		dight[m++] = x % <span class="number">10</span>;</span><br><span class="line">		sum += x % <span class="number">10</span>;</span><br><span class="line">		x /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (sum != n) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m / <span class="number">2</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (dight[i] != dight[m - <span class="number">1</span> - i]) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">	<span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">10000</span>; i &lt;= <span class="number">100000</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">judge</span>(i)) &#123;</span><br><span class="line">			cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">			count++;</span><br><span class="line">			flag = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; count &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="练习1：拉格朗日定理"><a href="#练习1：拉格朗日定理" class="headerlink" title="练习1：拉格朗日定理"></a>练习1：拉格朗日定理</h2><p>四平方和，拉格朗日定理</p>
<p>每个正整数都可以表示为至多4个正整数的平方和。如果把0包括进去，就正好可以表示为4个数的平方和。</p>
<p>求出字典序最小的一组解 a,b,c,d</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> n, d;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">0</span>; a * a &lt;= n; a++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> b = a; a * a + b * b &lt;= n; b++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> c = b; a * a + b * b + c * c &lt;= n; c++) &#123;</span><br><span class="line">				d = <span class="built_in">sqrt</span>(n - (a * a + b * b + c * c));</span><br><span class="line">				<span class="keyword">if</span> (a * a + b * b + c * c + d * d==n) &#123;</span><br><span class="line">					cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="练习2：最大连续子集和"><a href="#练习2：最大连续子集和" class="headerlink" title="练习2：最大连续子集和"></a>练习2：最大连续子集和</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="type">int</span> sum, ans;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	sum = <span class="number">0</span>;</span><br><span class="line">	ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; n; j++) &#123;</span><br><span class="line">			sum += a[j]; </span><br><span class="line">			<span class="keyword">if</span> (sum &gt; ans) &#123;</span><br><span class="line">				ans = sum;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; ans&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>题目</category>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯基础05</title>
    <url>/2023/08/06/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9F%BA%E7%A1%8005/</url>
    <content><![CDATA[<h1 id="常用STL"><a href="#常用STL" class="headerlink" title="常用STL"></a>常用STL</h1><p>有些时候想开一个数组，但是却不知道应该开多大长度的数组合适，因为我们需要用到的数组可能会根据情况变动。这时候我们就需要用到动态数组。所谓动态数组，也就是不定长数组，数组的长度是可以根据我们的需要动态改变的。动态数组的实现也不难，但是在 C++ 里面有已经写好的标准模板库<code>Standard Template Librarv</code>，就是我们常说的 STL 库，实现了集合、映射表、栈、队列等数据结构和排序、查找等算法。我们可以很方便地调用标准库来减少我们的代码量</p>
<h2 id="vector-动态数组"><a href="#vector-动态数组" class="headerlink" title="vector 动态数组"></a>vector 动态数组</h2><p>函数  <a class="link"   href="https://www.runoob.com/w3cnote/cpp-vector-container-analysis.html" >C++ vector | 菜鸟教程  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>C++中动态数组写作<code>vector</code>，C语言中没有标准库，这也是为什么参加比赛推荐用C++而不用C的原因</p>
<h3 id="引用库"><a href="#引用库" class="headerlink" title="引用库"></a>引用库</h3><p><code>#include&lt;vector&gt;</code></p>
<h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><p>构造一个vector 的语句为: <code>vector&lt;T&gt; a</code></p>
<p>这样我们定义了一个名为 a 的储存类型数据的动态数组。其中是我们数组要储存的数据类型，可以是 <strong>int</strong> 、<strong>float</strong> 、<strong>double</strong>、或者其他<strong>自定义的数据类型</strong>等等。初始的时候 a 是空的。比如<code>vector &lt;int&gt; a</code>定义了一个储存整数的动态数组a。</p>
<h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><p>通过<code>push_back()</code>方法在数组<strong>最后</strong>面插入一个新的元素</p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>通过<code>pop_back()</code>方法在数组<strong>最后</strong>的一个元素</p>
<h3 id="获取长度并且访问元素"><a href="#获取长度并且访问元素" class="headerlink" title="获取长度并且访问元素"></a>获取长度并且访问元素</h3><p>通过<code>size()</code>获取数组长度 通过<code>[]</code>操作直接访问 <code>vector </code>中的元素</p>
<h3 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h3><p>调用 <code>clear()</code> 方法就可清空 <code>vector</code>并不会清空开的内存。</p>
<p>新构建一个，用<code>swap()</code>方法与其交换可以清空vector的内存</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(a); </span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;初始化状态&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;size:&quot;</span> &lt;&lt; a.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		cout &lt;&lt; a[i] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;尾插&quot;</span> &lt;&lt; endl;</span><br><span class="line">	a.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">	a.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">	a.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;size:&quot;</span> &lt;&lt; a.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		cout &lt;&lt; a[i] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;尾删&quot;</span> &lt;&lt; endl;</span><br><span class="line">	a.<span class="built_in">pop_back</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;size:&quot;</span> &lt;&lt; a.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		cout &lt;&lt; a[i] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;清除&quot;</span> &lt;&lt; endl;</span><br><span class="line">	a.<span class="built_in">clear</span>();</span><br><span class="line">	cout &lt;&lt;<span class="string">&quot;size:&quot;</span> &lt;&lt; a.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		cout &lt;&lt; a[i] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;去内存&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(a);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;size:&quot;</span> &lt;&lt; a.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		cout &lt;&lt; a[i] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>vector()</code>:创建一个空vector</p>
<p><code>vector(n)</code>:创建一个vector,元素个数为n,mor</p>
<p><code>vector(n,x)</code>:创建一个vector，元素个数为n,且值均为x</p>
<p><code>vector(const vector&amp;)</code>:复制构造函数</p>
<p><code>vector(begin,end)</code>:复制（begin,end)区间内另一个数组的元素到vector中&#96;</p>
<h3 id="二维动态数组"><a href="#二维动态数组" class="headerlink" title="二维动态数组"></a>二维动态数组</h3><p><code>vector&lt;vector&lt;int&gt; &gt; b</code> </p>
<hr>
<h2 id="set-集合"><a href="#set-集合" class="headerlink" title="set 集合"></a>set 集合</h2><h3 id="引用库-1"><a href="#引用库-1" class="headerlink" title="引用库"></a>引用库</h3><p><code>#include&lt;set&gt;</code><br><code>using namespace std;</code></p>
<h3 id="构造-1"><a href="#构造-1" class="headerlink" title="构造"></a>构造</h3><p><code>set&lt;T&gt; s</code></p>
<p>这样我们定义了一个名为s的、储存类型数据的集合，其中T是集合要储存的数据类型。初始的时候 s 是空集合。比如<code>set&lt;int&gt; aa</code>，<code> set&lt;string&gt; bbb</code> 等等。 </p>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p><code>insert()</code></p>
<p>C++ 中用<code>insert()</code>函数向集合中插入一个<strong>新的元素</strong>。注意如果集合中已经存在了某个元素，再次插入不会产生任何效果，集合中是<strong>不会出现重复</strong>元素的。</p>
<h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><p><code>erase()</code></p>
<p>C++ 中通过erase(）函数删除集合中的一个元素，如果集合中不存在这个元素，不进行任何操作。</p>
<h3 id="断元素是否存在"><a href="#断元素是否存在" class="headerlink" title="断元素是否存在"></a>断元素是否存在</h3><p><code> count()</code></p>
<p>C++ 中如果你想知道某个元素是否在集合中出现，你可以直接用 count()函数。如果集合中存在我们要查找的元素，返回1,否则会返回0。</p>
<h3 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h3><p>C++ 通过<strong>迭代器</strong>可以访问集合中的每个元素，迭代器就好像一根手指，指向 set 中的某个元素。通过操作这个手指，我们可以改变它指向的元素。通过 <code>* </code>(解引用运算符，不是乘号的意思)操作可以获取迭代器指向的元素。通过<code>++</code>操作让送代器指向下一个元素，同理<code>--</code> 操作让迭代器指向上一个元素。</p>
<p>迭代器的写法比较固定，<code>set&lt;T&gt;::iterator it</code> 就定义了一个指向 <code>set&lt;T&gt;</code>这种集合的送代器 it，T是任意的数据类型。其中<code>::iterator</code> 是固定的写法</p>
<p><code>begin </code>函数返回容器中起始元素的迭代器，<code>end</code>函数返回容器的尾后迭代器。</p>
<p><strong>注意</strong>，在C++中遍历<code>set</code> 是从小到大遍历的，也就是说 <code>set</code> 会帮我们排序的。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9F%BA%E7%A1%8005/image-20230806173630803.png"
                      alt="迭代器"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9F%BA%E7%A1%8005/image-20230806173820043.png"
                      alt="总结"
                ></p>
<h3 id="set和结构体"><a href="#set和结构体" class="headerlink" title="set和结构体"></a>set和结构体</h3><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">	<span class="type">int</span> x, y;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Node&amp; rhs) <span class="type">const</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (x == rhs.x) &#123;</span><br><span class="line">			<span class="keyword">return</span> y &lt; rhs.y;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> x &lt; rhs.x;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p><code>operator&lt;</code>表示我们要重载运算符<code>&lt;</code>，可以看成是一个函数名。<code>rhs</code> 是<code>right hand side</code>的简称，有右操作数的意思，这里我们定义为一个<code>const</code>引用。因为该运算符重载定义在结构体内部，左操作数就当前调用<code>operator&lt;</code>的对象<br>特别要注意，不要漏掉最后的<code>const</code> 。<code>const</code> 函数表示不能对其数据成员进行修改操作，并且 <code>const</code> 对象不能调用非 <code>const</code> 成员函数，只允许调用 <code>const</code> 成员函数。<br>上面重载规定了排序方式为，优先按照 <strong>x从小到大排序</strong>，如果x相同，那么再按照 y从小到大排序。经过了<code>&lt;</code>运算符重载的结构体，我们就可以比较两个Node 对象的大小了，因此可以直接储存在<code>set</code>中了。</p>
<p><strong>&amp;避免建临时变量，const防止因传&amp;而改变</strong></p>
<h2 id="map-映射"><a href="#map-映射" class="headerlink" title="map 映射"></a>map 映射</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9F%BA%E7%A1%8005/image-20230806175340482.png"
                      alt="map 映射"
                ></p>
<h3 id="引用库-2"><a href="#引用库-2" class="headerlink" title="引用库"></a>引用库</h3><p><code>#include&lt;map&gt;</code><br><code>using namespace std;</code></p>
<h3 id="构造-2"><a href="#构造-2" class="headerlink" title="构造"></a>构造</h3><p><code>map&lt;T1,T2&gt; m</code>;</p>
<p>在C++中，我们构造一个map 的语句为: <code>map&lt;T1,T2&gt;m</code>;。这样我们定义了一个名为<code>m</code>的从<code>T1</code>类型到<code>T2</code>类型的映射。初始的时候<code>m</code>是空映射。</p>
<p>比如 <code>map &lt;string,int&gt; m</code>构建了一个字符串到整数的映射，这样我们可以把一个字符串和一个整数关联起来。</p>
<h3 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h3><p><code>pair&lt;T1,T2&gt; p;</code>用于保存</p>
<p><code>insert(make_pair(T1,T2))</code></p>
<p>我们向映射中加入新映射对的时候就是通过插入 pair 来实现的。如果插入的 key 之前已经存在了，将不会用插入的新的 value替代原来的 value，也就是这次插入是无效的。</p>
<h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>m[ ]</p>
<p>C++ 中访问映射和数组一样，直接用<code>[]</code>就能访问。比如 <code>dict[&quot;Tom&quot;]</code>就可以获取<code>&quot;Tom&quot;</code>的班级了。而这里有一个比较神奇的地方，如果没有对<code>&quot;Tom&quot;</code>做过映射的话，此时你访问<code>dict[&quot;Tom&quot;]</code>，系统将会自动为<code>&quot;Tom&quot;</code>生成一个映射，其value为对应类型的默认值(比如int的默认值是0，string的默认值是空字符串)。</p>
<p>并且我们可以之后再给映射赋予新的值，比如 <code>dict[&quot;Tom&quot;] = 3</code>，这样为我们提供了另一种方便的插入手段。实际上，我们常<br>常<strong>通过下标访问的方式来插入映射</strong>，而不是通过用<code>insert</code> 插入一个<code>pair</code> 来实现。</p>
<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p><code>map&lt;T1,T2&gt; m::iterator it = m.begin();it !=m.enf(); it++;</code></p>
<p><strong>在C++中遍历map 是按照关键字从小到大遍历的，这一点和 set 有些共性。</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9F%BA%E7%A1%8005/image-20230806211343001.png"
                      alt="总结"
                ></p>
<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="1锯齿矩阵"><a href="#1锯齿矩阵" class="headerlink" title="1锯齿矩阵"></a>1锯齿矩阵</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9F%BA%E7%A1%8005/image-20230806212200812.png"
                      alt="题目要求"
                ></p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n, m;</span><br><span class="line">	<span class="type">int</span> x, y;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		a[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; a[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (j != a[i].<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">				cout &lt;&lt; a[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				cout &lt;&lt; a[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">3 12</span><br><span class="line">1 3</span><br><span class="line">2 2</span><br><span class="line">2 3</span><br><span class="line">2 4</span><br><span class="line">3 1</span><br><span class="line">3 6</span><br><span class="line">1 5</span><br><span class="line">1 2</span><br><span class="line">1 6</span><br><span class="line">3 2</span><br><span class="line">3 7</span><br><span class="line">1 1</span><br><span class="line"></span><br><span class="line">3 5 2 6 1</span><br><span class="line">2 3 4</span><br><span class="line">1 6 2 7</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>题目</category>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu su认证失败</title>
    <url>/2023/09/09/%E8%AE%A4%E8%AF%81%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<p>问题：ubuntu使用su命令时提示认证失败</p>
<p>解决方法：报这个错误的原因是root用户默认锁定的，只要使用passwd命令重新设置下root密码即可</p>
<p>详细步骤：</p>
<p>1、命令行输入sudo passwd</p>
<p>2、根据提示修改密码</p>
<p>3、输入su</p>
<p>4、输入修改后的密码即可进入</p>
]]></content>
      <categories>
        <category>技巧</category>
        <category>系统</category>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>记忆与印象2_史铁生</title>
    <url>/2023/02/01/%E8%AE%B0%E5%BF%86%E4%B8%8E%E5%8D%B0%E8%B1%A12-%E5%8F%B2%E9%93%81%E7%94%9F/</url>
    <content><![CDATA[<h1 id="记忆与印象2"><a href="#记忆与印象2" class="headerlink" title="记忆与印象2"></a><strong>记忆与印象2</strong></h1><p>　一群鸽子，雪白，悠扬。一群男孩和女孩疯疯癫癫五光十色。</p>
<p>　鸽子在阳光下的楼群里吟咏，徘徊。男孩和女孩在公路上骑车飞跑。</p>
<p>　年年如此，天上地下。</p>
<p>　太阳地里的老人闭目养神，男孩和女孩的事他了如指掌——除了不知道还要在这太阳底下坐多久，剩下的他都知道。</p>
<p>　一个日趋丰满的女孩，一个正在成形的男子——流浪的歌手，抑或流浪的恋人——在瓢泼大雨里依偎伫立，在漫天大雪中相拥无语。</p>
<p>　大雨和大雪中的春风，抑或大雨和大雪中的火焰。</p>
<p> 老人躲进屋里。老人坐在窗前。老人看得怦然心动，看得嗒然若失：我们过去多么规矩，现在的年轻人呀！</p>
<p> 曾经的禁区，现在已经没有。</p>
<p> 但，现在真的没有了吗?</p>
<p> 亲吻，依偎，抚慰，阳光下由衷地袒露，月光中油然地嘶喊，一次又一次，呻吟和颤抖，鲁莽与温存，心荡神驰，但终至束手无策……</p>
<p>　肉体已无禁区。但禁果也已不在那里。</p>
<p>倘禁果已因自由而失——“我拿什么献给你，我的爱人?”</p>
<p>　春风强劲，春风无所不至，但肉体是一条边界——你还能走进哪里，还能走进哪里?肉体是一条边界，因而一次次心荡神驰，一次次束手无策。一次又一次，那一条边界更其昭彰。</p>
<p>　无奈的春天，肉体是一条边界，你我是两座囚笼。</p>
<p> 倘禁果已被肉体保释——“我拿什么献给你，我的爱人?”</p>
<p> 所有的词汇都已苍白。所有的动作都已枯槁。所有的进入，无不进入荒茫。</p>
<p>　一个日趋丰满的女孩，一个正在成形的男子，互相近在眼前但是：你在哪儿?</p>
<p>　你在哪儿呀——群山响遍回声。</p>
<p>　群山响彻疯狂的摇滚，春风中遍布沙哑的歌喉。</p>
<p>　整个春天，直至夏天，都是生命力独享风流的季节。长风沛雨，艳阳明月，那时田野被喜悦铺满，天地间充斥着生的豪情，风里梦里也全是不屈不挠的欲望。那时百花都在交媾，万物都在放纵，蜂飞蝶舞、月移影动也都似浪言浪语。那时候灵魂被置于一旁，就像秋天尚且遥远，思念还未成熟。那时候视觉呈一条直线，无暇旁顾。</p>
<p>　不过你要记得，春天的美丽也正在于此。在于纯真和勇敢，在于未通世故。</p>
<p>　设若枝丫折断，春天唯努力生长。设若花朵凋残，春天唯含苞再放。设若暴雪狂风，但只要春天来了，天地间总会飘荡起焦渴的呼喊。我还记得一个伤残的青年，是怎样在习俗的忽略中，摇了轮椅去看望他的所爱之人。</p>
<p>　也许是勇敢，也许不过是草率，是鲁莽或无暇旁顾，他在一个早春的礼拜日起程。摇着轮椅，走过融雪的残冬，走过翻浆的土路，走过滴水的屋檐，走过一路上正常的眼睛，那时，伤残的春天并未感觉到伤残，只感觉到春天。摇着轮椅，走过解冻的河流，走过湿润的木桥，走过满天摇荡的杨花，走过幢幢喜悦的楼房，那时，伤残的春天并未有什么卑怯，只有春风中正常的渴望。走过喧嚷的街市，走过一声高过一声的叫卖，走过灿烂的尘埃，那时，伤残的春天毫无防备，只是越走越怕那即将到来的见面太过俗常……就这样，他摇着轮椅走进一处安静的宅区——安静的绿柳，安静的桃花，安静的阳光下安静的楼房，以及楼房投下的安静的阴影。</p>
<p>　但是台阶！你应该料到但是你忘了，轮椅上不去。自然就无法敲门。真是莫大的遗憾。屡屡设想过她开门时的惊喜，一路上也还在设想。便只好在安静的阳光和安静的阴影里徘徊，等有人来传话。但是没人。半天都没有一个人来。只有安静的绿柳和安静的桃花。</p>
<p>　那就喊她吧。喊吧，只好这样。真是大煞风景，亏待了一路的好心情。</p>
<p>　喊声惊动了好几个安静的楼窗。转动的玻璃搅乱了阳光。你们这些幸运的人哪，竟朝夕与她为邻！</p>
<p>　她出来了。</p>
<p>　可是怎么回事?她脸上没有惊喜，倒像是惊慌：“你怎么来了?”</p>
<p> “啊老天，你家可真难找。”</p>
<p>　她明显心神不定：“有什么事吗?”</p>
<p> “什么事?没有哇?”</p>
<p> 她频频四顾：“那你……”</p>
<p> “没想到走了这么久……”</p>
<p>　她打断你：“跑这么远干吗，以后还是我去看你。”</p>
<p> “咳，这点儿路算什么?”</p>
<p> 她把声音压得不能再低：“嘘——今天不行，他们都在家呢。”</p>
<p>　不行?什么不行?他们?他们怎么了?噢……是了，就像那台阶一样你应该料到他们！但是忘了。春天给忘了。尤其是伤残，给忘了。</p>
<p>　她身后的那扇落地窗，里边，窗帷旁，有张紧张的脸，中年人的脸，身体埋在沉垂的窗帷里半隐半现。你一看他，他就埋进窗帷，你不看他，他又探身出现一一目光严肃，或是忧虑，甚至警惕。继而又多了几道同样的目光，在玻璃后面晃动。一会儿，窗帷缓缓地合拢，玻璃上只剩下安静的阳光和安静的桃花。</p>
<p> 你看出她面有难色。</p>
<p> “哦，我路过这儿，顺便看看你。”</p>
<p>　你听出她应接得急切：“那好吧，我送送你。”</p>
<p> “不用了，我摇起轮椅来，很快。”</p>
<p> “你还要去哪儿?”</p>
<p> “不。回家。”</p>
<p>　但他没有回家。他沿着一条大路走下去，一直走到傍晚，走到了城市的边缘，听见旷野上的春风更加肆无忌惮。那时候他知道了什么?那个遥远的春天，他懂得了什么?那个伤残的春天，一个伤残的青年终于看见了伤残。</p>
<p>　看见了伤残，却摆脱不了春天。春风强劲也是一座牢笼，一副枷锁，一处炼狱，一条命定的路途。</p>
<p>　盼望与祈祷。彷徨与等待。以至漫漫长夏，如火如荼。</p>
<p>　必要等到秋天。</p>
<p>　秋风起时，疯狂的摇滚才能聚敛成爱的语言。</p>
<p><em><strong>在《我与地坛》里有这样一段话：</strong></em></p>
<p><em><strong>要是有些事我没说，地坛，你别以为是我忘了，我什么也没忘，但是有些事只适合收藏。不能说，也不能想，却又不能忘。它们不能变成语言，它们无法变成语言，一旦变成语言就不再是它们了。它们是一片朦胧的温馨与寂寥，是一片成熟的希望与绝望，它们的领地只有两处: 心与坟墓。比如说邮票，有些是用于寄信的，有些仅仅是为了收藏。</strong></em></p>
<p><strong>终于一天，有人听懂了这些话，问“这里面似有个爱情故事，干吗不写下去?”</strong></p>
<p><strong>“这就是那个爱情故事的全部。”</strong></p>
<p><strong>在那座废弃的古园里你去听吧，到处都是爱情故事。到那座荒芜的祭坛上你去想吧，把自古而今的爱情故事都放到那儿去，就是这一个爱情故事的全部。</strong></p>
<p><strong>“这个爱情故事，好像是个悲剧?”</strong></p>
<p><strong>“你说的是婚姻，爱情没有悲剧。”</strong></p>
<p><strong>对爱者而言，爱情怎么会是悲剧? 对春天而言，秋天是它的悲剧吗?结尾是什么?</strong></p>
<p><strong>“等待。”</strong></p>
<p><strong>“之后呢?”</strong></p>
<p><strong>”没有之后。”</strong></p>
<p><strong>”或者说，等待的结果呢?”</strong></p>
<p><strong>“等待就是结果。”</strong></p>
<p><strong>“那，不是悲剧吗?</strong></p>
<p><strong>“不，是秋天。”</strong></p>
<p>夏日将尽，阳光悄然走进屋里，所有随它移动的影子都似陷入了回忆。那时在远处，在北方的天边，远得近乎抽象的地方，仔细听，会有些极细微的骚动正仿佛站成一排，拉开一线，喻嗡嘤嘤跃跃欲试，那就是最初的秋风，是秋风正在起程。</p>
]]></content>
      <categories>
        <category>文学摘抄</category>
        <category>史铁生</category>
      </categories>
      <tags>
        <tag>史铁生</tag>
      </tags>
  </entry>
  <entry>
    <title>通过ps将图片背景变成透明</title>
    <url>/2023/08/02/%E9%80%9A%E8%BF%87ps%E5%B0%86%E5%9B%BE%E7%89%87%E8%83%8C%E6%99%AF%E5%8F%98%E6%88%90%E9%80%8F%E6%98%8E/</url>
    <content><![CDATA[<h1 id="PS方法"><a href="#PS方法" class="headerlink" title="PS方法"></a>PS方法</h1><ul>
<li><p>第一步，将图片拖入&#x2F;导入ps软件</p>
</li>
<li><p>第二步，点击菜单栏“选择”项中的“色彩范围”，在弹出对话框之后，鼠标光标变为吸管样式，单击选中背景，单击“确定”</p>
</li>
<li><p>右侧选中图层，单击鼠标右键，选择“复制图层”，弹出的对话框中点击确认即可</p>
</li>
<li><p>选中名为“xxx”的图层(修改前的)，单击鼠标右键选择“删除图层”。</p>
</li>
<li><p>选中复制的图层“xxx副本”，点击键盘上的“delete”键，此时背景颜色已删除。</p>
</li>
<li><p>选择菜单栏“文件”—“存储为”，选择图片要存储的位置，格式选择“PNG”。此时便已全部处理完毕。</p>
<p><font color  = red>保存时记得另存为“PNG”格式，jpg格式不显示透明。</font></p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E9%80%9A%E8%BF%87ps%E5%B0%86%E5%9B%BE%E7%89%87%E8%83%8C%E6%99%AF%E5%8F%98%E6%88%90%E9%80%8F%E6%98%8E/20230802_094845.gif"
                      alt="PS演示"
                ></p>
<h1 id="Powerpoint（office）方法"><a href="#Powerpoint（office）方法" class="headerlink" title="Powerpoint（office）方法"></a>Powerpoint（office）方法</h1><ul>
<li><p>第一步 将图片插入PPT：点击“插入”—“图片”，选择需要处理的图片，或者直接将待处理图片拖入PPT。</p>
</li>
<li><p>双击插入的图片，出现“图片格式”，点击 “图片格式”下的“颜色”选项，下拉找到“设置透明色”选项。</p>
</li>
<li><p>将变成吸管样式的光标移至背景上单击，此时背景色变为透明</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../images/%E9%80%9A%E8%BF%87ps%E5%B0%86%E5%9B%BE%E7%89%87%E8%83%8C%E6%99%AF%E5%8F%98%E6%88%90%E9%80%8F%E6%98%8E/20230802_103646.gif"
                      alt="Powerpoint演示"
                ></p>
</li>
</ul>
]]></content>
      <categories>
        <category>技巧</category>
        <category>PS</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>诈骗小故事</title>
    <url>/2023/08/04/%E8%AF%88%E9%AA%97%E5%B0%8F%E6%95%85%E4%BA%8B/</url>
    <content><![CDATA[<p><font face = 方正舒体>时光荏苒，宛如织布机之经纬交错，生活种种皆化作缤纷华丽之图，诗词画意融汇其中。此图犹如不曾停歇之交响乐，弹奏着欢快之音，吟唱着哀愁之诗，应对着挑战之乐章，品味着成长之篇。</font></p>
<ul>
<li><p>今天（2023年08月04日）下午六点半许，我接到一个号码归属地为黑龙江的电话，与以往的东北人不同，号主说着一口流利的南方话，大概是江浙地区的口音，先是问我，是xxx吗？得到我确切的回复后，他好像松了一口气，说把我的快递弄丢了，很不好意思，希望不要投诉他。</p>
<p>我心想，哟，是个在黑龙江务工的快递小哥，从南方来不易，口音没变也不易，就配合着他，直到他说，通过抖音进行一下沟通，我心想，咦？骗子，好玩！就更加配合着他了，通过抖音添加了个头像模糊且为支付宝二维码的陌生男子，说要语音交流，我接受了，然后声音是个南方女子，一开始我还有一句没一句的附和着，直到：</p>
<p>pz：你扫一下二维码，我们有专业客服为你服务<br>me：好的好的<br>pz:好了吗？<br>me:稍等稍等<br>pz:可以了吗？<br>me:马上（有专业客服你和我说啥，认真一点啊）<br>……<br>扫码后（用支付宝打开，说是阿里的官方客服），客服让我下载一个<a class="link"   href="https://baike.baidu.com/item/ToDesk/56593628" >ToDesk <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>,说录音使用，我怎么能信呢，开始和他说我手机卡了，期间，查看了他的网站（这里不做展示）发现他不仅不是阿里的域名，网站也没有备案……</p>
<p>然后挂了……</p>
<p>后续在<a class="link"   href="https://baike.baidu.com/item/%E5%9B%BD%E5%AE%B6%E5%8F%8D%E8%AF%88%E4%B8%AD%E5%BF%83/55975989" >国家反诈中心 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>进行了举报</p>
</li>
</ul>
]]></content>
      <categories>
        <category>慧说</category>
        <category>日常</category>
        <category>日常生活</category>
        <category>小故事</category>
      </categories>
      <tags>
        <tag>诈骗</tag>
      </tags>
  </entry>
</search>
